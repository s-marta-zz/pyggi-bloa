<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="WRAP.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>WRAP</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"abc"</literal><operator>.</operator><call><name>lastIndexOf</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>,<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>wrap</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cols</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lines</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>cols</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>cols</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// off by one?</comment>
            <if_stmt><if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>end</name> <operator>=</operator> <name>cols</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>lines</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <return>return <expr><name>lines</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
