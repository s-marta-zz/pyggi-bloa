<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="KTH.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="block">/*

 */</comment>
<class><specifier>public</specifier> class <name>KTH</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>Integer</name></type> <name>kth</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pivot</name> <init>= <expr><call><name><name>arr</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>below</name></decl>, <decl><type ref="prev"/><name>above</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>below</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>above</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Integer</name></type> <name>x</name> <range>: <expr><name>arr</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>pivot</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>below</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>pivot</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>above</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>num_less</name> <init>= <expr><call><name><name>below</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num_lessoreq</name> <init>= <expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>above</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>num_less</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>kth</name><argument_list>(<argument><expr><name>below</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>num_lessoreq</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><call><name>kth</name><argument_list>(<argument><expr><name>above</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><name>pivot</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></function>
}</block></class>
</unit>
