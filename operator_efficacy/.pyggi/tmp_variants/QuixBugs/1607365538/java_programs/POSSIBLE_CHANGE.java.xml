<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="POSSIBLE_CHANGE.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>POSSIBLE_CHANGE</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>int</name></type> <name>possible_change</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>coins</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>total</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name><name>coins</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>rest</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>copyOfRange</name></name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coins</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>possible_change</name><argument_list>(<argument><expr><name>coins</name></expr></argument>, <argument><expr><name>total</name><operator>-</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>possible_change</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
