<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="SHUNTING_YARD.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>SHUNTING_YARD</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name>List</name></type> <name>shunting_yard</name><parameter_list>(<parameter><decl><type><name>ArrayList</name></type> <name>tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>precedence</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>precedence</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"+"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>precedence</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>precedence</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"*"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>precedence</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ArrayList</name></type> <name>rpntokens</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ArrayDeque</name></type> <name>opstack</name> <init>= <expr><operator>new</operator> <call><name>ArrayDeque</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Object</name></type> <name>token</name><range>: <expr><name>tokens</name></expr></range></decl></init>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>Integer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>isInstance</name></name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<comment type="line">// cover also Double case I guess?</comment>
                <expr_stmt><expr><call><name><name>rpntokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <decl_stmt><decl><type><name>String</name></type> <name>operator</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>token</name></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>opstack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>precedence</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>operator</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name><name>precedence</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>opstack</name><operator>.</operator><name>getLast</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name><name>rpntokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>opstack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>

        <while>while <condition>(<expr><operator>!</operator><call><name><name>opstack</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name><name>rpntokens</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>opstack</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <return>return <expr><name>rpntokens</name></expr>;</return>
    </block_content>}</block></function>

}</block></class>
</unit>
