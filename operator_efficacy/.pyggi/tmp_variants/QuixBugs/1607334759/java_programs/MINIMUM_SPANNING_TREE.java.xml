<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="MINIMUM_SPANNING_TREE.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="block" format="javadoc">/**
 * Minimum spanning tree
 */</comment>
<class><specifier>public</specifier> class <name>MINIMUM_SPANNING_TREE</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>WeightedEdge</name></argument>&gt;</argument_list></name></type> <name>minimum_spanning_tree</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>WeightedEdge</name></argument>&gt;</argument_list></name></type> <name>weightedEdges</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupByNode</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>WeightedEdge</name></argument>&gt;</argument_list></name></type> <name>minSpanningTree</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>weightedEdges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>WeightedEdge</name></type> <name>edge</name> <range>: <expr><name>weightedEdges</name></expr></range></decl></init>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>Node</name></type> <name>vertex_u</name> <init>= <expr><name><name>edge</name><operator>.</operator><name>node1</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Node</name></type> <name>vertex_v</name> <init>= <expr><name><name>edge</name><operator>.</operator><name>node2</name></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//System.out.printf("u: %s, v: %s weight: %d\n", vertex_u.getValue(), vertex_v.getValue(), edge.weight);</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>groupByNode</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>groupByNode</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name><name>groupByNode</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name><name>groupByNode</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><call><name><name>groupByNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>groupByNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>minSpanningTree</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>groupByNode</name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>groupByNode</name></expr></argument>, <argument><expr><name>vertex_u</name></expr></argument>, <argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>Node</name></type> <name>node</name> <range>: <expr><call><name><name>groupByNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{<block_content>
                    <expr_stmt><expr><name>groupByNode</name> <operator>=</operator> <call><name>update</name><argument_list>(<argument><expr><name>groupByNode</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>vertex_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><name>minSpanningTree</name></expr>;</return>
    </block_content>}</block></function>

    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>update</name><parameter_list>(<parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>,<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>groupByNode</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>vertex_u</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>vertex_v</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Node</name></argument>&gt;</argument_list></name></type> <name>vertex_u_span</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>groupByNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vertex_u_span</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>groupByNode</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>vertex_v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>groupByNode</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>vertex_u</name></expr></argument>, <argument><expr><name>vertex_u_span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>groupByNode</name></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
