2020-12-18 09:39:19,886	[INFO]	Path to the temporal program variants: ./.pyggi/tmp_variants/QuixBugs/1608280759
2020-12-18 09:39:19,886	[INFO]	========== EXPERIMENT FOR ['java_programs/PASCAL.java.xml']  ==========
2020-12-18 09:39:19,886	[INFO]	modification points:
 ['./decl_stmt[1]', './decl_stmt[2]', './expr_stmt[1]', './expr_stmt[2]', './for[1]', './for[1]/operator_comp[1]', './for[1]/decl_stmt[1]', './for[1]/for[1]', './for[1]/for[1]/operator_comp[1]', './for[1]/for[1]/decl_stmt[1]', './for[1]/for[1]/if[1]', './for[1]/for[1]/if[1]/operator_comp[1]', './for[1]/for[1]/if[1]/expr_stmt[1]', './for[1]/for[1]/expr_stmt[1]', './for[1]/for[1]/if[2]', './for[1]/for[1]/if[2]/operator_comp[1]', './for[1]/for[1]/if[2]/expr_stmt[1]', './for[1]/for[1]/expr_stmt[2]', './for[1]/for[1]/expr_stmt[3]', './for[1]/expr_stmt[1]', './return[1]']
2020-12-18 09:39:19,886	[INFO]	number of statements and comparisons: 17, 4
2020-12-18 09:39:19,887	[INFO]	========== EPOCH 1 ==========
2020-12-18 09:39:19,887	[INFO]	==== WARMUP ====
2020-12-18 09:39:22,918	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:39:22,918	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:39:25,986	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:39:25,986	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:39:29,110	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:39:29,110	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:39:32,171	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 09:39:32,171	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:39:32,171	[INFO]	==== START ====
2020-12-18 09:39:35,237	[INFO]	1	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:39:35,238	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:39:35,239	[INFO]	2	SUCCESS	+4.0	
2020-12-18 09:39:35,239	[DEBUG]	
2020-12-18 09:39:36,179	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:39:39,314	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:39:39,315	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:39:39,316	[INFO]	5	SUCCESS	+4.0	
2020-12-18 09:39:39,316	[DEBUG]	
2020-12-18 09:39:42,507	[INFO]	6	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:39:42,509	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upleft = rows.get(r-1).get(c-1);
              }
              rows.add(row);
          }

2020-12-18 09:39:42,511	[INFO]	7	SUCCESS	+4.0	
2020-12-18 09:39:42,512	[DEBUG]	
2020-12-18 09:39:43,351	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:39:43,353	[INFO]	9	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:39:43,353	[DEBUG]	
2020-12-18 09:39:43,354	[INFO]	10	SUCCESS	+4.0	
2020-12-18 09:39:43,354	[DEBUG]	
2020-12-18 09:39:43,354	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:39:43,355	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:39:43,355	[INFO]	12	SUCCESS	+4.0	
2020-12-18 09:39:43,356	[DEBUG]	
2020-12-18 09:39:44,076	[INFO]	13	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:39:44,077	[INFO]	14	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:39:44,078	[DEBUG]	
2020-12-18 09:39:44,953	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:39:44,954	[INFO]	16	SUCCESS	+4.0	
2020-12-18 09:39:44,954	[DEBUG]	
2020-12-18 09:39:48,072	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:39:48,073	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:39:48,986	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:39:48,987	[INFO]	19	SUCCESS	+4.0	
2020-12-18 09:39:48,988	[DEBUG]	
2020-12-18 09:39:49,887	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:39:52,993	[INFO]	21	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:39:52,994	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:39:53,893	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:39:56,950	[INFO]	23	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:39:56,951	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:40:00,134	[INFO]	24	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:40:00,135	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,39 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 21,39 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:40:00,986	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:40:04,063	[INFO]	26	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 09:40:04,065	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:40:04,982	[INFO]	27	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:40:08,071	[INFO]	28	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 09:40:08,072	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:40:11,126	[INFO]	29	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 09:40:11,129	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:40:12,072	[INFO]	30	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:40:15,161	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 09:40:15,161	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,32 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 17,32 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:40:16,059	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:40:19,245	[INFO]	33	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:40:19,246	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,32 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 17,33 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:40:34,634	[INFO]	34	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:40:37,256	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:40:40,158	[INFO]	36	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:40:40,159	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:40:43,052	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:40:43,053	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:40:46,197	[INFO]	38	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:40:49,289	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:40:49,292	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:40:50,011	[INFO]	40	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:40:53,163	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:40:53,164	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:40:54,056	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:40:57,139	[INFO]	43	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:40:57,140	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:40:58,045	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:40:58,970	[INFO]	45	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:41:02,080	[INFO]	46	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:41:02,081	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:41:05,124	[INFO]	47	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 09:41:05,124	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:41:05,125	[INFO]	48	SUCCESS	+4.0	
2020-12-18 09:41:05,125	[DEBUG]	
2020-12-18 09:41:05,976	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:41:09,095	[INFO]	50	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:41:09,096	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:41:09,097	[INFO]	51	SUCCESS	+4.0	
2020-12-18 09:41:09,097	[DEBUG]	
2020-12-18 09:41:09,988	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:41:10,881	[INFO]	53	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:41:10,883	[INFO]	54	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:41:10,883	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:41:10,884	[INFO]	55	SUCCESS	+4.0	
2020-12-18 09:41:10,885	[DEBUG]	
2020-12-18 09:41:11,807	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:41:14,977	[INFO]	57	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:41:14,977	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:41:14,978	[INFO]	58	SUCCESS	+4.0	
2020-12-18 09:41:14,978	[DEBUG]	
2020-12-18 09:41:15,854	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:41:18,920	[INFO]	60	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:41:18,921	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:41:18,921	[INFO]	61	SUCCESS	+4.0	
2020-12-18 09:41:18,922	[DEBUG]	
2020-12-18 09:41:19,813	[INFO]	62	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:41:20,701	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:41:23,808	[INFO]	64	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:41:23,809	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:41:24,755	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:41:25,675	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:41:25,677	[INFO]	67	SUCCESS	+4.0	
2020-12-18 09:41:25,677	[DEBUG]	
2020-12-18 09:41:25,679	[INFO]	68	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:41:25,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:41:25,680	[INFO]	69	SUCCESS	+4.0	
2020-12-18 09:41:25,680	[DEBUG]	
2020-12-18 09:41:28,717	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:41:28,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:41:28,719	[INFO]	71	SUCCESS	+4.0	
2020-12-18 09:41:28,719	[DEBUG]	
2020-12-18 09:41:28,720	[INFO]	72	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:41:28,720	[DEBUG]	
2020-12-18 09:41:28,720	[INFO]	73	SUCCESS	+4.0	
2020-12-18 09:41:28,721	[DEBUG]	
2020-12-18 09:41:29,622	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:41:30,554	[INFO]	75	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:41:31,465	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:41:31,466	[INFO]	77	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:41:31,466	[DEBUG]	
2020-12-18 09:41:31,467	[INFO]	78	SUCCESS	+4.0	
2020-12-18 09:41:31,467	[DEBUG]	
2020-12-18 09:41:32,421	[INFO]	79	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:41:33,332	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:41:34,078	[INFO]	81	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:41:34,079	[INFO]	82	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:41:34,079	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:41:34,080	[INFO]	83	SUCCESS	+4.0	
2020-12-18 09:41:34,080	[DEBUG]	
2020-12-18 09:41:34,081	[INFO]	84	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:41:34,081	[DEBUG]	
2020-12-18 09:41:34,082	[INFO]	85	SUCCESS	+4.0	
2020-12-18 09:41:34,082	[DEBUG]	
2020-12-18 09:41:37,161	[INFO]	86	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:41:40,303	[INFO]	87	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:41:40,304	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 09:41:41,238	[INFO]	88	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:41:44,481	[INFO]	89	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:41:44,482	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 09:41:44,483	[INFO]	90	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:41:44,483	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 09:41:44,484	[INFO]	91	SUCCESS	+4.0	
2020-12-18 09:41:44,484	[DEBUG]	
2020-12-18 09:41:45,364	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:41:46,284	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:41:47,073	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:41:47,944	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:41:50,964	[INFO]	96	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:41:50,965	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:41:50,965	[INFO]	97	SUCCESS	+4.0	
2020-12-18 09:41:50,966	[DEBUG]	
2020-12-18 09:41:50,966	[INFO]	98	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 09:41:50,967	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:41:54,057	[INFO]	99	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:41:54,058	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:41:57,108	[INFO]	100	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:41:57,109	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:41:57,109	[INFO]	==== END ====
2020-12-18 09:41:57,109	[INFO]	Reason: target fitness reached
2020-12-18 09:41:57,110	[INFO]	
2020-12-18 09:41:57,110	[INFO]	========== EPOCH 2 ==========
2020-12-18 09:41:57,111	[INFO]	==== WARMUP ====
2020-12-18 09:42:00,167	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:42:00,168	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:42:03,193	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:42:03,194	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:42:06,267	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:42:06,267	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:42:09,318	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 09:42:09,319	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:42:09,319	[INFO]	==== START ====
2020-12-18 09:42:10,222	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:42:10,223	[INFO]	2	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:42:10,224	[DEBUG]	
2020-12-18 09:42:13,321	[INFO]	3	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:42:13,322	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:42:14,222	[INFO]	4	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:42:14,223	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:42:14,223	[DEBUG]	
2020-12-18 09:42:14,224	[INFO]	6	SUCCESS	+4.0	
2020-12-18 09:42:14,224	[DEBUG]	
2020-12-18 09:42:17,361	[INFO]	7	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:42:20,354	[INFO]	8	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:42:20,355	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:20,356	[INFO]	9	SUCCESS	+4.0	
2020-12-18 09:42:20,356	[DEBUG]	
2020-12-18 09:42:21,089	[INFO]	10	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:42:24,212	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:42:24,213	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:42:25,105	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:42:25,107	[INFO]	13	SUCCESS	+4.0	
2020-12-18 09:42:25,107	[DEBUG]	
2020-12-18 09:42:25,991	[INFO]	14	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:42:26,921	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:42:26,924	[INFO]	16	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:42:26,925	[DEBUG]	
2020-12-18 09:42:27,830	[INFO]	17	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:42:28,722	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:42:28,723	[INFO]	19	SUCCESS	+4.0	
2020-12-18 09:42:28,724	[DEBUG]	
2020-12-18 09:42:31,774	[INFO]	20	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:42:31,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:42:31,776	[INFO]	21	SUCCESS	+4.0	
2020-12-18 09:42:31,776	[DEBUG]	
2020-12-18 09:42:32,720	[INFO]	22	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:42:35,863	[INFO]	23	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:42:35,864	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:42:38,931	[INFO]	24	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:42:38,932	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:42:42,069	[INFO]	25	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:42:42,070	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:42:42,841	[INFO]	26	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:42:43,760	[INFO]	27	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:42:44,535	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:42:44,538	[INFO]	29	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:42:44,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:42:47,656	[INFO]	30	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:42:47,657	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:42:47,658	[INFO]	31	SUCCESS	+4.0	
2020-12-18 09:42:47,658	[DEBUG]	
2020-12-18 09:42:47,659	[INFO]	32	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:42:47,659	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:42:47,659	[INFO]	33	SUCCESS	+4.0	
2020-12-18 09:42:47,660	[DEBUG]	
2020-12-18 09:42:50,805	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:42:50,806	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:42:50,808	[INFO]	35	SUCCESS	+4.0	
2020-12-18 09:42:50,809	[DEBUG]	
2020-12-18 09:42:53,908	[INFO]	36	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:42:53,910	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:42:53,910	[DEBUG]	
2020-12-18 09:42:53,912	[INFO]	38	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:42:53,912	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:57,058	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:42:57,059	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         ArrayList<Integer> row = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:57,062	[INFO]	40	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:42:57,063	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         ArrayList<Integer> row = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:57,895	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:42:58,823	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:42:58,825	[INFO]	43	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:42:58,827	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         ArrayList<Integer> row = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:59,715	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:42:59,717	[INFO]	45	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:42:59,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         ArrayList<Integer> row = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:59,720	[INFO]	46	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:42:59,721	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         ArrayList<Integer> row = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:59,722	[INFO]	47	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:42:59,722	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:42:59,724	[INFO]	48	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:42:59,724	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:00,613	[INFO]	49	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:43:00,614	[INFO]	50	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:43:00,615	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:00,616	[INFO]	51	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:43:00,616	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:00,617	[INFO]	52	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:43:00,617	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:01,478	[INFO]	53	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:43:02,422	[INFO]	54	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:43:02,425	[INFO]	55	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:43:02,426	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,428	[INFO]	56	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:43:02,429	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,431	[INFO]	57	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:43:02,432	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,434	[INFO]	58	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:43:02,435	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,437	[INFO]	59	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:43:02,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,441	[INFO]	60	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:43:02,442	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,445	[INFO]	61	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:43:02,448	[INFO]	62	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:02,450	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,455	[INFO]	63	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:43:02,456	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,459	[INFO]	64	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:43:02,462	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:02,466	[INFO]	65	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:43:02,467	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:03,381	[INFO]	66	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:43:03,386	[INFO]	67	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:43:03,387	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:03,391	[INFO]	68	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:43:03,393	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:03,397	[INFO]	69	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:43:03,398	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:03,401	[INFO]	70	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:43:03,404	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:03,409	[INFO]	71	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:43:03,411	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:06,625	[INFO]	72	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:43:06,626	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,628	[INFO]	73	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:43:06,629	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,630	[INFO]	74	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:43:06,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,632	[INFO]	75	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:43:06,632	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,634	[INFO]	76	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:43:06,634	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,635	[INFO]	77	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:43:06,636	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 16,21 ****
--- 16,23 ----
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
+ 
+         
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();

2020-12-18 09:43:06,637	[INFO]	78	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:43:06,638	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:06,640	[INFO]	79	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:43:06,641	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:06,642	[INFO]	80	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:43:06,642	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:09,675	[INFO]	81	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:09,676	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:43:09,678	[INFO]	82	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:09,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:43:12,753	[INFO]	83	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:12,757	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,41 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
  
          return rows;
      }
  }
--- 21,45 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 init.add(1);
              }
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:15,753	[INFO]	84	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:15,755	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,31 ****
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 38,45 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:15,756	[INFO]	85	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:15,757	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,31 ****
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 38,45 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:18,977	[INFO]	86	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:18,980	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:22,133	[INFO]	87	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:43:22,135	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,31 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:22,137	[INFO]	88	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:22,138	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,036	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:23,038	[INFO]	90	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:23,038	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:43:23,039	[INFO]	91	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:23,040	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,041	[INFO]	92	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:43:23,042	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,043	[INFO]	93	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:43:23,044	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,045	[INFO]	94	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:43:23,046	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,976	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:43:23,980	[INFO]	96	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:43:23,982	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
***************
*** 36,41 ****
--- 37,44 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:43:23,984	[INFO]	97	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:23,985	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:43:23,987	[INFO]	98	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:23,988	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:23,989	[INFO]	99	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:23,990	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:23,992	[INFO]	100	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:43:23,993	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:23,995	[INFO]	101	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:43:23,996	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:23,998	[INFO]	102	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:23,999	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:24,892	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:43:24,894	[INFO]	104	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:43:24,895	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:25,757	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:43:25,759	[INFO]	106	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:43:25,760	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:26,648	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:43:26,650	[INFO]	108	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:43:26,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:26,652	[INFO]	109	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:43:26,652	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:27,521	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:43:27,523	[INFO]	111	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:27,524	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,546	[INFO]	112	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:43:30,547	[INFO]	113	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:30,548	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,549	[INFO]	114	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:43:30,550	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,551	[INFO]	115	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:30,552	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,553	[INFO]	116	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:30,554	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,555	[INFO]	117	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:30,556	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,557	[INFO]	118	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:30,558	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,559	[INFO]	119	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:43:30,560	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,562	[INFO]	120	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:43:30,563	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,564	[INFO]	121	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:30,565	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,566	[INFO]	122	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:30,567	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,568	[INFO]	123	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:30,569	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,571	[INFO]	124	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:30,572	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:30,574	[INFO]	125	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:30,575	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:31,330	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:31,332	[INFO]	127	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:31,332	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:34,465	[INFO]	128	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:34,467	[INFO]	129	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:34,468	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:35,206	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:35,207	[INFO]	131	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:43:35,208	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:35,965	[INFO]	132	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:43:36,835	[INFO]	133	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:43:36,836	[INFO]	134	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:43:36,836	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:37,726	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:37,730	[INFO]	136	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:43:37,731	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:37,734	[INFO]	137	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:37,735	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:37,737	[INFO]	138	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:37,739	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:37,741	[INFO]	139	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:37,743	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,642	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:43:38,644	[INFO]	141	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:38,644	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,646	[INFO]	142	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:43:38,646	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,648	[INFO]	143	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:43:38,648	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,649	[INFO]	144	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:43:38,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,652	[INFO]	145	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:43:38,652	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:38,654	[INFO]	146	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:38,655	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:43:41,755	[INFO]	147	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:41,757	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:43:41,759	[INFO]	148	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:41,760	[DEBUG]	
2020-12-18 09:43:44,858	[INFO]	149	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:43:45,770	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:43:46,681	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:43:47,561	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:43:47,563	[INFO]	153	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:47,563	[DEBUG]	
2020-12-18 09:43:47,564	[INFO]	154	SUCCESS	+4.0	
2020-12-18 09:43:47,564	[DEBUG]	
2020-12-18 09:43:50,636	[INFO]	155	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:43:50,637	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 25,30 ****
--- 25,31 ----
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);

2020-12-18 09:43:50,638	[INFO]	156	SUCCESS	+4.0	
2020-12-18 09:43:50,638	[DEBUG]	
2020-12-18 09:43:53,703	[INFO]	157	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:43:53,704	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:43:53,705	[INFO]	158	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:43:53,706	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:43:53,706	[INFO]	159	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:43:53,707	[DEBUG]	
2020-12-18 09:43:53,707	[INFO]	160	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:43:53,708	[DEBUG]	
2020-12-18 09:43:54,606	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:43:55,529	[INFO]	162	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:43:55,533	[INFO]	163	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:43:55,534	[DEBUG]	
2020-12-18 09:43:55,535	[INFO]	164	SUCCESS	+4.0	
2020-12-18 09:43:55,536	[DEBUG]	
2020-12-18 09:43:58,689	[INFO]	165	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:43:58,690	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:43:58,692	[INFO]	166	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:43:58,692	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:43:58,694	[INFO]	167	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:43:58,694	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:01,722	[INFO]	168	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:44:01,723	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,31 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:01,724	[INFO]	169	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:44:01,725	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:01,726	[INFO]	170	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:44:01,726	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:04,781	[INFO]	171	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:44:05,532	[INFO]	172	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:44:05,537	[INFO]	173	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:44:05,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:08,603	[INFO]	174	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:08,604	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:08,606	[INFO]	175	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:44:08,606	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:08,607	[INFO]	176	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:44:08,608	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,31 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:08,609	[INFO]	177	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:44:08,609	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,31 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:08,610	[INFO]	178	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:44:08,611	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:11,672	[INFO]	179	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:44:11,674	[INFO]	180	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:44:14,723	[INFO]	181	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:44:14,724	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:44:14,725	[INFO]	182	SUCCESS	+4.0	
2020-12-18 09:44:14,725	[DEBUG]	
2020-12-18 09:44:14,726	[INFO]	183	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:44:14,726	[DEBUG]	
2020-12-18 09:44:15,590	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:44:16,469	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:44:17,232	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:44:18,113	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:44:19,053	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:44:22,118	[INFO]	189	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:44:22,119	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:44:22,998	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:44:22,999	[INFO]	191	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:44:22,999	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:44:23,886	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:44:23,887	[INFO]	193	SUCCESS	+4.0	
2020-12-18 09:44:23,887	[DEBUG]	
2020-12-18 09:44:23,888	[INFO]	194	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:23,889	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:23,889	[INFO]	195	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:44:23,890	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:23,890	[INFO]	196	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:23,891	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:23,892	[INFO]	197	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:44:23,892	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,773	[INFO]	198	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:44:24,774	[INFO]	199	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:44:24,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,775	[INFO]	200	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:44:24,776	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,777	[INFO]	201	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:44:24,777	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,778	[INFO]	202	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:44:24,778	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,779	[INFO]	203	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:24,779	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,780	[INFO]	204	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:24,781	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,781	[INFO]	205	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:44:24,782	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,783	[INFO]	206	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:44:24,783	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:24,784	[INFO]	207	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:44:24,784	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:44:27,919	[INFO]	208	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:44:28,797	[INFO]	209	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:44:29,679	[INFO]	210	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:44:29,680	[INFO]	211	SUCCESS	+4.0	
2020-12-18 09:44:29,680	[DEBUG]	
2020-12-18 09:44:32,850	[INFO]	212	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:44:32,850	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:44:33,713	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:44:33,714	[INFO]	214	SUCCESS	+4.0	
2020-12-18 09:44:33,714	[DEBUG]	
2020-12-18 09:44:34,621	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:44:37,697	[INFO]	216	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:44:37,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:37,699	[INFO]	217	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:44:37,700	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:40,794	[INFO]	218	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:44:40,796	[INFO]	219	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:44:40,796	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:40,797	[INFO]	220	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:44:40,797	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:44:40,798	[INFO]	221	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:44:40,799	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:40,799	[INFO]	222	SUCCESS	+4.0	
2020-12-18 09:44:40,800	[DEBUG]	
2020-12-18 09:44:41,673	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:44:44,746	[INFO]	224	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:44:44,747	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:44:44,748	[INFO]	225	SUCCESS	+4.0	
2020-12-18 09:44:44,748	[DEBUG]	
2020-12-18 09:44:47,791	[INFO]	226	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:44:47,792	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:44:47,793	[INFO]	227	SUCCESS	+4.0	
2020-12-18 09:44:47,793	[DEBUG]	
2020-12-18 09:44:50,938	[INFO]	228	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:44:50,938	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:44:50,939	[INFO]	229	SUCCESS	+4.0	
2020-12-18 09:44:50,940	[DEBUG]	
2020-12-18 09:44:53,942	[INFO]	230	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:44:53,942	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:44:53,943	[INFO]	231	SUCCESS	+4.0	
2020-12-18 09:44:53,943	[DEBUG]	
2020-12-18 09:44:54,836	[INFO]	232	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:44:57,962	[INFO]	233	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:44:57,963	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:44:58,825	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:44:58,826	[INFO]	235	SUCCESS	+4.0	
2020-12-18 09:44:58,827	[DEBUG]	
2020-12-18 09:44:59,700	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:45:00,626	[INFO]	237	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:45:03,747	[INFO]	238	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 09:45:03,748	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:45:04,641	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:45:04,643	[INFO]	240	SUCCESS	+4.0	
2020-12-18 09:45:04,644	[DEBUG]	
2020-12-18 09:45:05,534	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:45:06,479	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:45:06,484	[INFO]	243	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:45:06,485	[DEBUG]	
2020-12-18 09:45:07,385	[INFO]	244	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:45:07,386	[INFO]	245	SUCCESS	+4.0	
2020-12-18 09:45:07,387	[DEBUG]	
2020-12-18 09:45:10,462	[INFO]	246	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:45:11,344	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:45:12,245	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:45:12,247	[INFO]	249	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:45:12,247	[INFO]	250	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:45:12,248	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:45:12,248	[INFO]	251	SUCCESS	+4.0	
2020-12-18 09:45:12,249	[DEBUG]	
2020-12-18 09:45:13,166	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:45:16,309	[INFO]	253	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:45:16,310	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = 0;
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:45:19,376	[INFO]	254	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:45:19,377	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,33 ****
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
--- 24,34 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = 0;
                      upleft = 0;
                  }
                  if (c < r) {
!                     return rows;
                  } else {
                      upright = 0;
                  }

2020-12-18 09:45:22,562	[INFO]	255	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:45:22,564	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 13,22 ****
  public class PASCAL {
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
-         ArrayList<Integer> init = new ArrayList<Integer>();
-         init.add(1);
-         rows.add(init);
- 
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
--- 13,18 ----
***************
*** 35,40 ****
--- 31,59 ----
              }
              rows.add(row);
          }
+         ArrayList<Integer> init = new ArrayList<Integer>();
+         init.add(1);
+         rows.add(init);
+ 
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upright = 0;
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     return rows;
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
  
          return rows;
      }

2020-12-18 09:45:23,440	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:45:26,594	[INFO]	257	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:45:26,595	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 13,22 ****
  public class PASCAL {
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
-         ArrayList<Integer> init = new ArrayList<Integer>();
-         init.add(1);
-         rows.add(init);
- 
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
--- 13,18 ----
***************
*** 35,40 ****
--- 31,58 ----
              }
              rows.add(row);
          }
+         ArrayList<Integer> init = new ArrayList<Integer>();
+         init.add(1);
+         rows.add(init);
+ 
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     return rows;
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
  
          return rows;
      }

2020-12-18 09:45:29,642	[INFO]	258	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:45:29,643	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,33 ****
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
!                     return rows;
                  } else {
                      upright = 0;
                  }

2020-12-18 09:45:29,644	[INFO]	259	SUCCESS	+4.0	
2020-12-18 09:45:29,644	[DEBUG]	
2020-12-18 09:45:32,704	[INFO]	260	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:45:33,559	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:45:33,561	[INFO]	262	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:45:33,562	[DEBUG]	
2020-12-18 09:45:34,456	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:45:38,419	[INFO]	264	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:45:38,421	[INFO]	265	SUCCESS	+4.0	
2020-12-18 09:45:38,421	[DEBUG]	
2020-12-18 09:45:39,504	[INFO]	266	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:45:40,431	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:45:41,383	[INFO]	268	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:45:42,320	[INFO]	269	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:45:43,237	[INFO]	270	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:45:44,129	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:45:45,038	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:45:48,164	[INFO]	273	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:45:48,165	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:45:48,165	[INFO]	274	SUCCESS	+4.0	
2020-12-18 09:45:48,166	[DEBUG]	
2020-12-18 09:45:51,268	[INFO]	275	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:45:51,271	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upright = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:45:51,274	[INFO]	276	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:45:51,275	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upright = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:45:54,319	[INFO]	277	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:45:54,320	[INFO]	278	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:45:54,320	[DEBUG]	
2020-12-18 09:45:54,321	[INFO]	279	SUCCESS	+4.0	
2020-12-18 09:45:54,321	[DEBUG]	
2020-12-18 09:45:57,485	[INFO]	280	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:45:57,486	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:46:00,616	[INFO]	281	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:46:00,618	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 36,42 ----
                  }
                  row.add(upleft+upright);
              }
!             init.add(1);
          }
  
          return rows;

2020-12-18 09:46:01,483	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:46:04,513	[INFO]	283	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:46:04,513	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             init.add(1);
          }
  
          return rows;

2020-12-18 09:46:07,597	[INFO]	284	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:46:07,599	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             init.add(1);
          }
  
          return rows;

2020-12-18 09:46:08,489	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:46:11,567	[INFO]	286	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:46:11,568	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:46:12,454	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:46:13,236	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:46:13,239	[INFO]	289	SUCCESS	+4.0	
2020-12-18 09:46:13,240	[DEBUG]	
2020-12-18 09:46:13,243	[INFO]	290	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:46:13,243	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:46:14,093	[INFO]	291	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:46:14,094	[INFO]	292	SUCCESS	+4.0	
2020-12-18 09:46:14,094	[DEBUG]	
2020-12-18 09:46:17,205	[INFO]	293	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:46:18,092	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:46:18,970	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:46:19,880	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:46:20,773	[INFO]	297	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:46:21,570	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:46:24,602	[INFO]	299	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:46:25,621	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:46:26,521	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:46:27,428	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:46:28,344	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:46:31,489	[INFO]	304	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:46:31,489	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:46:34,652	[INFO]	305	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 09:46:34,653	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:46:37,751	[INFO]	306	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 09:46:37,752	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:46:38,609	[INFO]	307	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:46:39,516	[INFO]	308	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:46:39,517	[INFO]	309	SUCCESS	+4.0	
2020-12-18 09:46:39,518	[DEBUG]	
2020-12-18 09:46:40,305	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:46:41,278	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:46:41,280	[INFO]	312	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:46:44,405	[INFO]	313	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:46:44,406	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:46:47,442	[INFO]	314	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:46:47,443	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,30 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);

2020-12-18 09:46:48,336	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:46:51,367	[INFO]	316	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:46:51,368	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,36 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:46:52,271	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:46:53,203	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:46:54,114	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:46:57,200	[INFO]	320	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:46:57,201	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 09:46:58,115	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:46:58,116	[INFO]	322	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:46:58,116	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:46:58,117	[INFO]	323	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:46:58,118	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:46:58,118	[INFO]	324	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:46:58,119	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:47:01,220	[INFO]	325	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:47:01,221	[INFO]	326	SUCCESS	+4.0	
2020-12-18 09:47:01,221	[DEBUG]	
2020-12-18 09:47:02,103	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:47:03,005	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:47:03,009	[INFO]	329	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:47:03,009	[DEBUG]	
2020-12-18 09:47:06,098	[INFO]	330	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:47:06,099	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:47:07,006	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:47:07,008	[INFO]	332	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:47:07,008	[DEBUG]	
2020-12-18 09:47:07,886	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:47:07,887	[INFO]	334	SUCCESS	+4.0	
2020-12-18 09:47:07,887	[DEBUG]	
2020-12-18 09:47:11,000	[INFO]	335	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:47:11,868	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:47:12,784	[INFO]	337	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:47:13,679	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:47:16,729	[INFO]	339	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:47:17,608	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:47:18,363	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:47:19,307	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:47:22,442	[INFO]	343	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:47:22,444	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:47:22,447	[INFO]	344	SUCCESS	+4.0	
2020-12-18 09:47:22,448	[DEBUG]	
2020-12-18 09:47:22,450	[INFO]	345	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:47:22,451	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:47:22,453	[INFO]	346	SUCCESS	+4.0	
2020-12-18 09:47:22,453	[DEBUG]	
2020-12-18 09:47:22,455	[INFO]	347	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:47:22,455	[DEBUG]	
2020-12-18 09:47:22,457	[INFO]	348	SUCCESS	+4.0	
2020-12-18 09:47:22,457	[DEBUG]	
2020-12-18 09:47:23,340	[INFO]	349	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:47:24,223	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:47:25,153	[INFO]	351	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:47:28,199	[INFO]	352	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:47:29,146	[INFO]	353	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:47:32,240	[INFO]	354	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:47:32,241	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:47:35,428	[INFO]	355	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:47:38,591	[INFO]	356	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:47:38,592	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:41,687	[INFO]	357	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:47:41,688	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
!                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:41,689	[INFO]	358	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:47:41,690	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:42,589	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:47:45,702	[INFO]	360	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:47:46,427	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:47:49,555	[INFO]	362	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:47:49,556	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,37 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:49,558	[INFO]	363	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:47:49,558	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,37 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:49,559	[INFO]	364	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:47:49,560	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,37 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:49,561	[INFO]	365	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:47:49,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,37 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:47:50,422	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:47:53,495	[INFO]	367	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:47:54,368	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:47:57,510	[INFO]	369	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:47:57,511	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:48:00,536	[INFO]	370	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:48:00,536	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:48:00,538	[INFO]	371	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:48:00,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:48:01,280	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:48:04,377	[INFO]	373	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:48:05,114	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:48:08,170	[INFO]	375	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:48:08,172	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:48:11,301	[INFO]	376	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 09:48:11,302	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 09:48:12,184	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:48:15,362	[INFO]	378	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 09:48:15,363	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:48:15,363	[INFO]	379	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 09:48:15,364	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:48:15,364	[INFO]	380	SUCCESS	+4.0	
2020-12-18 09:48:15,365	[DEBUG]	
2020-12-18 09:48:16,246	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:48:17,157	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:48:20,188	[INFO]	383	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:48:20,189	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:48:20,190	[INFO]	384	SUCCESS	+4.0	
2020-12-18 09:48:20,190	[DEBUG]	
2020-12-18 09:48:23,263	[INFO]	385	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:48:23,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 09:48:23,264	[INFO]	386	SUCCESS	+4.0	
2020-12-18 09:48:23,265	[DEBUG]	
2020-12-18 09:48:26,338	[INFO]	387	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:48:26,340	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 09:48:27,243	[INFO]	388	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:48:30,353	[INFO]	389	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:48:30,354	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:48:30,355	[INFO]	390	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:48:30,355	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 09:48:30,356	[INFO]	391	SUCCESS	+4.0	
2020-12-18 09:48:30,356	[DEBUG]	
2020-12-18 09:48:31,238	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:48:34,364	[INFO]	393	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:48:35,145	[INFO]	394	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:48:38,228	[INFO]	395	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:48:38,230	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             init.add(1);
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 09:48:38,233	[INFO]	396	SUCCESS	+4.0	
2020-12-18 09:48:38,234	[DEBUG]	
2020-12-18 09:48:41,335	[INFO]	397	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:48:44,411	[INFO]	398	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:48:44,411	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:48:44,412	[INFO]	399	SUCCESS	+4.0	
2020-12-18 09:48:44,412	[DEBUG]	
2020-12-18 09:48:45,288	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:48:46,035	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:48:46,909	[INFO]	402	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:48:47,839	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:48:48,758	[INFO]	404	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:48:49,639	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:48:49,640	[INFO]	406	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:48:49,640	[DEBUG]	
2020-12-18 09:48:50,408	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:48:50,409	[INFO]	408	SUCCESS	+4.0	
2020-12-18 09:48:50,409	[DEBUG]	
2020-12-18 09:48:51,309	[INFO]	409	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:48:51,310	[INFO]	410	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:48:51,311	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:48:52,215	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:48:52,986	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:48:56,027	[INFO]	413	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:48:56,029	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:48:59,076	[INFO]	414	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:48:59,077	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:48:59,079	[INFO]	415	SUCCESS	+4.0	
2020-12-18 09:48:59,080	[DEBUG]	
2020-12-18 09:48:59,990	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:49:00,903	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:49:04,063	[INFO]	418	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:49:04,066	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 09:49:04,914	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:49:04,915	[INFO]	420	SUCCESS	+4.0	
2020-12-18 09:49:04,916	[DEBUG]	
2020-12-18 09:49:08,007	[INFO]	421	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:49:08,008	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:49:08,008	[INFO]	422	SUCCESS	+4.0	
2020-12-18 09:49:08,009	[DEBUG]	
2020-12-18 09:49:08,009	[INFO]	423	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:49:08,911	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:49:08,912	[INFO]	425	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:49:09,846	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:49:10,754	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:49:13,835	[INFO]	428	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:49:13,836	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:13,838	[INFO]	429	SUCCESS	+4.0	
2020-12-18 09:49:13,838	[DEBUG]	
2020-12-18 09:49:14,698	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:49:14,700	[INFO]	431	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:49:14,700	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:49:14,701	[INFO]	432	SUCCESS	+4.0	
2020-12-18 09:49:14,701	[DEBUG]	
2020-12-18 09:49:15,595	[INFO]	433	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:49:16,546	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:49:17,481	[INFO]	435	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:49:17,483	[INFO]	436	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:49:17,483	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:49:20,560	[INFO]	437	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:49:20,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:49:21,457	[INFO]	438	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:49:24,574	[INFO]	439	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:49:24,575	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:49:24,575	[INFO]	440	SUCCESS	+4.0	
2020-12-18 09:49:24,575	[DEBUG]	
2020-12-18 09:49:27,673	[INFO]	441	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:49:27,675	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:49:27,677	[INFO]	442	SUCCESS	+4.0	
2020-12-18 09:49:27,677	[DEBUG]	
2020-12-18 09:49:28,540	[INFO]	443	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:49:29,436	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:49:29,437	[INFO]	445	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:49:29,437	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:49:29,438	[INFO]	446	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:49:29,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:49:30,348	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:49:30,349	[INFO]	448	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:49:30,350	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 09:49:30,350	[INFO]	449	SUCCESS	+4.0	
2020-12-18 09:49:30,350	[DEBUG]	
2020-12-18 09:49:31,233	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:49:34,359	[INFO]	451	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:49:34,360	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     init.add(1);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:49:37,417	[INFO]	452	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:49:37,420	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:38,315	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:49:39,198	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:49:42,312	[INFO]	455	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:49:43,205	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:49:44,110	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:49:45,000	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:49:45,001	[INFO]	459	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:49:45,002	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:45,003	[INFO]	460	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:49:45,004	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:45,896	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:49:45,899	[INFO]	462	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:49:45,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:45,901	[INFO]	463	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:49:45,902	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:46,839	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:49:47,779	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:49:47,784	[INFO]	466	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:49:47,786	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:47,789	[INFO]	467	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:49:47,791	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:47,795	[INFO]	468	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:49:47,797	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:47,801	[INFO]	469	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:49:47,803	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:47,808	[INFO]	470	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:49:47,810	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:47,816	[INFO]	471	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:49:47,818	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:48,673	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:49:48,675	[INFO]	473	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:49:48,676	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:48,678	[INFO]	474	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:49:48,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:48,680	[INFO]	475	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:49:48,681	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:48,682	[INFO]	476	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:49:48,683	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:49,576	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:49:50,474	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:49:51,381	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:49:54,437	[INFO]	480	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:49:54,438	[INFO]	481	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:49:54,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 09:49:57,520	[INFO]	482	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:49:57,521	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
!             
          }
  
          return rows;

2020-12-18 09:49:57,522	[INFO]	483	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:49:57,522	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(init);
!             
          }
  
          return rows;

2020-12-18 09:49:58,377	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:49:58,380	[INFO]	485	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:49:58,382	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,384	[INFO]	486	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:49:58,385	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,386	[INFO]	487	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:49:58,387	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,389	[INFO]	488	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:49:58,389	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,391	[INFO]	489	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:49:58,391	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,393	[INFO]	490	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:49:58,394	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,395	[INFO]	491	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:49:58,395	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,396	[INFO]	492	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:49:58,397	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:58,398	[INFO]	493	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:49:58,399	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:59,273	[INFO]	494	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:49:59,275	[INFO]	495	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:49:59,276	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:49:59,277	[INFO]	496	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:49:59,278	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:50:02,363	[INFO]	497	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:50:02,364	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:50:03,281	[INFO]	498	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:50:06,455	[INFO]	499	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:50:06,456	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:50:06,457	[INFO]	500	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:50:06,457	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 09:50:06,457	[INFO]	==== END ====
2020-12-18 09:50:06,457	[INFO]	Reason: step budget
2020-12-18 09:50:06,458	[INFO]	
2020-12-18 09:50:06,458	[INFO]	========== EPOCH 3 ==========
2020-12-18 09:50:06,458	[INFO]	==== WARMUP ====
2020-12-18 09:50:09,493	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:50:09,494	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:50:12,538	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:50:12,538	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:50:15,631	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 09:50:15,632	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:50:18,720	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 09:50:18,720	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 09:50:18,720	[INFO]	==== START ====
2020-12-18 09:50:21,763	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:50:21,764	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:50:22,656	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:50:23,559	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:50:26,650	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:50:26,651	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,29 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 21,30 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(row);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:50:26,651	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:50:26,652	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:50:27,514	[INFO]	6	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:50:30,615	[INFO]	7	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:50:30,616	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:50:31,507	[INFO]	8	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:50:34,653	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:50:34,655	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,31 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:50:34,656	[INFO]	10	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:50:34,657	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:50:34,658	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 09:50:34,659	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:50:34,660	[INFO]	12	SUCCESS	+4.0	
2020-12-18 09:50:34,660	[DEBUG]	
2020-12-18 09:50:38,065	[INFO]	13	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:50:38,066	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 09:50:41,160	[INFO]	14	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:50:42,082	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:50:42,083	[INFO]	16	SUCCESS	+4.0	
2020-12-18 09:50:42,084	[DEBUG]	
2020-12-18 09:50:42,971	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:50:43,910	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:50:44,694	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:50:45,588	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:50:46,451	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:50:47,378	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:50:50,501	[INFO]	23	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:50:53,591	[INFO]	24	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:50:53,593	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 09:50:53,595	[INFO]	25	SUCCESS	+4.0	
2020-12-18 09:50:53,595	[DEBUG]	
2020-12-18 09:50:56,715	[INFO]	26	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:50:56,716	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 09:50:56,717	[INFO]	27	SUCCESS	+4.0	
2020-12-18 09:50:56,717	[DEBUG]	
2020-12-18 09:50:57,613	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:50:58,537	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:50:59,438	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:51:00,341	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:51:00,343	[INFO]	32	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:51:00,343	[DEBUG]	
2020-12-18 09:51:00,344	[INFO]	33	SUCCESS	+4.0	
2020-12-18 09:51:00,344	[DEBUG]	
2020-12-18 09:51:03,439	[INFO]	34	SUCCESS	*3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:51:03,440	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:03,441	[INFO]	35	SUCCESS	 4.0	
2020-12-18 09:51:06,531	[INFO]	36	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:51:09,612	[INFO]	37	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:51:12,774	[INFO]	38	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:51:12,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:51:12,776	[INFO]	39	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:51:12,776	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:13,685	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:51:16,744	[INFO]	41	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:51:19,738	[INFO]	42	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:51:19,740	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:51:20,691	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:51:21,624	[INFO]	44	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:51:22,531	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:51:22,533	[INFO]	46	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:51:22,533	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:22,534	[INFO]	47	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:51:22,534	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:23,461	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:51:23,462	[INFO]	49	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:23,463	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:23,464	[INFO]	50	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:23,464	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:26,570	[INFO]	51	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:51:26,571	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:51:27,487	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:51:28,237	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:29,124	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:51:29,126	[INFO]	55	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:51:29,126	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:51:32,467	[INFO]	56	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:51:32,470	[INFO]	57	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:51:32,471	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:33,353	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:51:36,450	[INFO]	59	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:51:37,368	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:51:38,293	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:51:38,295	[INFO]	62	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:51:38,295	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:51:38,296	[INFO]	63	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:51:38,297	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:39,081	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:51:40,024	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:51:40,025	[INFO]	66	SUCCESS	 4.0	
2020-12-18 09:51:41,027	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:51:41,980	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:51:45,232	[INFO]	69	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:51:45,233	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,44 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = 0;
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:51:48,336	[INFO]	70	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:51:49,234	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:51:52,356	[INFO]	72	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:51:52,358	[INFO]	73	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:52,358	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,44 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = 0;
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:51:52,359	[INFO]	74	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:52,360	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:51:55,394	[INFO]	75	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:51:56,278	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:51:59,314	[INFO]	77	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:51:59,317	[INFO]	78	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:51:59,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:52:00,218	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:52:03,309	[INFO]	80	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:52:03,311	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:52:04,229	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:52:05,160	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:52:06,081	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:52:09,260	[INFO]	84	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:52:12,302	[INFO]	85	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:52:13,202	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:52:14,101	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:52:14,103	[INFO]	88	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:52:14,103	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:52:14,862	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:52:14,866	[INFO]	90	SUCCESS	 4.0	
2020-12-18 09:52:14,871	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:52:17,955	[INFO]	92	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:52:18,724	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:52:21,795	[INFO]	94	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:52:24,919	[INFO]	95	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:52:27,925	[INFO]	96	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:52:27,926	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,44 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = rows.get(r-1).get(c);
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:52:31,066	[INFO]	97	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:52:34,197	[INFO]	98	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:52:34,199	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,45 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = rows.get(r-1).get(c);
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upleft = 0;
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 09:52:37,263	[INFO]	99	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:52:37,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,49 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = 0;
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 09:52:40,370	[INFO]	100	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:52:40,372	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upleft = 0;
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:52:43,551	[INFO]	101	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:52:46,565	[INFO]	102	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:52:46,566	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:52:47,458	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:52:47,460	[INFO]	104	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:52:47,461	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:52:48,380	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:52:51,548	[INFO]	106	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:52:51,550	[INFO]	107	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:52:51,551	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:52:52,409	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:52:52,410	[INFO]	109	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:52:52,411	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:52:53,353	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:52:56,494	[INFO]	111	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:52:56,495	[INFO]	112	SUCCESS	 4.0	
2020-12-18 09:52:59,528	[INFO]	113	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:53:00,414	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:53:01,328	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:53:01,330	[INFO]	116	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:53:01,331	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:01,332	[INFO]	117	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:01,332	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:01,333	[INFO]	118	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:53:01,334	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:53:04,511	[INFO]	119	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:53:07,601	[INFO]	120	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:53:07,606	[INFO]	121	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:53:07,608	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:53:10,661	[INFO]	122	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:53:10,663	[INFO]	123	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:53:10,664	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:10,665	[INFO]	124	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:10,666	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:10,667	[INFO]	125	SUCCESS	 4.0	
2020-12-18 09:53:13,738	[INFO]	126	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:53:16,769	[INFO]	127	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:53:17,696	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:53:18,474	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:53:19,359	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:53:20,131	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:53:21,064	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:53:21,066	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:53:24,126	[INFO]	134	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:53:24,127	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:53:24,129	[INFO]	135	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:53:24,130	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:53:24,131	[INFO]	136	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:53:24,132	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:53:27,166	[INFO]	137	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:53:27,167	[INFO]	138	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:27,168	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:27,168	[INFO]	139	SUCCESS	 4.0	
2020-12-18 09:53:30,230	[INFO]	140	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:53:30,231	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,41 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upleft = 0;
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:53:33,353	[INFO]	141	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:53:33,354	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = 0;
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:53:33,355	[INFO]	142	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:53:33,355	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,41 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upleft = 0;
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:53:36,464	[INFO]	143	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:53:36,466	[INFO]	144	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:36,467	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:36,468	[INFO]	145	SUCCESS	 4.0	
2020-12-18 09:53:37,380	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:53:38,303	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:53:39,206	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:53:42,258	[INFO]	149	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:53:43,194	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:53:46,283	[INFO]	151	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:53:46,284	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:53:46,285	[INFO]	152	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:46,286	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:49,313	[INFO]	153	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:53:50,233	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:53:50,234	[INFO]	155	SUCCESS	 4.0	
2020-12-18 09:53:50,237	[INFO]	156	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:53:50,238	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:51,197	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:53:51,200	[INFO]	158	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:53:51,201	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:54,336	[INFO]	159	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:53:54,337	[INFO]	160	SUCCESS	 4.0	
2020-12-18 09:53:55,249	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:53:55,255	[INFO]	162	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:53:56,157	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:53:56,159	[INFO]	164	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:53:56,159	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:53:57,060	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:54:00,101	[INFO]	166	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:54:00,103	[INFO]	167	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:54:00,103	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:00,104	[INFO]	168	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:54:00,105	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:00,106	[INFO]	169	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:00,106	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:00,107	[INFO]	170	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:54:00,107	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 09:54:00,108	[INFO]	171	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:00,109	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:03,215	[INFO]	172	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:54:03,216	[INFO]	173	SUCCESS	 4.0	
2020-12-18 09:54:04,083	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:54:07,166	[INFO]	175	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:54:10,258	[INFO]	176	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:54:13,290	[INFO]	177	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:54:13,291	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,47 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upright = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 09:54:16,336	[INFO]	178	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:54:19,434	[INFO]	179	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:54:22,463	[INFO]	180	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 09:54:25,615	[INFO]	181	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:54:26,541	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:54:27,507	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:30,656	[INFO]	184	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 09:54:30,657	[INFO]	185	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:30,657	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:30,658	[INFO]	186	SUCCESS	 4.0	
2020-12-18 09:54:31,552	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:54:32,491	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:54:33,375	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:54:34,297	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:54:34,300	[INFO]	191	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:54:34,301	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:34,302	[INFO]	192	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:54:34,304	[INFO]	193	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:34,304	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:37,446	[INFO]	194	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 09:54:37,447	[INFO]	195	SUCCESS	 4.0	
2020-12-18 09:54:38,352	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:54:39,274	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:54:40,219	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:54:43,328	[INFO]	199	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:54:43,329	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:54:43,330	[INFO]	200	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:54:43,331	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:54:43,332	[INFO]	201	SUCCESS	 4.0	
2020-12-18 09:54:44,220	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:54:45,140	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:54:46,044	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 09:54:46,834	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:54:47,728	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:54:50,912	[INFO]	207	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:55:06,217	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:55:09,515	[INFO]	209	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:55:10,255	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:55:11,112	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:55:11,114	[INFO]	212	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:55:11,114	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:55:12,030	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:55:12,032	[INFO]	214	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:55:12,032	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:55:12,033	[INFO]	215	SUCCESS	 4.0	
2020-12-18 09:55:12,034	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:55:15,165	[INFO]	217	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:55:18,222	[INFO]	218	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:55:18,223	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:55:21,225	[INFO]	219	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:55:24,342	[INFO]	220	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:55:25,230	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:55:25,232	[INFO]	222	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:55:25,233	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:55:25,235	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:55:25,235	[INFO]	224	SUCCESS	 4.0	
2020-12-18 09:55:26,151	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:55:27,072	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:55:30,226	[INFO]	227	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 09:55:31,170	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:55:34,311	[INFO]	229	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 09:55:38,077	[INFO]	230	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:38,078	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:42,023	[INFO]	231	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:42,025	[INFO]	232	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:55:42,025	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:55:42,926	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:55:44,056	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:55:45,130	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:55:46,298	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:55:49,508	[INFO]	237	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:55:49,509	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 09:55:52,556	[INFO]	238	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 09:55:52,557	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     rows.add(init);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:52,558	[INFO]	239	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:52,559	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:53,476	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:55:53,478	[INFO]	241	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:55:53,479	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:53,480	[INFO]	242	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:53,481	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:53,482	[INFO]	243	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:53,483	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:53,485	[INFO]	244	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:55:53,485	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c != 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:55:53,487	[INFO]	245	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:55:53,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:55:53,488	[INFO]	246	SUCCESS	 4.0	
2020-12-18 09:55:53,490	[INFO]	247	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:55:53,491	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:55:54,408	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:55:57,524	[INFO]	249	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:55:57,525	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:55:57,526	[INFO]	250	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:55:57,526	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:56:12,921	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:56:12,922	[INFO]	252	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:56:16,037	[INFO]	253	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:56:16,039	[INFO]	254	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:56:16,039	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:56:19,138	[INFO]	255	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:56:19,139	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:56:19,140	[INFO]	256	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:56:19,140	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:56:20,033	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:56:20,798	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:56:21,729	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:56:21,731	[INFO]	260	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:56:21,731	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:56:24,815	[INFO]	261	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:56:27,894	[INFO]	262	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:56:30,973	[INFO]	263	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:56:30,974	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:31,884	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:56:31,886	[INFO]	265	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:56:31,887	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:32,848	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:56:32,854	[INFO]	267	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:56:32,856	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:32,859	[INFO]	268	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:56:32,861	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:33,758	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:56:33,759	[INFO]	270	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 09:56:33,760	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:33,761	[INFO]	271	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:56:33,762	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,42 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:34,671	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:56:35,431	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:56:38,584	[INFO]	274	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:56:38,585	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 51,58 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:41,759	[INFO]	275	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:56:41,761	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,42 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 54,61 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:41,762	[INFO]	276	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:56:41,763	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,42 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 54,61 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:44,795	[INFO]	277	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:56:47,906	[INFO]	278	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:56:47,907	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,41 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 53,60 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:47,909	[INFO]	279	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:47,909	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,41 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 53,60 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:47,911	[INFO]	280	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:56:47,911	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,41 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 53,60 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:47,913	[INFO]	281	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:47,913	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,41 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 53,60 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:48,804	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:51,823	[INFO]	283	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:51,824	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 50,57 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 09:56:52,758	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:52,759	[INFO]	285	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:56:52,760	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:56:52,761	[INFO]	286	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:56:52,761	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 09:56:55,809	[INFO]	287	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:56:55,810	[INFO]	288	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:56:55,811	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:56:55,812	[INFO]	289	SUCCESS	 4.0	
2020-12-18 09:56:56,715	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:56:57,637	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:56:58,553	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:56:59,316	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:57:00,205	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:57:00,967	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:57:01,853	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:57:04,980	[INFO]	297	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 09:57:05,836	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 09:57:08,969	[INFO]	299	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:57:08,971	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:08,973	[INFO]	300	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:57:08,974	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:12,092	[INFO]	301	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:57:15,127	[INFO]	302	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 09:57:15,128	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:15,129	[INFO]	303	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:57:15,130	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:15,131	[INFO]	304	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:15,132	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:15,133	[INFO]	305	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:15,134	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:18,251	[INFO]	306	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:57:18,253	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:18,255	[INFO]	307	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:57:18,256	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:18,258	[INFO]	308	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:57:18,260	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:18,262	[INFO]	309	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:57:18,263	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:19,153	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:57:19,155	[INFO]	311	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:19,156	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:19,157	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:19,158	[INFO]	313	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:19,159	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:22,253	[INFO]	314	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:22,255	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:22,256	[INFO]	315	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 09:57:22,257	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:22,258	[INFO]	316	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:57:22,259	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:22,260	[INFO]	317	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:57:22,261	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:22,262	[INFO]	318	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:57:22,263	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:23,179	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:57:24,101	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:57:27,203	[INFO]	321	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:27,204	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:27,206	[INFO]	322	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:27,207	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:27,209	[INFO]	323	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:27,210	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:30,335	[INFO]	324	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:57:30,339	[INFO]	325	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:57:30,341	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:31,242	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:57:31,245	[INFO]	327	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:31,246	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:31,249	[INFO]	328	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:57:31,250	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:31,252	[INFO]	329	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:57:31,253	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:31,254	[INFO]	330	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:57:31,255	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:31,256	[INFO]	331	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 09:57:31,257	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:32,210	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:57:32,212	[INFO]	333	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:32,213	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:35,317	[INFO]	334	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 09:57:35,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:35,319	[INFO]	335	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 09:57:35,320	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:57:35,321	[INFO]	336	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:57:35,321	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:57:36,078	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:57:36,081	[INFO]	338	SUCCESS	 4.0	
2020-12-18 09:57:36,828	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:57:40,022	[INFO]	340	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:57:40,023	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 09:57:40,024	[INFO]	341	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:57:40,024	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 09:57:40,954	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:57:41,831	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:57:57,360	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 09:58:00,565	[INFO]	345	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 09:58:03,650	[INFO]	346	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:58:04,533	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 09:58:04,535	[INFO]	348	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 09:58:07,629	[INFO]	349	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 09:58:07,631	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 50,57 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 09:58:08,540	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:58:08,544	[INFO]	351	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:58:08,545	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 50,57 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 09:58:08,547	[INFO]	352	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:58:08,548	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 09:58:08,549	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 09:58:09,441	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:58:09,443	[INFO]	355	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 09:58:09,444	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 09:58:09,445	[INFO]	356	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 09:58:09,445	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,40 ****
--- 33,56 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
+ 
+         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 09:58:12,503	[INFO]	357	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:58:12,506	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 50,57 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 09:58:15,567	[INFO]	358	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:58:15,569	[INFO]	359	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:58:15,569	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 36,41 ****
--- 50,57 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 09:58:18,654	[INFO]	360	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:58:21,657	[INFO]	361	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:58:21,658	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:24,751	[INFO]	362	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 09:58:24,753	[INFO]	363	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:58:24,754	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:27,919	[INFO]	364	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:58:27,920	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:32,362	[INFO]	365	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 09:58:33,532	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:58:37,027	[INFO]	367	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:58:37,028	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,42 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:40,147	[INFO]	368	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:58:43,327	[INFO]	369	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 09:58:43,329	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,41 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:43,331	[INFO]	370	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 09:58:43,332	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 09:58:46,482	[INFO]	371	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:58:46,483	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:58:46,484	[INFO]	372	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:58:46,485	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:58:47,400	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:58:47,401	[INFO]	374	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:58:47,402	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:58:50,567	[INFO]	375	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:58:50,568	[INFO]	376	SUCCESS	 4.0	
2020-12-18 09:58:51,435	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:58:54,500	[INFO]	378	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:58:55,381	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:58:56,299	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:58:56,301	[INFO]	381	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:58:56,302	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:58:56,302	[INFO]	382	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 09:58:57,199	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:58:57,200	[INFO]	384	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:58:57,201	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:58:57,201	[INFO]	385	SUCCESS	 4.0	
2020-12-18 09:58:57,202	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:58:58,121	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:59:01,246	[INFO]	388	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:59:01,249	[INFO]	389	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:59:01,250	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:02,136	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 09:59:02,909	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:59:02,911	[INFO]	392	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:59:02,911	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:02,912	[INFO]	393	SUCCESS	 4.0	
2020-12-18 09:59:03,804	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 09:59:04,723	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:59:05,644	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 09:59:05,646	[INFO]	397	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:59:05,646	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:05,647	[INFO]	398	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:59:05,648	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:05,648	[INFO]	399	SUCCESS	 4.0	
2020-12-18 09:59:06,575	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 09:59:07,475	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 09:59:08,391	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:59:11,498	[INFO]	403	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:59:11,500	[INFO]	404	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:59:14,544	[INFO]	405	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:59:14,545	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = 0;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 09:59:17,599	[INFO]	406	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:59:18,507	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:59:19,430	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 09:59:19,432	[INFO]	409	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:59:19,432	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:22,563	[INFO]	410	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:59:23,478	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:59:24,385	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:59:24,386	[INFO]	413	SUCCESS	 4.0	
2020-12-18 09:59:25,292	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 09:59:26,221	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 09:59:27,160	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 09:59:30,272	[INFO]	417	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:59:31,167	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 09:59:34,281	[INFO]	419	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:59:35,198	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:59:38,248	[INFO]	421	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:59:38,251	[INFO]	422	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:59:38,252	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:39,012	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 09:59:39,016	[INFO]	424	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:59:42,079	[INFO]	425	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 09:59:42,080	[INFO]	426	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 09:59:42,081	[INFO]	427	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:59:42,081	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:42,082	[INFO]	428	SUCCESS	 4.0	
2020-12-18 09:59:42,083	[INFO]	429	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:59:42,084	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:42,084	[INFO]	430	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 09:59:42,085	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:42,086	[INFO]	431	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 09:59:42,086	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:42,088	[INFO]	432	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 09:59:42,089	[INFO]	433	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 09:59:42,089	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:42,090	[INFO]	434	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 09:59:45,236	[INFO]	435	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 09:59:45,238	[INFO]	436	SUCCESS	 4.0	
2020-12-18 09:59:45,977	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 09:59:46,870	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:59:47,773	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 09:59:48,709	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 09:59:51,844	[INFO]	441	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 09:59:51,848	[INFO]	442	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 09:59:54,998	[INFO]	443	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 09:59:55,000	[INFO]	444	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:59:55,001	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 09:59:55,003	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 09:59:55,882	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 09:59:56,846	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 09:59:56,847	[INFO]	448	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 09:59:57,589	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 09:59:57,591	[INFO]	450	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:00:00,669	[INFO]	451	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:00:03,767	[INFO]	452	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:00:03,768	[INFO]	453	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:00:03,769	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:04,647	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:00:05,544	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:00:06,502	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:00:06,504	[INFO]	457	SUCCESS	 4.0	
2020-12-18 10:00:09,649	[INFO]	458	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:00:10,522	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:00:11,419	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:00:14,590	[INFO]	461	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:00:17,658	[INFO]	462	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:00:18,580	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:00:19,559	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:00:20,466	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:00:23,528	[INFO]	466	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:00:24,442	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:00:24,443	[INFO]	468	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:00:39,897	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:00:40,713	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:00:43,819	[INFO]	471	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:00:43,820	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,53 ----
                  } else {
                      upright = 0;
                  }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:00:43,821	[INFO]	472	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:00:43,821	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:43,822	[INFO]	473	SUCCESS	 4.0	
2020-12-18 10:00:43,824	[INFO]	474	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:00:43,824	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:43,825	[INFO]	475	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:43,826	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:44,752	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:00:45,688	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:00:45,690	[INFO]	478	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:45,690	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:45,691	[INFO]	479	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:45,692	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:48,865	[INFO]	480	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:00:48,866	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:00:52,056	[INFO]	482	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:55,134	[INFO]	483	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:00:55,137	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:00:56,054	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:00:56,056	[INFO]	485	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:56,056	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:56,945	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:00:56,947	[INFO]	487	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:57,901	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:00:57,906	[INFO]	489	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:00:57,908	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:57,912	[INFO]	490	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:00:57,913	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:00:58,814	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:00:59,738	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:00:59,739	[INFO]	493	SUCCESS	 4.0	
2020-12-18 10:01:00,635	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:01:01,528	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:01:04,687	[INFO]	496	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:01:04,688	[INFO]	497	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:01:07,762	[INFO]	498	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:01:08,627	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:01:11,750	[INFO]	500	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:01:11,751	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:01:11,752	[INFO]	==== END ====
2020-12-18 10:01:11,752	[INFO]	Reason: step budget
2020-12-18 10:01:11,752	[INFO]	
2020-12-18 10:01:11,753	[INFO]	========== EPOCH 4 ==========
2020-12-18 10:01:11,753	[INFO]	==== WARMUP ====
2020-12-18 10:01:14,763	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:01:14,763	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:01:17,789	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:01:17,789	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:01:20,859	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:01:20,860	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:01:23,867	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:01:23,867	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:01:23,867	[INFO]	==== START ====
2020-12-18 10:01:24,641	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:01:27,707	[INFO]	2	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:01:30,878	[INFO]	3	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:01:30,879	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:01:31,739	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:01:31,740	[INFO]	5	SUCCESS	+4.0	
2020-12-18 10:01:31,740	[DEBUG]	
2020-12-18 10:01:32,741	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:01:35,806	[INFO]	7	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:01:35,807	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:01:35,808	[INFO]	8	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:01:35,808	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:01:35,809	[INFO]	9	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:01:35,809	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:01:35,810	[INFO]	10	SUCCESS	+4.0	
2020-12-18 10:01:35,810	[DEBUG]	
2020-12-18 10:01:36,706	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:01:37,627	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:01:38,537	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:01:39,442	[INFO]	14	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:01:40,418	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:01:41,413	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:01:42,360	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:01:45,566	[INFO]	18	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:01:46,442	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:01:49,493	[INFO]	20	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:01:49,494	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:01:50,394	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:01:50,395	[INFO]	22	SUCCESS	+4.0	
2020-12-18 10:01:50,395	[DEBUG]	
2020-12-18 10:01:51,297	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:01:52,204	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:01:53,114	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:01:56,215	[INFO]	26	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:01:56,216	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     rows.add(init);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:01:56,217	[INFO]	27	SUCCESS	+4.0	
2020-12-18 10:01:56,217	[DEBUG]	
2020-12-18 10:01:56,218	[INFO]	28	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:01:56,218	[DEBUG]	
2020-12-18 10:01:59,417	[INFO]	29	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:01:59,417	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             return rows;
          }
  
          return rows;

2020-12-18 10:01:59,418	[INFO]	30	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:01:59,418	[DEBUG]	
2020-12-18 10:01:59,419	[INFO]	31	SUCCESS	+4.0	
2020-12-18 10:01:59,419	[DEBUG]	
2020-12-18 10:01:59,420	[INFO]	32	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:01:59,420	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:02:00,270	[INFO]	33	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:02:03,302	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:02:03,303	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:03,304	[INFO]	35	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:02:03,304	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:03,305	[INFO]	36	SUCCESS	+4.0	
2020-12-18 10:02:03,305	[DEBUG]	
2020-12-18 10:02:06,409	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:02:06,410	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:02:07,337	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:02:10,565	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:02:10,567	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:02:11,527	[INFO]	40	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:02:14,837	[INFO]	41	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:02:14,838	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:02:14,839	[INFO]	42	SUCCESS	+4.0	
2020-12-18 10:02:14,839	[DEBUG]	
2020-12-18 10:02:15,752	[INFO]	43	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:02:16,681	[INFO]	44	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:02:17,627	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:02:17,629	[INFO]	46	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:02:17,629	[DEBUG]	
2020-12-18 10:02:17,630	[INFO]	47	SUCCESS	+4.0	
2020-12-18 10:02:17,630	[DEBUG]	
2020-12-18 10:02:18,602	[INFO]	48	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:02:21,724	[INFO]	49	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:02:21,726	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,30 ****
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     return rows;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);

2020-12-18 10:02:21,727	[INFO]	50	SUCCESS	+4.0	
2020-12-18 10:02:21,728	[DEBUG]	
2020-12-18 10:02:21,729	[INFO]	51	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:02:21,730	[DEBUG]	
2020-12-18 10:02:21,731	[INFO]	52	SUCCESS	+4.0	
2020-12-18 10:02:21,732	[DEBUG]	
2020-12-18 10:02:22,615	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:02:22,616	[INFO]	54	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:02:25,631	[INFO]	55	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:02:25,632	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:02:25,632	[INFO]	56	SUCCESS	+4.0	
2020-12-18 10:02:25,633	[DEBUG]	
2020-12-18 10:02:26,581	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:02:26,584	[INFO]	58	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:02:26,585	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:26,587	[INFO]	59	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:02:26,587	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:26,589	[INFO]	60	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:02:26,590	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:26,592	[INFO]	61	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:02:26,593	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:02:29,763	[INFO]	62	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:02:29,764	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:02:32,875	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:02:32,876	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:02:33,784	[INFO]	64	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:02:34,668	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:02:35,574	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:02:38,678	[INFO]	67	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:02:38,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:02:38,680	[INFO]	68	SUCCESS	+4.0	
2020-12-18 10:02:38,680	[DEBUG]	
2020-12-18 10:02:39,579	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:02:42,685	[INFO]	70	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:02:43,577	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:02:43,579	[INFO]	72	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:02:43,579	[DEBUG]	
2020-12-18 10:02:46,639	[INFO]	73	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:02:46,640	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:02:46,641	[INFO]	74	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:02:46,642	[DEBUG]	
2020-12-18 10:02:47,575	[INFO]	75	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:02:50,629	[INFO]	76	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:02:50,632	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upright = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:02:50,634	[INFO]	77	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:02:50,634	[DEBUG]	
2020-12-18 10:02:50,636	[INFO]	78	SUCCESS	+4.0	
2020-12-18 10:02:50,637	[DEBUG]	
2020-12-18 10:02:53,690	[INFO]	79	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:02:53,692	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:02:53,693	[INFO]	80	SUCCESS	+4.0	
2020-12-18 10:02:53,694	[DEBUG]	
2020-12-18 10:02:56,705	[INFO]	81	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:02:56,706	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:02:56,706	[INFO]	82	SUCCESS	+4.0	
2020-12-18 10:02:56,707	[DEBUG]	
2020-12-18 10:02:57,608	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:02:58,535	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:02:58,536	[INFO]	85	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:02:59,428	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:03:02,531	[INFO]	87	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:03:02,532	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:03:02,533	[INFO]	88	SUCCESS	+4.0	
2020-12-18 10:03:02,533	[DEBUG]	
2020-12-18 10:03:02,534	[INFO]	89	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:03:03,413	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:03:04,310	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:03:05,184	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:03:06,106	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:03:09,264	[INFO]	94	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:03:10,165	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:03:11,053	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:03:11,986	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:03:12,913	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:03:13,835	[INFO]	99	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:03:13,837	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:03:13,837	[INFO]	101	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:03:14,749	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:03:15,683	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:03:18,693	[INFO]	104	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:03:18,694	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:03:18,695	[INFO]	105	SUCCESS	+4.0	
2020-12-18 10:03:18,695	[DEBUG]	
2020-12-18 10:03:21,825	[INFO]	106	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:03:21,826	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:03:22,668	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:03:22,670	[INFO]	108	SUCCESS	+4.0	
2020-12-18 10:03:22,670	[DEBUG]	
2020-12-18 10:03:23,600	[INFO]	109	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:03:23,601	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:03:26,672	[INFO]	111	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:03:26,673	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 init.add(1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:03:27,578	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:03:27,580	[INFO]	113	SUCCESS	+4.0	
2020-12-18 10:03:27,580	[DEBUG]	
2020-12-18 10:03:28,467	[INFO]	114	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:03:31,587	[INFO]	115	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:03:31,588	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:03:32,511	[INFO]	116	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:03:32,512	[INFO]	117	SUCCESS	+4.0	
2020-12-18 10:03:32,512	[DEBUG]	
2020-12-18 10:03:35,676	[INFO]	118	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:03:36,402	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:03:39,450	[INFO]	120	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:03:39,453	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:03:39,455	[INFO]	121	SUCCESS	+4.0	
2020-12-18 10:03:39,456	[DEBUG]	
2020-12-18 10:03:40,339	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:03:43,419	[INFO]	123	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:03:43,419	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,28 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
                      upleft = 0;
                  }

2020-12-18 10:03:44,313	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:03:44,314	[INFO]	125	SUCCESS	+4.0	
2020-12-18 10:03:44,315	[DEBUG]	
2020-12-18 10:03:47,399	[INFO]	126	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:03:47,400	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:03:47,401	[INFO]	127	SUCCESS	+4.0	
2020-12-18 10:03:47,402	[DEBUG]	
2020-12-18 10:03:48,310	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:03:49,224	[INFO]	129	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:03:50,112	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:03:50,114	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:03:50,115	[INFO]	132	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:03:50,990	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:03:54,045	[INFO]	134	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:03:54,046	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             init.add(1);
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:03:54,047	[INFO]	135	SUCCESS	+4.0	
2020-12-18 10:03:54,047	[DEBUG]	
2020-12-18 10:03:54,927	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:03:55,852	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:03:56,585	[INFO]	138	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:03:57,506	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:04:00,587	[INFO]	140	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:04:00,588	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:04:00,588	[INFO]	141	SUCCESS	+4.0	
2020-12-18 10:04:00,589	[DEBUG]	
2020-12-18 10:04:01,489	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:04:01,490	[INFO]	143	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:04:02,242	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:04:03,180	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:04:04,074	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:04:04,963	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:04:04,964	[INFO]	148	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:04:04,965	[DEBUG]	
2020-12-18 10:04:04,965	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:04:05,750	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:04:05,753	[INFO]	151	SUCCESS	+4.0	
2020-12-18 10:04:05,753	[DEBUG]	
2020-12-18 10:04:05,755	[INFO]	152	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:04:05,756	[DEBUG]	
2020-12-18 10:04:05,757	[INFO]	153	SUCCESS	+4.0	
2020-12-18 10:04:05,758	[DEBUG]	
2020-12-18 10:04:05,759	[INFO]	154	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:04:05,760	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:04:05,762	[INFO]	155	SUCCESS	+4.0	
2020-12-18 10:04:05,763	[DEBUG]	
2020-12-18 10:04:08,862	[INFO]	156	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:04:11,954	[INFO]	157	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:04:11,955	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(init);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:04:11,956	[INFO]	158	SUCCESS	+4.0	
2020-12-18 10:04:11,956	[DEBUG]	
2020-12-18 10:04:12,814	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:04:13,728	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:04:16,806	[INFO]	161	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:04:19,813	[INFO]	162	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:04:19,813	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:04:22,868	[INFO]	163	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:04:23,620	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:04:23,621	[INFO]	165	SUCCESS	+4.0	
2020-12-18 10:04:23,621	[DEBUG]	
2020-12-18 10:04:24,551	[INFO]	166	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:04:27,653	[INFO]	167	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:04:27,654	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:04:27,655	[INFO]	168	SUCCESS	+4.0	
2020-12-18 10:04:27,655	[DEBUG]	
2020-12-18 10:04:28,537	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:04:29,444	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:04:29,446	[INFO]	171	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:04:29,446	[DEBUG]	
2020-12-18 10:04:29,447	[INFO]	172	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:04:29,447	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:04:29,448	[INFO]	173	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:04:29,448	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:04:29,449	[INFO]	174	SUCCESS	+4.0	
2020-12-18 10:04:29,449	[DEBUG]	
2020-12-18 10:04:30,331	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:04:30,333	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:04:31,276	[INFO]	177	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:04:32,204	[INFO]	178	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:04:32,206	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:04:35,371	[INFO]	180	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:04:35,372	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:04:35,373	[INFO]	181	SUCCESS	+4.0	
2020-12-18 10:04:35,373	[DEBUG]	
2020-12-18 10:04:35,374	[INFO]	182	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:04:35,374	[INFO]	183	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:04:35,375	[DEBUG]	
2020-12-18 10:04:35,375	[INFO]	184	SUCCESS	+4.0	
2020-12-18 10:04:35,376	[DEBUG]	
2020-12-18 10:04:35,376	[INFO]	185	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:04:35,377	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:04:35,377	[INFO]	186	SUCCESS	+4.0	
2020-12-18 10:04:35,378	[DEBUG]	
2020-12-18 10:04:35,378	[INFO]	187	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:04:35,379	[INFO]	188	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:04:36,261	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:04:37,185	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:04:38,096	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:04:38,997	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:04:38,998	[INFO]	193	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:04:42,068	[INFO]	194	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:42,068	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:45,148	[INFO]	195	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:04:48,181	[INFO]	196	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:04:48,183	[INFO]	197	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:04:48,184	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,032	[INFO]	198	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:04:49,033	[INFO]	199	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:04:49,034	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,035	[INFO]	200	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:04:49,035	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,036	[INFO]	201	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,036	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,893	[INFO]	202	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:04:49,894	[INFO]	203	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,894	[DEBUG]	
2020-12-18 10:04:49,895	[INFO]	204	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,896	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,896	[INFO]	205	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,897	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,898	[INFO]	206	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:04:49,898	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,899	[INFO]	207	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,900	[INFO]	208	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:04:49,900	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:04:49,901	[INFO]	209	SUCCESS	+4.0	
2020-12-18 10:04:49,901	[DEBUG]	
2020-12-18 10:04:53,044	[INFO]	210	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:04:53,045	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 25,30 ****
--- 25,31 ----
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);

2020-12-18 10:04:56,135	[INFO]	211	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:04:56,137	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 25,32 ****
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 25,33 ----
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                     upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:04:57,008	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:05:00,032	[INFO]	213	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:05:00,032	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:05:03,056	[INFO]	214	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:05:03,057	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:05:03,058	[INFO]	215	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:05:03,059	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:05:03,061	[INFO]	216	SUCCESS	+4.0	
2020-12-18 10:05:03,061	[DEBUG]	
2020-12-18 10:05:03,063	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:05:03,938	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:05:04,851	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:05:05,772	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:05:08,951	[INFO]	221	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:05:08,952	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:05:08,952	[INFO]	==== END ====
2020-12-18 10:05:08,952	[INFO]	Reason: target fitness reached
2020-12-18 10:05:08,953	[INFO]	
2020-12-18 10:05:08,953	[INFO]	========== EPOCH 5 ==========
2020-12-18 10:05:08,953	[INFO]	==== WARMUP ====
2020-12-18 10:05:12,013	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:05:12,013	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:05:15,037	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:05:15,037	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:05:18,138	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:05:18,138	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:05:21,168	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:05:21,168	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:05:21,168	[INFO]	==== START ====
2020-12-18 10:05:22,070	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:05:22,963	[INFO]	2	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:05:23,883	[INFO]	3	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:05:27,036	[INFO]	4	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:05:30,064	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:05:30,065	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:05:30,066	[INFO]	6	SUCCESS	+4.0	
2020-12-18 10:05:30,066	[DEBUG]	
2020-12-18 10:05:33,197	[INFO]	7	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:05:33,197	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:33,198	[INFO]	8	SUCCESS	+4.0	
2020-12-18 10:05:33,198	[DEBUG]	
2020-12-18 10:05:34,198	[INFO]	9	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:05:38,118	[INFO]	10	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:05:38,120	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:05:38,122	[INFO]	11	SUCCESS	+4.0	
2020-12-18 10:05:38,123	[DEBUG]	
2020-12-18 10:05:39,387	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:05:39,389	[INFO]	13	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:05:39,389	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:05:39,390	[INFO]	14	SUCCESS	+4.0	
2020-12-18 10:05:39,390	[DEBUG]	
2020-12-18 10:05:39,391	[INFO]	15	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:05:39,392	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:42,803	[INFO]	16	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:05:45,951	[INFO]	17	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:05:45,951	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,37 ****
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 24,37 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:48,996	[INFO]	18	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:48,996	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:52,071	[INFO]	19	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:05:52,074	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:52,078	[INFO]	20	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:52,079	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:52,084	[INFO]	21	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:52,086	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:52,992	[INFO]	22	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:53,873	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:05:54,773	[INFO]	24	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:05:54,774	[INFO]	25	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:05:54,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:54,776	[INFO]	26	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:54,776	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:54,777	[INFO]	27	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:05:54,778	[INFO]	28	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:05:54,779	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:54,780	[INFO]	29	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:05:54,780	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:54,781	[INFO]	30	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:05:54,781	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:58,015	[INFO]	31	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:05:58,016	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,37 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 17,37 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:58,880	[INFO]	32	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:05:58,883	[INFO]	33	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:05:58,884	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,37 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 17,37 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:05:59,805	[INFO]	34	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:06:00,677	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:06:00,679	[INFO]	36	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:06:00,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,37 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 17,37 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:03,766	[INFO]	37	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:03,767	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,37 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 17,37 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:06,809	[INFO]	38	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:06,810	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:09,879	[INFO]	39	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:06:09,880	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:12,985	[INFO]	40	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:06:12,986	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:16,083	[INFO]	41	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:06:16,085	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:16,972	[INFO]	42	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:06:20,045	[INFO]	43	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:06:20,045	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:20,901	[INFO]	44	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:06:20,903	[INFO]	45	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:06:20,904	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:20,905	[INFO]	46	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:06:20,905	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:21,806	[INFO]	47	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:06:24,857	[INFO]	48	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:06:24,858	[INFO]	49	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:24,859	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:24,860	[INFO]	50	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:24,861	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:24,861	[INFO]	51	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:24,862	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:06:27,967	[INFO]	52	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:06:27,968	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:27,969	[INFO]	53	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:06:27,969	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:06:28,858	[INFO]	54	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:06:28,860	[INFO]	55	SUCCESS	+4.0	
2020-12-18 10:06:28,861	[DEBUG]	
2020-12-18 10:06:29,800	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:06:30,705	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:06:33,781	[INFO]	58	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:06:37,074	[INFO]	59	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:06:37,075	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:06:37,076	[INFO]	60	SUCCESS	+4.0	
2020-12-18 10:06:37,077	[DEBUG]	
2020-12-18 10:06:38,011	[INFO]	61	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:06:38,930	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:06:38,931	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:06:38,931	[DEBUG]	
2020-12-18 10:06:38,932	[INFO]	64	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:06:42,080	[INFO]	65	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:06:42,082	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:06:42,083	[INFO]	==== END ====
2020-12-18 10:06:42,083	[INFO]	Reason: target fitness reached
2020-12-18 10:06:42,085	[INFO]	
2020-12-18 10:06:42,085	[INFO]	========== EPOCH 6 ==========
2020-12-18 10:06:42,086	[INFO]	==== WARMUP ====
2020-12-18 10:06:45,184	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:06:45,184	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:06:48,219	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:06:48,219	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:06:51,326	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:06:51,326	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:06:54,386	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:06:54,386	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:06:54,386	[INFO]	==== START ====
2020-12-18 10:06:55,141	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:06:55,144	[INFO]	2	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:06:55,145	[DEBUG]	
2020-12-18 10:06:56,060	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:06:59,194	[INFO]	4	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:06:59,197	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:06:59,198	[DEBUG]	
2020-12-18 10:07:02,295	[INFO]	6	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:07:02,296	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:07:03,166	[INFO]	7	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:07:03,167	[INFO]	8	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:07:03,168	[DEBUG]	
2020-12-18 10:07:06,209	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:07:06,209	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:07:06,211	[INFO]	10	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:07:06,211	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:07:09,421	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:07:09,422	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:07:09,424	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:07:09,424	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:07:09,425	[INFO]	13	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:07:09,425	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:07:12,449	[INFO]	14	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:07:12,452	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:07:15,440	[INFO]	15	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:07:15,442	[INFO]	16	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:07:15,442	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:07:18,480	[INFO]	17	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:07:18,481	[INFO]	18	SUCCESS	+4.0	
2020-12-18 10:07:18,481	[DEBUG]	
2020-12-18 10:07:19,388	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:07:20,278	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:07:21,189	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:07:24,311	[INFO]	22	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:07:24,312	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:07:24,312	[INFO]	==== END ====
2020-12-18 10:07:24,313	[INFO]	Reason: target fitness reached
2020-12-18 10:07:24,314	[INFO]	
2020-12-18 10:07:24,314	[INFO]	========== EPOCH 7 ==========
2020-12-18 10:07:24,314	[INFO]	==== WARMUP ====
2020-12-18 10:07:27,357	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:07:27,357	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:07:30,468	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:07:30,469	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:07:33,514	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:07:33,514	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:07:36,646	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:07:36,647	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:07:36,647	[INFO]	==== START ====
2020-12-18 10:07:37,565	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:07:40,653	[INFO]	2	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:07:40,654	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:07:40,654	[INFO]	3	SUCCESS	+4.0	
2020-12-18 10:07:40,655	[DEBUG]	
2020-12-18 10:07:41,554	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:07:44,711	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:07:44,713	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:07:44,715	[INFO]	6	SUCCESS	+4.0	
2020-12-18 10:07:44,715	[DEBUG]	
2020-12-18 10:07:45,613	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:07:48,787	[INFO]	8	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:07:49,643	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:07:49,645	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:07:49,646	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:07:49,646	[DEBUG]	
2020-12-18 10:07:52,715	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:07:52,715	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:07:53,596	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:07:53,597	[INFO]	14	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:07:53,597	[DEBUG]	
2020-12-18 10:07:53,598	[INFO]	15	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:07:53,598	[DEBUG]	
2020-12-18 10:07:53,599	[INFO]	16	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:07:53,599	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:07:53,600	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:07:53,600	[DEBUG]	
2020-12-18 10:07:54,507	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:07:54,509	[INFO]	19	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:07:54,509	[DEBUG]	
2020-12-18 10:07:55,423	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:07:55,427	[INFO]	21	SUCCESS	+4.0	
2020-12-18 10:07:55,428	[DEBUG]	
2020-12-18 10:07:56,324	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:07:57,214	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:07:58,124	[INFO]	24	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:08:01,204	[INFO]	25	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:08:02,101	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:08:02,862	[INFO]	27	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:08:05,992	[INFO]	28	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:08:05,993	[INFO]	29	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:08:05,994	[DEBUG]	
2020-12-18 10:08:05,995	[INFO]	30	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:08:05,995	[DEBUG]	
2020-12-18 10:08:05,995	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:08:05,996	[DEBUG]	
2020-12-18 10:08:05,996	[INFO]	32	SUCCESS	+4.0	
2020-12-18 10:08:05,996	[DEBUG]	
2020-12-18 10:08:06,855	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:08:07,737	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:08:08,664	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:08:09,560	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:08:09,562	[INFO]	37	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:08:12,681	[INFO]	38	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:08:12,683	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:08:12,683	[DEBUG]	
2020-12-18 10:08:12,684	[INFO]	40	SUCCESS	+4.0	
2020-12-18 10:08:12,684	[DEBUG]	
2020-12-18 10:08:13,577	[INFO]	41	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:08:16,648	[INFO]	42	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:08:16,649	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:08:17,562	[INFO]	43	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:08:17,563	[INFO]	44	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:08:17,564	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:08:17,565	[INFO]	45	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:08:17,565	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:08:17,566	[INFO]	46	SUCCESS	+4.0	
2020-12-18 10:08:17,566	[DEBUG]	
2020-12-18 10:08:18,446	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:08:21,557	[INFO]	48	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:08:21,558	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:08:22,434	[INFO]	49	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:08:23,164	[INFO]	50	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:08:24,142	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:08:27,221	[INFO]	52	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:08:27,222	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:08:27,222	[INFO]	53	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:08:27,223	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:08:28,125	[INFO]	54	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:08:29,048	[INFO]	55	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:08:29,051	[INFO]	56	SUCCESS	+4.0	
2020-12-18 10:08:29,051	[DEBUG]	
2020-12-18 10:08:29,053	[INFO]	57	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:08:29,985	[INFO]	58	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:08:33,071	[INFO]	59	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:08:33,072	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:08:33,942	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:08:34,847	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:08:37,922	[INFO]	62	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:08:37,925	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:08:41,037	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:08:41,038	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:08:44,060	[INFO]	64	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:08:44,061	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:08:44,985	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:08:48,296	[INFO]	66	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:08:48,298	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:08:51,403	[INFO]	67	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:08:51,405	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:08:52,133	[INFO]	68	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:08:52,998	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:08:56,064	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:08:56,066	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:08:56,068	[INFO]	71	SUCCESS	+4.0	
2020-12-18 10:08:56,068	[DEBUG]	
2020-12-18 10:08:56,820	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:08:57,732	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:08:58,631	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:09:01,649	[INFO]	75	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:09:01,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:09:01,650	[INFO]	76	SUCCESS	+4.0	
2020-12-18 10:09:01,651	[DEBUG]	
2020-12-18 10:09:02,545	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:09:03,449	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:09:03,450	[INFO]	79	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:09:03,450	[DEBUG]	
2020-12-18 10:09:03,451	[INFO]	80	SUCCESS	+4.0	
2020-12-18 10:09:03,451	[DEBUG]	
2020-12-18 10:09:03,452	[INFO]	81	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:09:03,452	[DEBUG]	
2020-12-18 10:09:03,453	[INFO]	82	SUCCESS	+4.0	
2020-12-18 10:09:03,453	[DEBUG]	
2020-12-18 10:09:06,836	[INFO]	83	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:09:06,837	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = rows.get(r-1).get(c);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:09:07,652	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:09:10,706	[INFO]	85	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:09:13,878	[INFO]	86	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:09:13,879	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,61 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 upright = rows.get(r-1).get(c);
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:09:16,912	[INFO]	87	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:09:16,914	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:09:17,659	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:09:17,661	[INFO]	89	SUCCESS	+4.0	
2020-12-18 10:09:17,661	[DEBUG]	
2020-12-18 10:09:18,537	[INFO]	90	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:09:19,437	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:09:20,332	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:09:23,487	[INFO]	93	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:09:23,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:09:23,488	[INFO]	94	SUCCESS	+4.0	
2020-12-18 10:09:23,488	[DEBUG]	
2020-12-18 10:09:24,348	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:09:25,248	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:09:25,249	[INFO]	97	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:09:26,001	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:09:26,913	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:09:27,821	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:09:28,710	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:09:29,625	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:09:32,743	[INFO]	103	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:09:32,744	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:09:32,748	[INFO]	104	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:09:32,749	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:09:32,750	[INFO]	105	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:09:32,751	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:09:33,683	[INFO]	106	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:09:34,624	[INFO]	107	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:09:34,625	[INFO]	108	SUCCESS	+4.0	
2020-12-18 10:09:34,625	[DEBUG]	
2020-12-18 10:09:35,499	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:09:38,649	[INFO]	110	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:09:38,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     init.add(1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:09:38,651	[INFO]	111	SUCCESS	+4.0	
2020-12-18 10:09:38,651	[DEBUG]	
2020-12-18 10:09:39,527	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:09:40,417	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:09:43,559	[INFO]	114	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:09:43,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:09:43,564	[INFO]	115	SUCCESS	+4.0	
2020-12-18 10:09:43,565	[DEBUG]	
2020-12-18 10:09:46,707	[INFO]	116	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:09:46,708	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,34 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:09:49,879	[INFO]	117	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:09:49,880	[INFO]	118	SUCCESS	+4.0	
2020-12-18 10:09:49,881	[DEBUG]	
2020-12-18 10:09:49,881	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:09:52,999	[INFO]	120	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:09:53,000	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:09:53,893	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:09:53,894	[INFO]	122	SUCCESS	+4.0	
2020-12-18 10:09:53,895	[DEBUG]	
2020-12-18 10:09:54,853	[INFO]	123	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:09:55,728	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:09:55,730	[INFO]	125	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:09:55,730	[DEBUG]	
2020-12-18 10:09:55,731	[INFO]	126	SUCCESS	+4.0	
2020-12-18 10:09:55,731	[DEBUG]	
2020-12-18 10:09:56,665	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:09:57,418	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:10:00,436	[INFO]	129	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:10:00,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:10:00,441	[INFO]	130	SUCCESS	+4.0	
2020-12-18 10:10:00,442	[DEBUG]	
2020-12-18 10:10:00,444	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:10:03,516	[INFO]	132	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:10:03,517	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:10:03,518	[INFO]	133	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:10:03,519	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:10:03,519	[INFO]	134	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:10:03,520	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:10:04,382	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:10:04,384	[INFO]	136	SUCCESS	+4.0	
2020-12-18 10:10:04,384	[DEBUG]	
2020-12-18 10:10:05,291	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:10:05,292	[INFO]	138	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:10:05,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:05,293	[INFO]	139	SUCCESS	+4.0	
2020-12-18 10:10:05,293	[DEBUG]	
2020-12-18 10:10:08,372	[INFO]	140	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:10:08,373	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:10:08,373	[INFO]	141	SUCCESS	+4.0	
2020-12-18 10:10:08,374	[DEBUG]	
2020-12-18 10:10:09,272	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:10:10,045	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:10:10,047	[INFO]	144	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:10:10,936	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:10:14,132	[INFO]	146	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:10:14,133	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:14,993	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:10:14,994	[INFO]	148	SUCCESS	+4.0	
2020-12-18 10:10:14,995	[DEBUG]	
2020-12-18 10:10:14,996	[INFO]	149	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:10:14,996	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:10:14,997	[INFO]	150	SUCCESS	+4.0	
2020-12-18 10:10:14,997	[DEBUG]	
2020-12-18 10:10:18,153	[INFO]	151	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:10:18,154	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = rows.get(r-1).get(c);
                  }
                  row.add(upleft+upright);
              }

2020-12-18 10:10:19,005	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:10:22,093	[INFO]	153	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:10:22,094	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,35 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 26,35 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = rows.get(r-1).get(c);
                  }
                  row.add(upleft+upright);
              }

2020-12-18 10:10:25,133	[INFO]	154	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:10:25,134	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,35 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 19,35 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = rows.get(r-1).get(c);
                  }
                  row.add(upleft+upright);
              }

2020-12-18 10:10:28,261	[INFO]	155	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:10:28,262	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:28,263	[INFO]	156	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:10:28,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:28,265	[INFO]	157	SUCCESS	+4.0	
2020-12-18 10:10:28,265	[DEBUG]	
2020-12-18 10:10:31,332	[INFO]	158	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:10:31,333	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:10:34,599	[INFO]	159	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:10:34,600	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,38 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:10:34,601	[INFO]	160	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:10:34,601	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:10:35,607	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:10:35,608	[INFO]	162	SUCCESS	+4.0	
2020-12-18 10:10:35,609	[DEBUG]	
2020-12-18 10:10:36,568	[INFO]	163	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:10:36,569	[INFO]	164	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:10:36,570	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:37,515	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:10:40,825	[INFO]	166	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:10:40,826	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:44,084	[INFO]	167	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:10:44,086	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,32 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 17,32 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:44,088	[INFO]	168	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:10:44,088	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:47,252	[INFO]	169	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:10:47,253	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:10:48,119	[INFO]	170	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:10:48,121	[INFO]	171	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:10:48,121	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:10:48,122	[INFO]	172	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:10:48,123	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:10:48,872	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:10:49,756	[INFO]	174	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:10:49,757	[INFO]	175	SUCCESS	+4.0	
2020-12-18 10:10:49,757	[DEBUG]	
2020-12-18 10:10:50,676	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:10:51,607	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:10:54,655	[INFO]	178	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:10:54,656	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:10:54,656	[INFO]	179	SUCCESS	+4.0	
2020-12-18 10:10:54,657	[DEBUG]	
2020-12-18 10:10:57,961	[INFO]	180	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:10:57,962	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 10:10:58,843	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:10:59,751	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:10:59,752	[INFO]	183	SUCCESS	+4.0	
2020-12-18 10:10:59,752	[DEBUG]	
2020-12-18 10:11:02,879	[INFO]	184	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:11:03,921	[INFO]	185	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:11:05,147	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:11:08,311	[INFO]	187	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:11:08,312	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:08,313	[INFO]	188	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:11:08,313	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:08,314	[INFO]	189	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:11:08,314	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:11,363	[INFO]	190	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:11:11,364	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:11:11,365	[INFO]	191	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:11:11,365	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:11,366	[INFO]	192	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:11:11,366	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:14,488	[INFO]	193	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:11:14,488	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:15,399	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:11:16,297	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:11:19,338	[INFO]	196	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:11:19,340	[INFO]	197	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:11:19,341	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:19,342	[INFO]	198	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:11:19,342	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:20,240	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:11:23,282	[INFO]	200	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:11:23,283	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:11:23,283	[INFO]	==== END ====
2020-12-18 10:11:23,283	[INFO]	Reason: target fitness reached
2020-12-18 10:11:23,284	[INFO]	
2020-12-18 10:11:23,284	[INFO]	========== EPOCH 8 ==========
2020-12-18 10:11:23,284	[INFO]	==== WARMUP ====
2020-12-18 10:11:26,479	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:11:26,479	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:11:29,561	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:11:29,561	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:11:32,664	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:11:32,665	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:11:35,686	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:11:35,686	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:11:35,686	[INFO]	==== START ====
2020-12-18 10:11:36,600	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:11:39,806	[INFO]	2	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:11:39,807	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:11:43,097	[INFO]	3	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:11:43,100	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:11:43,863	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:11:43,866	[INFO]	5	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:11:43,867	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:11:43,868	[INFO]	6	SUCCESS	+4.0	
2020-12-18 10:11:43,869	[DEBUG]	
2020-12-18 10:11:44,791	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:11:48,035	[INFO]	8	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:11:48,036	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:11:48,036	[INFO]	9	SUCCESS	+4.0	
2020-12-18 10:11:48,037	[DEBUG]	
2020-12-18 10:11:51,064	[INFO]	10	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:11:51,982	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:11:52,870	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:11:55,982	[INFO]	13	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:11:55,983	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:11:55,984	[INFO]	14	SUCCESS	+4.0	
2020-12-18 10:11:55,984	[DEBUG]	
2020-12-18 10:11:56,867	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:11:57,628	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:12:00,666	[INFO]	17	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:12:00,667	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:12:00,667	[INFO]	18	SUCCESS	+4.0	
2020-12-18 10:12:00,668	[DEBUG]	
2020-12-18 10:12:03,735	[INFO]	19	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:12:03,736	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:12:04,622	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:12:04,623	[INFO]	21	SUCCESS	+4.0	
2020-12-18 10:12:04,623	[DEBUG]	
2020-12-18 10:12:04,624	[INFO]	22	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:12:04,624	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:12:05,524	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:12:06,465	[INFO]	24	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:12:09,572	[INFO]	25	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:12:09,573	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:12:10,479	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:12:11,377	[INFO]	27	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:12:14,469	[INFO]	28	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:12:14,469	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:12:17,536	[INFO]	29	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:12:17,537	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:12:20,586	[INFO]	30	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:12:20,587	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:12:20,588	[INFO]	31	SUCCESS	+4.0	
2020-12-18 10:12:20,588	[DEBUG]	
2020-12-18 10:12:20,589	[INFO]	32	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:12:20,589	[DEBUG]	
2020-12-18 10:12:20,590	[INFO]	33	SUCCESS	+4.0	
2020-12-18 10:12:20,590	[DEBUG]	
2020-12-18 10:12:21,496	[INFO]	34	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:12:24,675	[INFO]	35	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:12:25,557	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:12:28,629	[INFO]	37	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:12:28,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 rows.add(row);
              }
              rows.add(row);
          }

2020-12-18 10:12:28,631	[INFO]	38	SUCCESS	+4.0	
2020-12-18 10:12:28,631	[DEBUG]	
2020-12-18 10:12:28,632	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:12:28,633	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:12:31,683	[INFO]	40	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:12:31,684	[INFO]	41	SUCCESS	+4.0	
2020-12-18 10:12:31,684	[DEBUG]	
2020-12-18 10:12:32,601	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:12:35,642	[INFO]	43	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:12:35,643	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:12:35,644	[INFO]	44	SUCCESS	+4.0	
2020-12-18 10:12:35,644	[DEBUG]	
2020-12-18 10:12:36,545	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:12:39,698	[INFO]	46	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:12:39,699	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:12:40,576	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:12:40,577	[INFO]	48	SUCCESS	+4.0	
2020-12-18 10:12:40,577	[DEBUG]	
2020-12-18 10:12:43,664	[INFO]	49	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:12:43,664	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:12:43,665	[INFO]	50	SUCCESS	+4.0	
2020-12-18 10:12:43,665	[DEBUG]	
2020-12-18 10:12:44,588	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:12:47,706	[INFO]	52	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:12:47,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:12:47,708	[INFO]	53	SUCCESS	+4.0	
2020-12-18 10:12:47,708	[DEBUG]	
2020-12-18 10:12:48,580	[INFO]	54	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:12:49,478	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:12:49,479	[INFO]	56	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:12:49,480	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:12:49,480	[INFO]	57	SUCCESS	+4.0	
2020-12-18 10:12:49,481	[DEBUG]	
2020-12-18 10:12:50,390	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:12:51,145	[INFO]	59	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:12:52,023	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:12:52,943	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:12:53,849	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:12:56,961	[INFO]	63	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:12:57,873	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:00,929	[INFO]	65	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:13:00,930	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:13:00,932	[INFO]	66	SUCCESS	+4.0	
2020-12-18 10:13:00,933	[DEBUG]	
2020-12-18 10:13:00,934	[INFO]	67	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:13:00,935	[DEBUG]	
2020-12-18 10:13:01,821	[INFO]	68	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:13:02,753	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:13:02,755	[INFO]	70	SUCCESS	+4.0	
2020-12-18 10:13:02,756	[DEBUG]	
2020-12-18 10:13:03,650	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:13:03,651	[INFO]	72	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:03,652	[DEBUG]	
2020-12-18 10:13:06,717	[INFO]	73	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:13:06,717	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = rows.get(r-1).get(c);
                  }
                  row.add(upleft+upright);
              }

2020-12-18 10:13:06,718	[INFO]	74	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:06,719	[DEBUG]	
2020-12-18 10:13:06,719	[INFO]	75	SUCCESS	+4.0	
2020-12-18 10:13:06,720	[DEBUG]	
2020-12-18 10:13:09,833	[INFO]	76	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:13:09,834	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:13:10,572	[INFO]	77	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:13:10,573	[INFO]	78	SUCCESS	+4.0	
2020-12-18 10:13:10,573	[DEBUG]	
2020-12-18 10:13:10,574	[INFO]	79	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:13:10,574	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:13:11,456	[INFO]	80	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:13:14,577	[INFO]	81	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:13:14,577	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:15,458	[INFO]	82	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:13:18,715	[INFO]	83	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:13:18,716	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:21,788	[INFO]	84	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:13:21,789	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:13:21,790	[INFO]	85	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:13:21,790	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:24,817	[INFO]	86	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:24,818	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,27 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 18,27 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:27,868	[INFO]	87	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:13:27,870	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 18,39 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:28,764	[INFO]	88	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:13:28,766	[INFO]	89	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:28,766	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,27 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 18,27 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:29,640	[INFO]	90	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:13:30,553	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:13:31,426	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:32,217	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:13:33,091	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:13:33,997	[INFO]	95	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:13:34,894	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:34,895	[INFO]	97	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:13:34,896	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,27 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 18,27 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:38,077	[INFO]	98	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:13:38,078	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,24 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:38,079	[INFO]	99	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:38,079	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,24 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:38,924	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:42,055	[INFO]	101	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:13:42,057	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,24 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 10:13:45,121	[INFO]	102	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:13:45,121	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:45,123	[INFO]	103	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:13:45,123	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:45,996	[INFO]	104	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:13:45,998	[INFO]	105	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:13:45,998	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,890	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:13:46,893	[INFO]	107	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:13:46,894	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,896	[INFO]	108	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:13:46,897	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,898	[INFO]	109	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:13:46,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,901	[INFO]	110	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:13:46,902	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,904	[INFO]	111	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:46,905	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:46,906	[INFO]	112	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:47,800	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:13:47,802	[INFO]	114	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:13:47,803	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:48,714	[INFO]	115	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:13:48,715	[INFO]	116	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:13:48,716	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:48,717	[INFO]	117	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:48,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:49,615	[INFO]	118	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:50,508	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:53,627	[INFO]	120	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:13:53,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:53,634	[INFO]	121	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:53,636	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:53,641	[INFO]	122	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:13:53,643	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<=n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:56,701	[INFO]	123	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:13:56,702	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:56,703	[INFO]	124	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:13:56,704	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:56,705	[INFO]	125	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:13:56,705	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:56,706	[INFO]	126	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:56,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,593	[INFO]	127	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:57,595	[INFO]	128	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:57,595	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,596	[INFO]	129	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:57,597	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,598	[INFO]	130	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:13:57,598	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,599	[INFO]	131	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:57,600	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,601	[INFO]	132	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:57,601	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,602	[INFO]	133	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:13:57,602	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,603	[INFO]	134	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:57,604	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:57,605	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:57,606	[INFO]	136	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:57,606	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:58,511	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:58,513	[INFO]	138	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:13:58,514	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:58,515	[INFO]	139	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:13:58,515	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:58,516	[INFO]	140	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:13:58,516	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:59,416	[INFO]	141	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:13:59,419	[INFO]	142	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:13:59,420	[INFO]	143	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:13:59,421	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:59,423	[INFO]	144	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:13:59,423	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:59,425	[INFO]	145	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:13:59,425	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:13:59,426	[INFO]	146	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:13:59,427	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,39 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
!             
!             
!             
          }
  
          return rows;

2020-12-18 10:14:02,521	[INFO]	147	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:14:02,522	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
!             
          }
  
          return rows;

2020-12-18 10:14:05,546	[INFO]	148	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:14:05,547	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:14:05,549	[INFO]	149	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:14:05,549	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
!             
          }
  
          return rows;

2020-12-18 10:14:08,676	[INFO]	150	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:14:08,677	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:08,678	[INFO]	151	SUCCESS	+4.0	
2020-12-18 10:14:08,678	[DEBUG]	
2020-12-18 10:14:09,581	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:14:10,475	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:14:11,379	[INFO]	154	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:14:14,486	[INFO]	155	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:14:14,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:14:15,219	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:14:18,247	[INFO]	157	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:14:18,248	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:14:18,249	[INFO]	158	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:14:18,249	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:14:19,171	[INFO]	159	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:14:19,174	[INFO]	160	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:14:19,175	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:19,178	[INFO]	161	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:14:19,179	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:19,182	[INFO]	162	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:14:19,183	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:22,256	[INFO]	163	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:14:23,136	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:14:23,137	[INFO]	165	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:14:23,137	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:23,138	[INFO]	166	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:14:23,139	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:38,611	[INFO]	167	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:14:38,612	[INFO]	168	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:14:38,613	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:38,613	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:14:38,614	[INFO]	170	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:14:38,615	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:38,616	[INFO]	171	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:14:38,616	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:38,617	[INFO]	172	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:14:38,617	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:38,618	[INFO]	173	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:14:38,619	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:39,518	[INFO]	174	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:14:39,520	[INFO]	175	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:14:39,520	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:39,522	[INFO]	176	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:14:39,522	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:39,524	[INFO]	177	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:14:39,524	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:14:40,414	[INFO]	178	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:14:43,577	[INFO]	179	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:14:43,578	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:14:44,293	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:14:47,419	[INFO]	181	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:14:47,420	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 20,25 ****
--- 20,26 ----
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
+                 init.add(1);
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,40 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:14:48,298	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:14:51,372	[INFO]	183	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:14:51,373	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 20,25 ****
--- 20,26 ----
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
+                 init.add(1);
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:14:54,387	[INFO]	184	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:14:54,388	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 20,25 ****
--- 20,26 ----
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
+                 init.add(1);
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:14:54,389	[INFO]	185	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:14:54,389	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:14:57,423	[INFO]	186	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:14:57,424	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:15:00,513	[INFO]	187	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:15:00,515	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:15:00,518	[INFO]	188	SUCCESS	+4.0	
2020-12-18 10:15:00,519	[DEBUG]	
2020-12-18 10:15:01,400	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:15:02,174	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:15:03,062	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:15:06,216	[INFO]	192	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:15:06,217	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:15:06,218	[INFO]	193	SUCCESS	+4.0	
2020-12-18 10:15:06,218	[DEBUG]	
2020-12-18 10:15:07,102	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:15:08,002	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:15:08,922	[INFO]	196	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:15:09,833	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:15:10,784	[INFO]	198	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:15:13,828	[INFO]	199	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:15:14,726	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:15:14,727	[INFO]	201	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:15:14,727	[DEBUG]	
2020-12-18 10:15:17,792	[INFO]	202	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:15:17,792	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:15:17,793	[INFO]	203	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:15:17,794	[DEBUG]	
2020-12-18 10:15:18,731	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:15:18,732	[INFO]	205	SUCCESS	+4.0	
2020-12-18 10:15:18,732	[DEBUG]	
2020-12-18 10:15:19,637	[INFO]	206	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:15:22,730	[INFO]	207	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:15:22,730	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:15:22,731	[INFO]	208	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:15:22,732	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:22,733	[INFO]	209	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:22,733	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:22,734	[INFO]	210	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:22,734	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:22,735	[INFO]	211	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:22,736	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:23,633	[INFO]	212	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:23,635	[INFO]	213	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:23,635	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:24,542	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:15:25,413	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:15:26,304	[INFO]	216	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:15:26,306	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:15:27,207	[INFO]	218	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:15:27,208	[INFO]	219	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:15:27,208	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:27,209	[INFO]	220	SUCCESS	+4.0	
2020-12-18 10:15:27,209	[DEBUG]	
2020-12-18 10:15:30,309	[INFO]	221	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:15:30,310	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = 0;
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:15:30,311	[INFO]	222	SUCCESS	+4.0	
2020-12-18 10:15:30,311	[DEBUG]	
2020-12-18 10:15:33,464	[INFO]	223	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:15:33,465	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:15:34,321	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:15:35,354	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:15:35,356	[INFO]	226	SUCCESS	+4.0	
2020-12-18 10:15:35,357	[DEBUG]	
2020-12-18 10:15:35,358	[INFO]	227	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:15:36,600	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:15:36,602	[INFO]	229	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:15:36,603	[DEBUG]	
2020-12-18 10:15:40,718	[INFO]	230	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:15:40,719	[INFO]	231	SUCCESS	+4.0	
2020-12-18 10:15:40,720	[DEBUG]	
2020-12-18 10:15:41,811	[INFO]	232	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:15:45,669	[INFO]	233	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:15:48,933	[INFO]	234	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:15:48,934	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:15:48,934	[INFO]	235	SUCCESS	+4.0	
2020-12-18 10:15:48,935	[DEBUG]	
2020-12-18 10:15:51,954	[INFO]	236	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:15:51,955	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:15:51,955	[INFO]	237	SUCCESS	+4.0	
2020-12-18 10:15:51,956	[DEBUG]	
2020-12-18 10:15:51,956	[INFO]	238	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:15:51,957	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:15:51,957	[INFO]	239	SUCCESS	+4.0	
2020-12-18 10:15:51,958	[DEBUG]	
2020-12-18 10:15:51,958	[INFO]	240	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:15:52,860	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:15:53,774	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:15:53,775	[INFO]	243	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:15:53,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:15:53,776	[INFO]	244	SUCCESS	+4.0	
2020-12-18 10:15:53,776	[DEBUG]	
2020-12-18 10:15:54,697	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:15:57,846	[INFO]	246	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:15:57,846	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:15:58,744	[INFO]	247	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:15:58,745	[INFO]	248	SUCCESS	+4.0	
2020-12-18 10:15:58,746	[DEBUG]	
2020-12-18 10:15:59,631	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:16:02,753	[INFO]	250	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:16:02,753	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:16:02,754	[INFO]	251	SUCCESS	+4.0	
2020-12-18 10:16:02,754	[DEBUG]	
2020-12-18 10:16:02,755	[INFO]	252	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:16:02,756	[INFO]	253	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:16:02,756	[DEBUG]	
2020-12-18 10:16:05,799	[INFO]	254	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:16:05,800	[INFO]	255	SUCCESS	+4.0	
2020-12-18 10:16:05,801	[DEBUG]	
2020-12-18 10:16:06,710	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:16:07,636	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:16:08,527	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:16:11,625	[INFO]	259	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:16:14,712	[INFO]	260	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:16:17,809	[INFO]	261	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:16:17,810	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 rows.add(init);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:16:20,857	[INFO]	262	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:16:20,859	[INFO]	263	SUCCESS	+4.0	
2020-12-18 10:16:20,859	[DEBUG]	
2020-12-18 10:16:21,764	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:16:22,667	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:16:23,568	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:16:24,451	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:16:25,345	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:16:28,470	[INFO]	269	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:16:28,471	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:16:29,368	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:16:29,369	[INFO]	271	SUCCESS	+4.0	
2020-12-18 10:16:29,370	[DEBUG]	
2020-12-18 10:16:30,276	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:16:31,187	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:16:34,290	[INFO]	274	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:16:35,186	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:16:38,261	[INFO]	276	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:16:38,261	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:16:38,262	[INFO]	277	SUCCESS	+4.0	
2020-12-18 10:16:38,262	[DEBUG]	
2020-12-18 10:16:41,453	[INFO]	278	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:16:41,454	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:16:42,350	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:16:42,351	[INFO]	280	SUCCESS	+4.0	
2020-12-18 10:16:42,351	[DEBUG]	
2020-12-18 10:16:42,352	[INFO]	281	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:16:42,353	[INFO]	282	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:16:42,353	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:16:43,111	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:16:43,112	[INFO]	284	SUCCESS	+4.0	
2020-12-18 10:16:43,113	[DEBUG]	
2020-12-18 10:16:43,991	[INFO]	285	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:16:43,992	[INFO]	286	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:16:47,044	[INFO]	287	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:16:47,044	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,33 ****
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = 0;
                  } else {
                      upright = 0;
                  }

2020-12-18 10:16:47,960	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:16:47,962	[INFO]	289	SUCCESS	+4.0	
2020-12-18 10:16:47,962	[DEBUG]	
2020-12-18 10:16:47,963	[INFO]	290	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:16:47,964	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:16:51,049	[INFO]	291	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:16:51,052	[INFO]	292	SUCCESS	+4.0	
2020-12-18 10:16:51,052	[DEBUG]	
2020-12-18 10:16:54,072	[INFO]	293	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:16:54,073	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:16:54,073	[INFO]	294	SUCCESS	+4.0	
2020-12-18 10:16:54,074	[DEBUG]	
2020-12-18 10:16:57,102	[INFO]	295	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:16:57,103	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:16:58,015	[INFO]	296	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:17:01,132	[INFO]	297	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:17:01,133	[INFO]	298	SUCCESS	+4.0	
2020-12-18 10:17:01,134	[DEBUG]	
2020-12-18 10:17:01,134	[INFO]	299	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:17:04,259	[INFO]	300	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:17:04,260	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:17:07,355	[INFO]	301	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:17:08,271	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:11,393	[INFO]	303	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:17:11,394	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 10:17:14,426	[INFO]	304	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:17:14,427	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:17:14,428	[INFO]	305	SUCCESS	+4.0	
2020-12-18 10:17:14,428	[DEBUG]	
2020-12-18 10:17:15,329	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:17:18,436	[INFO]	307	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:17:18,437	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:17:18,438	[INFO]	308	SUCCESS	+4.0	
2020-12-18 10:17:18,438	[DEBUG]	
2020-12-18 10:17:18,439	[INFO]	309	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:17:18,439	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:17:19,330	[INFO]	310	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:17:19,331	[INFO]	311	SUCCESS	+4.0	
2020-12-18 10:17:19,332	[DEBUG]	
2020-12-18 10:17:19,333	[INFO]	312	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:17:19,334	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:17:22,428	[INFO]	313	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:22,429	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:25,553	[INFO]	314	SUCCESS	*3.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:17:25,554	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:28,598	[INFO]	315	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:17:31,700	[INFO]	316	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:17:34,854	[INFO]	317	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:17:34,856	[INFO]	318	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:35,771	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:17:38,840	[INFO]	320	SUCCESS	+3.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:17:38,841	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:41,913	[INFO]	321	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:17:41,914	[INFO]	322	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:17:41,915	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:42,814	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:17:45,907	[INFO]	324	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:17:46,832	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:17:46,834	[INFO]	326	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:17:46,835	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:47,781	[INFO]	327	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:17:50,940	[INFO]	328	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:50,941	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:50,942	[INFO]	329	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:17:50,943	[INFO]	330	SUCCESS	 4.0	
2020-12-18 10:17:50,944	[INFO]	331	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:17:50,944	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:51,829	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:17:51,831	[INFO]	333	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:17:54,951	[INFO]	334	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:17:55,855	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:17:58,936	[INFO]	336	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:17:59,847	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:59,849	[INFO]	338	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:17:59,850	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:17:59,851	[INFO]	339	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:17:59,852	[INFO]	340	SUCCESS	 4.0	
2020-12-18 10:18:00,767	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:18:01,676	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:18:01,677	[INFO]	343	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:18:01,678	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:01,679	[INFO]	344	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:18:04,786	[INFO]	345	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:18:04,787	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 28,36 ****
--- 28,38 ----
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:18:07,881	[INFO]	346	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:18:07,883	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,36 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 21,38 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:18:08,792	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:18:09,690	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:18:09,692	[INFO]	349	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:18:09,693	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,36 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 21,38 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:18:12,754	[INFO]	350	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:18:12,755	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:15,807	[INFO]	351	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:18:16,725	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:18:19,861	[INFO]	353	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:19,862	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,30 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:22,894	[INFO]	354	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:18:22,895	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,36 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:18:23,805	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:18:24,710	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:18:27,845	[INFO]	357	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:18:28,705	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:18:28,706	[INFO]	359	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:28,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,30 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:29,617	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:18:30,521	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:18:31,463	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:18:32,391	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:18:35,524	[INFO]	364	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:18:38,607	[INFO]	365	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:41,816	[INFO]	366	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:18:44,841	[INFO]	367	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:44,842	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:44,844	[INFO]	368	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:18:44,844	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:45,717	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:18:45,718	[INFO]	370	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:45,719	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:45,720	[INFO]	371	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:18:45,720	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:46,477	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:18:46,478	[INFO]	373	SUCCESS	 4.0	
2020-12-18 10:18:47,372	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:18:50,548	[INFO]	375	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:18:53,613	[INFO]	376	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:18:53,614	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,36 ****
--- 29,38 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:18:54,532	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:18:54,534	[INFO]	378	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:18:54,534	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:18:54,535	[INFO]	379	SUCCESS	 4.0	
2020-12-18 10:18:55,440	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:18:58,537	[INFO]	381	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:18:59,435	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:19:00,344	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:19:01,246	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:19:16,556	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:19:17,486	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:19:20,522	[INFO]	387	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:19:20,523	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:23,573	[INFO]	388	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:19:23,574	[INFO]	389	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:19:23,575	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:23,576	[INFO]	390	SUCCESS	 4.0	
2020-12-18 10:19:26,716	[INFO]	391	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:19:26,718	[INFO]	392	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:19:26,719	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:29,833	[INFO]	393	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:19:29,835	[INFO]	394	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:19:29,836	[INFO]	395	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:19:29,837	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:33,045	[INFO]	396	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:19:33,046	[INFO]	397	SUCCESS	 4.0	
2020-12-18 10:19:33,756	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:19:34,637	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:19:35,532	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:19:38,658	[INFO]	401	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:19:38,661	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:38,664	[INFO]	402	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:19:38,666	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:19:38,668	[INFO]	403	SUCCESS	 4.0	
2020-12-18 10:19:38,672	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:19:41,766	[INFO]	405	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:19:41,767	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,36 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:19:42,684	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:19:45,833	[INFO]	407	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:19:46,744	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:19:47,637	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:20:02,930	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:20:06,021	[INFO]	411	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:20:06,022	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,36 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 21,37 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:20:06,941	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:20:10,016	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:20:13,054	[INFO]	414	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:20:13,055	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:20:14,008	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:20:17,072	[INFO]	416	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:20:20,174	[INFO]	417	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:20:20,179	[INFO]	418	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:20:20,180	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:20:20,183	[INFO]	419	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:20:20,184	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:20:35,621	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:20:35,622	[INFO]	421	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:20:35,623	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:20:35,623	[INFO]	422	SUCCESS	 4.0	
2020-12-18 10:20:38,771	[INFO]	423	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:20:41,904	[INFO]	424	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:20:42,819	[INFO]	425	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:20:45,866	[INFO]	426	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:20:45,867	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:20:46,772	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:20:49,876	[INFO]	428	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:20:49,877	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,36 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 19,37 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 row.add(upleft+upright);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:20:50,618	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:20:53,696	[INFO]	430	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:20:56,812	[INFO]	431	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:20:59,835	[INFO]	432	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:21:02,926	[INFO]	433	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:21:02,928	[INFO]	434	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:21:02,929	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:05,929	[INFO]	435	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:21:05,931	[INFO]	436	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:21:05,932	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:05,933	[INFO]	437	SUCCESS	 4.0	
2020-12-18 10:21:06,864	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:21:09,934	[INFO]	439	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:21:09,935	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:10,841	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:21:11,748	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:21:14,807	[INFO]	442	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:21:14,809	[INFO]	443	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:21:14,810	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:15,725	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:21:16,643	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:21:17,401	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:21:20,486	[INFO]	447	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:21:20,487	[INFO]	448	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:21:20,488	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:35,802	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:21:36,728	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:21:39,891	[INFO]	451	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:21:39,893	[INFO]	452	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:21:40,875	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:21:41,829	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:21:41,831	[INFO]	455	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:21:41,831	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:41,832	[INFO]	456	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:21:41,833	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:41,834	[INFO]	457	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:21:41,834	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:45,005	[INFO]	458	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:21:45,008	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:48,140	[INFO]	459	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:21:48,142	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,32 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:48,893	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:21:48,894	[INFO]	461	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:21:48,895	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:52,020	[INFO]	462	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:21:52,906	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:21:55,978	[INFO]	464	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:21:56,881	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:21:59,928	[INFO]	466	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:21:59,929	[INFO]	467	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:21:59,930	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:21:59,930	[INFO]	468	SUCCESS	 4.0	
2020-12-18 10:22:03,000	[INFO]	469	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:22:03,860	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:22:04,768	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:22:04,771	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:22:04,774	[INFO]	473	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:22:04,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:04,776	[INFO]	474	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:22:04,777	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:05,740	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:22:06,656	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:22:07,568	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:22:08,481	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:22:08,482	[INFO]	479	SUCCESS	 4.0	
2020-12-18 10:22:09,400	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:22:10,334	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:22:13,461	[INFO]	482	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:22:13,462	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 23,28 ****
--- 23,31 ----
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
***************
*** 32,37 ****
--- 35,41 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:14,351	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:22:17,388	[INFO]	484	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:22:17,390	[INFO]	485	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:22:17,390	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:20,575	[INFO]	486	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:22:20,576	[INFO]	487	SUCCESS	 4.0	
2020-12-18 10:22:21,301	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:22:22,155	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:22:23,105	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:22:26,160	[INFO]	491	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:22:26,162	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = rows.get(r-1).get(c);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 32,37 ****
--- 33,39 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:26,165	[INFO]	492	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:22:26,166	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = rows.get(r-1).get(c);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 32,37 ****
--- 33,39 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:27,075	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:22:27,076	[INFO]	494	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:22:27,077	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:27,077	[INFO]	495	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:22:27,078	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 10:22:27,955	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:22:27,956	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:22:27,957	[INFO]	498	SUCCESS	 4.0	
2020-12-18 10:22:27,958	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:22:28,879	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:22:28,880	[INFO]	==== END ====
2020-12-18 10:22:28,880	[INFO]	Reason: step budget
2020-12-18 10:22:28,881	[INFO]	
2020-12-18 10:22:28,881	[INFO]	========== EPOCH 9 ==========
2020-12-18 10:22:28,881	[INFO]	==== WARMUP ====
2020-12-18 10:22:32,029	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:22:32,029	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:22:35,164	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:22:35,165	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:22:38,194	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:22:38,195	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:22:41,286	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:22:41,287	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:22:41,287	[INFO]	==== START ====
2020-12-18 10:22:42,181	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:22:45,430	[INFO]	2	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:22:45,431	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:22:45,431	[INFO]	3	SUCCESS	+4.0	
2020-12-18 10:22:45,432	[DEBUG]	
2020-12-18 10:22:46,261	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:22:47,161	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:22:48,097	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:22:49,036	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:22:49,940	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:22:53,072	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:22:53,072	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:22:53,073	[INFO]	10	SUCCESS	+4.0	
2020-12-18 10:22:53,073	[DEBUG]	
2020-12-18 10:22:53,964	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:22:53,965	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:22:53,966	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:22:53,967	[INFO]	13	SUCCESS	+4.0	
2020-12-18 10:22:53,967	[DEBUG]	
2020-12-18 10:22:54,894	[INFO]	14	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:22:55,811	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:22:58,917	[INFO]	16	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:22:59,810	[INFO]	17	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:23:02,909	[INFO]	18	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:23:02,910	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:23:02,911	[INFO]	19	SUCCESS	+4.0	
2020-12-18 10:23:02,911	[DEBUG]	
2020-12-18 10:23:05,934	[INFO]	20	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:23:05,935	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:23:05,936	[INFO]	21	SUCCESS	+4.0	
2020-12-18 10:23:05,936	[DEBUG]	
2020-12-18 10:23:05,937	[INFO]	22	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:23:05,937	[DEBUG]	
2020-12-18 10:23:05,938	[INFO]	23	SUCCESS	+4.0	
2020-12-18 10:23:05,938	[DEBUG]	
2020-12-18 10:23:06,828	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:23:07,742	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:23:08,635	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:23:11,700	[INFO]	27	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:23:11,701	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,43 ----
              rows.add(row);
          }
  
+         int upleft, upright;
+ 
          return rows;
      }
  }

2020-12-18 10:23:12,574	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:23:12,575	[INFO]	29	SUCCESS	+4.0	
2020-12-18 10:23:12,575	[DEBUG]	
2020-12-18 10:23:12,576	[INFO]	30	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:23:12,577	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:23:12,577	[DEBUG]	
2020-12-18 10:23:15,638	[INFO]	32	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:23:15,639	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:23:15,640	[INFO]	33	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:23:15,640	[DEBUG]	
2020-12-18 10:23:15,641	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:23:15,641	[DEBUG]	
2020-12-18 10:23:18,778	[INFO]	35	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:23:18,778	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:23:21,801	[INFO]	36	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:23:21,802	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
-             for (int c=0; c<r; c++) {
-                 int upleft, upright;
-                 if (c > 0) {
-                     upleft = rows.get(r-1).get(c-1);
-                 } else {
-                     upleft = 0;
-                 }
-                 if (c < r) {
-                     upright = rows.get(r-1).get(c);
-                 } else {
-                     upright = 0;
-                 }
-                 row.add(upleft+upright);
-             }
              rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              rows.add(row);
+             
          }
  
          return rows;

2020-12-18 10:23:24,865	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:23:24,867	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:23:25,776	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:23:25,777	[INFO]	39	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:23:25,778	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:23:25,779	[INFO]	40	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:23:25,779	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:23:25,780	[INFO]	41	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:23:25,781	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:23:25,782	[INFO]	42	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:23:25,783	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:23:28,828	[INFO]	43	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:23:28,829	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:23:31,967	[INFO]	44	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:23:31,970	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 31,36 ****
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:23:35,039	[INFO]	45	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:23:35,040	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,26 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 31,36 ****
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:23:38,083	[INFO]	46	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:23:41,175	[INFO]	47	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:23:41,177	[INFO]	48	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:23:41,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,26 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 31,36 ****
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:23:44,304	[INFO]	49	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:23:44,305	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:23:44,306	[INFO]	50	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:23:44,307	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:23:44,308	[INFO]	51	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:23:44,308	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:23:44,309	[INFO]	52	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:23:44,309	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:23:44,310	[INFO]	53	SUCCESS	+4.0	
2020-12-18 10:23:44,310	[DEBUG]	
2020-12-18 10:23:47,353	[INFO]	54	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:23:47,354	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:23:47,354	[INFO]	55	SUCCESS	+4.0	
2020-12-18 10:23:47,355	[DEBUG]	
2020-12-18 10:23:48,284	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:23:51,386	[INFO]	57	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:23:51,388	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:23:51,390	[INFO]	58	SUCCESS	+4.0	
2020-12-18 10:23:51,390	[DEBUG]	
2020-12-18 10:23:54,424	[INFO]	59	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:23:54,424	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:23:54,425	[INFO]	60	SUCCESS	+4.0	
2020-12-18 10:23:54,425	[DEBUG]	
2020-12-18 10:23:55,188	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:23:56,070	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:23:56,972	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:23:57,865	[INFO]	64	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:23:58,738	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:23:59,653	[INFO]	66	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:24:00,544	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:24:00,545	[INFO]	68	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:24:00,546	[INFO]	69	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:24:00,547	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:24:00,547	[DEBUG]	
2020-12-18 10:24:01,456	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:24:04,600	[INFO]	72	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:24:04,600	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:24:04,601	[INFO]	73	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:24:04,602	[DEBUG]	
2020-12-18 10:24:04,602	[INFO]	74	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:24:04,603	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:24:04,603	[INFO]	75	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:24:04,604	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:24:05,457	[INFO]	76	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:24:05,459	[INFO]	77	SUCCESS	+4.0	
2020-12-18 10:24:05,460	[DEBUG]	
2020-12-18 10:24:08,664	[INFO]	78	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:24:11,738	[INFO]	79	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:24:11,739	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:24:12,470	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:24:12,472	[INFO]	81	SUCCESS	+4.0	
2020-12-18 10:24:12,472	[DEBUG]	
2020-12-18 10:24:13,374	[INFO]	82	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:24:16,435	[INFO]	83	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:24:16,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = rows.get(r-1).get(c);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:24:17,328	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:24:17,329	[INFO]	85	SUCCESS	+4.0	
2020-12-18 10:24:17,329	[DEBUG]	
2020-12-18 10:24:18,217	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:24:19,145	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:24:20,052	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:24:23,088	[INFO]	89	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:24:23,089	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:26,188	[INFO]	90	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:24:26,189	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:29,212	[INFO]	91	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:24:29,213	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,40 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:30,136	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:24:33,318	[INFO]	93	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:24:33,319	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,37 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 29,40 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:36,429	[INFO]	94	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:24:36,430	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 29,37 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 29,40 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:36,432	[INFO]	95	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:24:36,432	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,37 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 29,40 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
!                 rows.add(init);
              }
              rows.add(row);
          }

2020-12-18 10:24:39,532	[INFO]	96	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:24:39,533	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:24:40,457	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:24:43,641	[INFO]	98	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:24:43,642	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 29,34 ****
--- 29,37 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:24:46,711	[INFO]	99	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:24:46,712	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:24:49,795	[INFO]	100	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:24:49,796	[INFO]	101	SUCCESS	+4.0	
2020-12-18 10:24:49,797	[DEBUG]	
2020-12-18 10:24:52,842	[INFO]	102	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:24:52,843	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:24:52,844	[INFO]	103	SUCCESS	+4.0	
2020-12-18 10:24:52,844	[DEBUG]	
2020-12-18 10:24:53,773	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:24:54,656	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:24:54,657	[INFO]	106	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:24:54,657	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:24:54,658	[INFO]	107	SUCCESS	+4.0	
2020-12-18 10:24:54,658	[DEBUG]	
2020-12-18 10:24:57,764	[INFO]	108	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:25:00,845	[INFO]	109	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:25:00,846	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:25:00,846	[INFO]	110	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:25:00,847	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:25:00,848	[INFO]	111	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:25:00,848	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:25:00,849	[INFO]	112	SUCCESS	+4.0	
2020-12-18 10:25:00,849	[DEBUG]	
2020-12-18 10:25:01,725	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:25:02,628	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:25:03,525	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:25:06,576	[INFO]	116	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:25:06,577	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = rows.get(r-1).get(c);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:25:06,578	[INFO]	117	SUCCESS	+4.0	
2020-12-18 10:25:06,578	[DEBUG]	
2020-12-18 10:25:09,633	[INFO]	118	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:25:09,634	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 init.add(1);
              }
              rows.add(row);
          }

2020-12-18 10:25:10,517	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:25:10,518	[INFO]	120	SUCCESS	+4.0	
2020-12-18 10:25:10,519	[DEBUG]	
2020-12-18 10:25:11,410	[INFO]	121	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:25:14,599	[INFO]	122	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:25:14,600	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:25:14,601	[INFO]	123	SUCCESS	+4.0	
2020-12-18 10:25:14,601	[DEBUG]	
2020-12-18 10:25:15,505	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:25:16,408	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:25:17,144	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:25:18,048	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:25:18,788	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:25:21,838	[INFO]	129	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:25:21,839	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:25:21,840	[INFO]	130	SUCCESS	+4.0	
2020-12-18 10:25:21,840	[DEBUG]	
2020-12-18 10:25:24,915	[INFO]	131	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:25:24,916	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:25:25,667	[INFO]	132	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:25:25,668	[INFO]	133	SUCCESS	+4.0	
2020-12-18 10:25:25,668	[DEBUG]	
2020-12-18 10:25:26,552	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:25:29,630	[INFO]	135	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:25:29,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:25:32,741	[INFO]	136	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:25:32,744	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:25:32,748	[INFO]	137	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:25:32,749	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:25:36,124	[INFO]	138	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:25:36,127	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:37,372	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:25:37,374	[INFO]	140	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:25:37,375	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:40,941	[INFO]	141	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:25:40,942	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:44,042	[INFO]	142	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:25:44,043	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,39 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:44,044	[INFO]	143	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:25:44,045	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,37 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 21,39 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:47,224	[INFO]	144	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:25:47,225	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:48,085	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:25:48,837	[INFO]	146	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:25:51,929	[INFO]	147	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:25:51,931	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:51,934	[INFO]	148	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:25:51,935	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:54,964	[INFO]	149	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:25:54,966	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:25:58,052	[INFO]	150	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:25:58,053	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:01,202	[INFO]	151	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:26:01,205	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:02,116	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:26:05,229	[INFO]	153	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:05,230	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:06,124	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:09,313	[INFO]	155	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:09,314	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,37 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
!                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
!                     
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:10,248	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:13,565	[INFO]	157	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:13,566	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,28 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
--- 19,28 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
                      upleft = 0;
                  }
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:14,501	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:26:15,464	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:26:18,714	[INFO]	160	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:26:18,715	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:19,637	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:26:22,711	[INFO]	162	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:26:22,712	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:26:22,713	[INFO]	163	SUCCESS	+4.0	
2020-12-18 10:26:22,714	[DEBUG]	
2020-12-18 10:26:23,598	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:26:26,714	[INFO]	165	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:26:26,715	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,34 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:26:27,623	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:26:27,625	[INFO]	167	SUCCESS	+4.0	
2020-12-18 10:26:27,625	[DEBUG]	
2020-12-18 10:26:30,689	[INFO]	168	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:26:30,689	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:26:33,842	[INFO]	169	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:26:33,844	[INFO]	170	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:26:34,567	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:26:35,465	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:26:35,466	[INFO]	173	SUCCESS	+4.0	
2020-12-18 10:26:35,466	[DEBUG]	
2020-12-18 10:26:38,529	[INFO]	174	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:26:38,530	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:26:38,530	[INFO]	175	SUCCESS	+4.0	
2020-12-18 10:26:38,531	[DEBUG]	
2020-12-18 10:26:38,531	[INFO]	176	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:26:38,532	[DEBUG]	
2020-12-18 10:26:38,532	[INFO]	177	SUCCESS	+4.0	
2020-12-18 10:26:38,533	[DEBUG]	
2020-12-18 10:26:39,415	[INFO]	178	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:26:42,683	[INFO]	179	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:26:42,685	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:26:45,685	[INFO]	180	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:26:45,686	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:26:45,687	[INFO]	181	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:26:45,688	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:26:45,688	[INFO]	182	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:26:45,689	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:26:45,690	[INFO]	183	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:26:45,690	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:26:48,685	[INFO]	184	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:26:48,686	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:26:48,687	[INFO]	185	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:26:48,687	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:26:51,773	[INFO]	186	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:26:51,774	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:26:51,775	[INFO]	187	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:26:51,776	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:26:54,859	[INFO]	188	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:26:54,861	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:26:58,005	[INFO]	189	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:26:58,006	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:26:58,007	[INFO]	190	SUCCESS	+4.0	
2020-12-18 10:26:58,008	[DEBUG]	
2020-12-18 10:26:58,894	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:26:59,769	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:27:00,678	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:27:00,679	[INFO]	194	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:27:00,680	[INFO]	195	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:27:01,583	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:27:02,496	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:27:03,413	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:27:04,193	[INFO]	199	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:27:05,090	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:27:05,092	[INFO]	201	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:27:05,092	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:27:05,992	[INFO]	202	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:27:09,099	[INFO]	203	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:27:09,994	[INFO]	204	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:27:09,995	[INFO]	205	SUCCESS	+4.0	
2020-12-18 10:27:09,995	[DEBUG]	
2020-12-18 10:27:10,888	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:27:10,890	[INFO]	207	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:27:13,940	[INFO]	208	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:27:13,941	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:27:13,942	[INFO]	209	SUCCESS	+4.0	
2020-12-18 10:27:13,942	[DEBUG]	
2020-12-18 10:27:17,064	[INFO]	210	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:27:17,065	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:27:17,904	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:27:17,905	[INFO]	212	SUCCESS	+4.0	
2020-12-18 10:27:17,905	[DEBUG]	
2020-12-18 10:27:17,906	[INFO]	213	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:27:17,906	[DEBUG]	
2020-12-18 10:27:18,808	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:27:18,809	[INFO]	215	SUCCESS	+4.0	
2020-12-18 10:27:18,809	[DEBUG]	
2020-12-18 10:27:19,714	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:27:20,618	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:27:21,527	[INFO]	218	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:27:21,529	[INFO]	219	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:27:21,530	[DEBUG]	
2020-12-18 10:27:22,274	[INFO]	220	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:27:22,277	[INFO]	221	SUCCESS	+4.0	
2020-12-18 10:27:22,277	[DEBUG]	
2020-12-18 10:27:25,347	[INFO]	222	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:27:25,348	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:27:28,375	[INFO]	223	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:27:29,247	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:27:29,249	[INFO]	225	SUCCESS	+4.0	
2020-12-18 10:27:29,249	[DEBUG]	
2020-12-18 10:27:30,180	[INFO]	226	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:27:33,298	[INFO]	227	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:27:33,299	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:27:33,300	[INFO]	228	SUCCESS	+4.0	
2020-12-18 10:27:33,300	[DEBUG]	
2020-12-18 10:27:34,185	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:27:37,342	[INFO]	230	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:27:37,343	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:27:37,344	[INFO]	231	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:27:37,344	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:27:37,345	[INFO]	232	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:27:37,345	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:27:38,231	[INFO]	233	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:27:38,232	[INFO]	234	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:27:38,233	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:27:41,413	[INFO]	235	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:27:41,414	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:42,250	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:27:45,355	[INFO]	237	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:27:46,266	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:27:49,391	[INFO]	239	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:27:49,393	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,395	[INFO]	240	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:27:49,396	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,398	[INFO]	241	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:27:49,399	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,402	[INFO]	242	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:27:49,403	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,407	[INFO]	243	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:27:49,408	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,411	[INFO]	244	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:27:49,413	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,415	[INFO]	245	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:27:49,417	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,421	[INFO]	246	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:27:49,423	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,428	[INFO]	247	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:27:49,429	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,432	[INFO]	248	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:27:49,434	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:49,437	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:27:49,439	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:50,484	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:27:50,486	[INFO]	251	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:27:50,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,629	[INFO]	252	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:27:53,631	[INFO]	253	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:27:53,632	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,633	[INFO]	254	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:27:53,634	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,636	[INFO]	255	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:27:53,636	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,638	[INFO]	256	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:53,639	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,640	[INFO]	257	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:53,641	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:53,643	[INFO]	258	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:53,644	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:54,484	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:27:54,486	[INFO]	260	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:54,486	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:54,487	[INFO]	261	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:27:54,488	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:55,391	[INFO]	262	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:27:55,395	[INFO]	263	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:55,396	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,39 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 17,26 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:56,286	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:27:56,288	[INFO]	265	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:56,289	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:56,290	[INFO]	266	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:56,291	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:56,292	[INFO]	267	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:27:56,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:56,294	[INFO]	268	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:27:56,295	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:27:59,446	[INFO]	269	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:27:59,447	[INFO]	270	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:27:59,448	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:28:00,291	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:28:00,293	[INFO]	272	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:28:00,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             
          }
  
          return rows;

2020-12-18 10:28:00,294	[INFO]	273	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:28:00,294	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:00,296	[INFO]	274	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:28:00,296	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:00,297	[INFO]	275	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:28:00,297	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:00,298	[INFO]	276	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:00,299	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:01,192	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:01,194	[INFO]	278	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:01,194	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:16,785	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:28:16,787	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:16,788	[INFO]	281	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:16,788	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:16,789	[INFO]	282	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:16,790	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:17,715	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:17,716	[INFO]	284	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:17,717	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:17,718	[INFO]	285	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:17,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:17,719	[INFO]	286	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:28:17,719	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:17,720	[INFO]	287	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:28:17,721	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:17,722	[INFO]	288	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:28:17,723	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,743	[INFO]	289	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:28:20,745	[INFO]	290	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:28:20,746	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,747	[INFO]	291	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:28:20,748	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,749	[INFO]	292	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:28:20,750	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,751	[INFO]	293	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:28:20,752	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,753	[INFO]	294	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:28:20,754	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:28:20,755	[INFO]	295	SUCCESS	+4.0	
2020-12-18 10:28:20,756	[DEBUG]	
2020-12-18 10:28:23,850	[INFO]	296	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:28:23,851	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:28:23,852	[INFO]	297	SUCCESS	+4.0	
2020-12-18 10:28:23,852	[DEBUG]	
2020-12-18 10:28:26,848	[INFO]	298	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:28:26,849	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:28:26,850	[INFO]	299	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:28:26,851	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:28:29,933	[INFO]	300	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:29,934	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 10:28:30,840	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:28:30,842	[INFO]	302	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:28:30,843	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 10:28:30,844	[INFO]	303	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:28:30,845	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 10:28:30,846	[INFO]	304	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:28:30,847	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 10:28:30,848	[INFO]	305	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:28:30,849	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:28:30,850	[INFO]	306	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:28:30,850	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:28:33,952	[INFO]	307	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:28:33,954	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,33 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:28:37,065	[INFO]	308	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:28:37,066	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:28:40,177	[INFO]	309	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:28:43,407	[INFO]	310	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:28:43,409	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:28:44,293	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:28:45,190	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:28:45,191	[INFO]	313	SUCCESS	+4.0	
2020-12-18 10:28:45,192	[DEBUG]	
2020-12-18 10:28:46,105	[INFO]	314	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:28:49,189	[INFO]	315	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:28:49,190	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:28:49,190	[INFO]	==== END ====
2020-12-18 10:28:49,190	[INFO]	Reason: target fitness reached
2020-12-18 10:28:49,191	[INFO]	
2020-12-18 10:28:49,191	[INFO]	========== EPOCH 10 ==========
2020-12-18 10:28:49,192	[INFO]	==== WARMUP ====
2020-12-18 10:28:52,272	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:28:52,272	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:28:55,304	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:28:55,305	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:28:58,335	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:28:58,336	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:29:01,574	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:29:01,574	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:29:01,574	[INFO]	==== START ====
2020-12-18 10:29:04,579	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:29:04,580	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:29:05,457	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:29:05,458	[INFO]	3	SUCCESS	+4.0	
2020-12-18 10:29:05,459	[DEBUG]	
2020-12-18 10:29:05,461	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:29:05,462	[DEBUG]	
2020-12-18 10:29:05,463	[INFO]	5	SUCCESS	+4.0	
2020-12-18 10:29:05,463	[DEBUG]	
2020-12-18 10:29:08,576	[INFO]	6	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:29:09,501	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:29:12,591	[INFO]	8	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:29:12,592	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:29:15,645	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:29:15,646	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:16,377	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:29:19,456	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:29:19,457	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,33 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:22,600	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:29:22,601	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:25,627	[INFO]	13	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:29:25,628	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,38 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 10:29:26,391	[INFO]	14	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:29:26,395	[INFO]	15	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:29:26,397	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:29,500	[INFO]	16	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:29:29,501	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:29,503	[INFO]	17	SUCCESS	+4.0	
2020-12-18 10:29:29,503	[DEBUG]	
2020-12-18 10:29:32,611	[INFO]	18	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:29:32,611	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:29:33,415	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:29:33,418	[INFO]	20	SUCCESS	+4.0	
2020-12-18 10:29:33,419	[DEBUG]	
2020-12-18 10:29:34,290	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:29:34,292	[INFO]	22	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:29:34,292	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:29:34,293	[INFO]	23	SUCCESS	+4.0	
2020-12-18 10:29:34,294	[DEBUG]	
2020-12-18 10:29:37,479	[INFO]	24	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:29:37,480	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(row);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:29:37,481	[INFO]	25	SUCCESS	+4.0	
2020-12-18 10:29:37,482	[DEBUG]	
2020-12-18 10:29:37,483	[INFO]	26	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:29:37,484	[DEBUG]	
2020-12-18 10:29:40,518	[INFO]	27	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:29:40,519	[INFO]	28	SUCCESS	+4.0	
2020-12-18 10:29:40,519	[DEBUG]	
2020-12-18 10:29:43,597	[INFO]	29	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:29:43,598	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upright = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:43,599	[INFO]	30	SUCCESS	+4.0	
2020-12-18 10:29:43,599	[DEBUG]	
2020-12-18 10:29:44,481	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:29:47,528	[INFO]	32	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:29:47,529	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:29:47,531	[INFO]	33	SUCCESS	+4.0	
2020-12-18 10:29:47,532	[DEBUG]	
2020-12-18 10:29:47,534	[INFO]	34	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:29:47,535	[DEBUG]	
2020-12-18 10:29:48,442	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:29:48,444	[INFO]	36	SUCCESS	+4.0	
2020-12-18 10:29:48,444	[DEBUG]	
2020-12-18 10:29:51,490	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:29:51,491	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:54,705	[INFO]	38	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:29:54,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:29:57,735	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:29:57,736	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:30:00,819	[INFO]	40	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:30:00,820	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,25 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:30:00,820	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:30:00,821	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:30:00,822	[INFO]	42	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:30:00,822	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:30:00,823	[INFO]	43	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:30:00,823	[DEBUG]	
2020-12-18 10:30:00,824	[INFO]	44	SUCCESS	+4.0	
2020-12-18 10:30:00,824	[DEBUG]	
2020-12-18 10:30:03,878	[INFO]	45	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:30:03,880	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,28 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
                      upleft = 0;
                  }

2020-12-18 10:30:03,881	[INFO]	46	SUCCESS	+4.0	
2020-12-18 10:30:03,882	[DEBUG]	
2020-12-18 10:30:04,793	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:30:05,690	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:30:06,612	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:30:09,709	[INFO]	50	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:30:09,711	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:30:09,714	[INFO]	51	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:30:09,715	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:30:09,717	[INFO]	52	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:30:09,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:30:10,625	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:30:10,629	[INFO]	54	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:30:10,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:10,633	[INFO]	55	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:30:10,634	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:10,636	[INFO]	56	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:30:10,637	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:30:10,639	[INFO]	57	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:30:10,640	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:30:10,642	[INFO]	58	SUCCESS	+4.0	
2020-12-18 10:30:10,642	[DEBUG]	
2020-12-18 10:30:10,644	[INFO]	59	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:30:10,645	[DEBUG]	
2020-12-18 10:30:10,647	[INFO]	60	SUCCESS	+4.0	
2020-12-18 10:30:10,648	[DEBUG]	
2020-12-18 10:30:11,526	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:30:12,425	[INFO]	62	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:30:15,524	[INFO]	63	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:30:15,525	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:30:16,443	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:30:16,444	[INFO]	65	SUCCESS	+4.0	
2020-12-18 10:30:16,444	[DEBUG]	
2020-12-18 10:30:19,525	[INFO]	66	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:30:19,526	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:19,526	[INFO]	67	SUCCESS	+4.0	
2020-12-18 10:30:19,527	[DEBUG]	
2020-12-18 10:30:22,529	[INFO]	68	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:30:22,531	[INFO]	69	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:30:22,531	[DEBUG]	
2020-12-18 10:30:23,461	[INFO]	70	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:30:24,331	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:30:25,115	[INFO]	72	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:30:26,003	[INFO]	73	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:30:26,004	[INFO]	74	SUCCESS	+4.0	
2020-12-18 10:30:26,005	[DEBUG]	
2020-12-18 10:30:29,162	[INFO]	75	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:30:29,163	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:29,164	[INFO]	76	SUCCESS	+4.0	
2020-12-18 10:30:29,164	[DEBUG]	
2020-12-18 10:30:29,165	[INFO]	77	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:30:29,165	[DEBUG]	
2020-12-18 10:30:29,166	[INFO]	78	SUCCESS	+4.0	
2020-12-18 10:30:29,166	[DEBUG]	
2020-12-18 10:30:30,050	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:30:30,953	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:30:31,836	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:30:34,939	[INFO]	82	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:30:34,939	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:30:36,036	[INFO]	83	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:30:36,037	[INFO]	84	SUCCESS	+4.0	
2020-12-18 10:30:36,037	[DEBUG]	
2020-12-18 10:30:36,992	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:30:36,994	[INFO]	86	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:30:36,995	[DEBUG]	
2020-12-18 10:30:36,997	[INFO]	87	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:30:36,997	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:36,998	[INFO]	88	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:30:36,999	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:37,001	[INFO]	89	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:30:37,002	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:37,910	[INFO]	90	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:30:37,912	[INFO]	91	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:30:37,913	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:30:37,914	[INFO]	92	SUCCESS	+4.0	
2020-12-18 10:30:37,914	[DEBUG]	
2020-12-18 10:30:41,089	[INFO]	93	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:30:41,090	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:41,091	[INFO]	94	SUCCESS	+4.0	
2020-12-18 10:30:41,091	[DEBUG]	
2020-12-18 10:30:41,092	[INFO]	95	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:30:41,093	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:30:41,093	[INFO]	96	SUCCESS	+4.0	
2020-12-18 10:30:41,093	[DEBUG]	
2020-12-18 10:30:42,025	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:30:45,182	[INFO]	98	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:30:45,183	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:48,286	[INFO]	99	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:30:48,288	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:30:48,290	[INFO]	100	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:30:48,291	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:49,189	[INFO]	101	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:30:49,191	[INFO]	102	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:30:49,191	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:49,192	[INFO]	103	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:30:49,192	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:30:49,193	[INFO]	104	SUCCESS	+4.0	
2020-12-18 10:30:49,193	[DEBUG]	
2020-12-18 10:30:50,105	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:30:53,234	[INFO]	106	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:30:53,235	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:30:54,147	[INFO]	107	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:30:54,148	[INFO]	108	SUCCESS	+4.0	
2020-12-18 10:30:54,149	[DEBUG]	
2020-12-18 10:30:55,036	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:30:55,986	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:30:56,898	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:30:57,816	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:30:58,731	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:31:01,843	[INFO]	114	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:31:01,844	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:31:01,845	[INFO]	115	SUCCESS	+4.0	
2020-12-18 10:31:01,845	[DEBUG]	
2020-12-18 10:31:01,847	[INFO]	116	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:31:01,847	[DEBUG]	
2020-12-18 10:31:01,848	[INFO]	117	SUCCESS	+4.0	
2020-12-18 10:31:01,848	[DEBUG]	
2020-12-18 10:31:02,740	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:31:05,845	[INFO]	119	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:31:05,846	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:31:05,847	[INFO]	120	SUCCESS	+4.0	
2020-12-18 10:31:05,848	[DEBUG]	
2020-12-18 10:31:06,777	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:31:09,839	[INFO]	122	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:31:09,840	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:31:09,841	[INFO]	123	SUCCESS	+4.0	
2020-12-18 10:31:09,841	[DEBUG]	
2020-12-18 10:31:10,778	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:31:10,782	[INFO]	125	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:31:10,783	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:31:13,857	[INFO]	126	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:31:13,858	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,32 ****
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 24,33 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     upright = rows.get(r-1).get(c);
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:31:13,859	[INFO]	127	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:31:13,859	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:31:13,860	[INFO]	128	SUCCESS	+4.0	
2020-12-18 10:31:13,860	[DEBUG]	
2020-12-18 10:31:16,941	[INFO]	129	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:31:16,942	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:31:16,944	[INFO]	130	SUCCESS	+4.0	
2020-12-18 10:31:16,944	[DEBUG]	
2020-12-18 10:31:20,002	[INFO]	131	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:31:20,004	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
+             rows.add(init);
              rows.add(row);
          }
  

2020-12-18 10:31:20,005	[INFO]	132	SUCCESS	+4.0	
2020-12-18 10:31:20,006	[DEBUG]	
2020-12-18 10:31:20,930	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:31:23,961	[INFO]	134	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:31:23,962	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:23,963	[INFO]	135	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:31:23,963	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:23,964	[INFO]	136	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:31:23,965	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:24,888	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:31:24,892	[INFO]	138	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:31:24,894	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:24,898	[INFO]	139	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:31:24,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:24,903	[INFO]	140	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:31:24,905	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:24,908	[INFO]	141	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:31:24,909	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:25,795	[INFO]	142	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:31:26,704	[INFO]	143	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:31:27,599	[INFO]	144	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:31:30,683	[INFO]	145	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:31:30,685	[INFO]	146	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:31:30,685	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:31,536	[INFO]	147	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:31:31,537	[INFO]	148	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:31:31,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:31,539	[INFO]	149	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:31:31,539	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:31,540	[INFO]	150	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:31:31,540	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:32,436	[INFO]	151	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:31:33,352	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:31:33,353	[INFO]	153	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:31:33,354	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:33,355	[INFO]	154	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:31:33,355	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,285	[INFO]	155	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:31:34,286	[INFO]	156	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:31:34,287	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,288	[INFO]	157	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:31:34,288	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,289	[INFO]	158	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:31:34,290	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,291	[INFO]	159	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:31:34,291	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,292	[INFO]	160	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:31:34,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,293	[INFO]	161	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:31:34,294	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,295	[INFO]	162	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:31:34,295	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,296	[INFO]	163	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:31:34,297	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:34,298	[INFO]	164	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:31:34,298	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:35,176	[INFO]	165	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:31:35,177	[INFO]	166	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:31:35,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:35,179	[INFO]	167	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:31:35,179	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:35,180	[INFO]	168	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:31:35,180	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:31:35,181	[INFO]	169	SUCCESS	+4.0	
2020-12-18 10:31:35,181	[DEBUG]	
2020-12-18 10:31:36,105	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:31:37,023	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:31:37,930	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:31:38,850	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:31:42,125	[INFO]	174	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:31:42,127	[INFO]	175	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:31:42,127	[DEBUG]	
2020-12-18 10:31:43,076	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:31:43,078	[INFO]	177	SUCCESS	+4.0	
2020-12-18 10:31:43,078	[DEBUG]	
2020-12-18 10:31:46,167	[INFO]	178	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:31:46,168	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:31:47,081	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:31:47,082	[INFO]	180	SUCCESS	+4.0	
2020-12-18 10:31:47,082	[DEBUG]	
2020-12-18 10:31:47,976	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:31:47,977	[INFO]	182	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:31:47,978	[DEBUG]	
2020-12-18 10:31:47,978	[INFO]	183	SUCCESS	+4.0	
2020-12-18 10:31:47,979	[DEBUG]	
2020-12-18 10:31:51,147	[INFO]	184	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:31:51,148	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:31:51,994	[INFO]	185	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:31:51,996	[INFO]	186	SUCCESS	+4.0	
2020-12-18 10:31:51,996	[DEBUG]	
2020-12-18 10:31:55,024	[INFO]	187	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:31:55,025	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 10:31:55,026	[INFO]	188	SUCCESS	+4.0	
2020-12-18 10:31:55,026	[DEBUG]	
2020-12-18 10:31:58,158	[INFO]	189	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:31:59,057	[INFO]	190	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:31:59,979	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:32:00,870	[INFO]	192	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:32:01,618	[INFO]	193	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:32:02,496	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:32:03,400	[INFO]	195	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:06,498	[INFO]	196	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:32:06,499	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:32:07,401	[INFO]	197	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:32:07,402	[INFO]	198	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:32:07,403	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:32:07,403	[INFO]	199	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:32:07,404	[DEBUG]	
2020-12-18 10:32:08,316	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:32:08,318	[INFO]	201	SUCCESS	+4.0	
2020-12-18 10:32:08,319	[DEBUG]	
2020-12-18 10:32:08,322	[INFO]	202	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:32:09,241	[INFO]	203	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:32:10,013	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:32:13,042	[INFO]	205	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:32:13,043	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:13,889	[INFO]	206	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:32:13,890	[INFO]	207	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:32:13,890	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,743	[INFO]	208	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:32:14,744	[INFO]	209	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:32:14,745	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,745	[INFO]	210	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:14,746	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,747	[INFO]	211	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:32:14,747	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,748	[INFO]	212	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:32:14,749	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,750	[INFO]	213	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:32:14,750	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:14,751	[INFO]	214	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:32:14,751	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:15,648	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:32:15,650	[INFO]	216	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:32:15,651	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:15,652	[INFO]	217	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:32:15,653	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:15,654	[INFO]	218	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:32:15,654	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:32:15,655	[INFO]	219	SUCCESS	+4.0	
2020-12-18 10:32:15,656	[DEBUG]	
2020-12-18 10:32:16,562	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:32:17,478	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:32:18,360	[INFO]	222	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:32:18,361	[INFO]	223	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:32:18,361	[DEBUG]	
2020-12-18 10:32:19,266	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:32:19,268	[INFO]	225	SUCCESS	+4.0	
2020-12-18 10:32:19,268	[DEBUG]	
2020-12-18 10:32:22,300	[INFO]	226	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:32:22,301	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:32:22,302	[INFO]	227	SUCCESS	+4.0	
2020-12-18 10:32:22,302	[DEBUG]	
2020-12-18 10:32:23,037	[INFO]	228	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:32:26,079	[INFO]	229	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:32:26,080	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:32:26,081	[INFO]	230	SUCCESS	+4.0	
2020-12-18 10:32:26,081	[DEBUG]	
2020-12-18 10:32:26,962	[INFO]	231	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:32:27,724	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:32:28,623	[INFO]	233	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:32:31,697	[INFO]	234	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:32:31,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:32:32,621	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:32:32,622	[INFO]	236	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:32:32,623	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:32:33,549	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:32:33,552	[INFO]	238	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:32:33,553	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:32:33,555	[INFO]	239	SUCCESS	+4.0	
2020-12-18 10:32:33,556	[DEBUG]	
2020-12-18 10:32:34,468	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:32:37,558	[INFO]	241	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:32:37,559	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:32:40,613	[INFO]	242	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:32:40,614	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:32:43,805	[INFO]	243	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:32:44,678	[INFO]	244	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:32:45,590	[INFO]	245	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:45,592	[INFO]	246	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:32:45,592	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:32:45,593	[INFO]	247	SUCCESS	+4.0	
2020-12-18 10:32:45,594	[DEBUG]	
2020-12-18 10:32:45,594	[INFO]	248	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:32:45,595	[DEBUG]	
2020-12-18 10:32:45,595	[INFO]	249	SUCCESS	+4.0	
2020-12-18 10:32:45,596	[DEBUG]	
2020-12-18 10:32:45,596	[INFO]	250	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:45,597	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:45,598	[INFO]	251	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:32:45,598	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:45,599	[INFO]	252	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:32:45,599	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:45,600	[INFO]	253	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:45,601	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:46,502	[INFO]	254	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:32:46,503	[INFO]	255	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:46,504	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:46,505	[INFO]	256	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:32:46,505	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:46,506	[INFO]	257	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:46,506	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:46,507	[INFO]	258	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:46,508	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:47,413	[INFO]	259	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:32:47,415	[INFO]	260	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:47,415	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:50,471	[INFO]	261	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:32:51,405	[INFO]	262	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:52,276	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:32:52,277	[INFO]	264	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:32:52,278	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:52,279	[INFO]	265	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:32:52,280	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:52,281	[INFO]	266	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:32:52,282	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:53,184	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:32:53,186	[INFO]	268	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:32:53,186	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:32:53,187	[INFO]	269	SUCCESS	+4.0	
2020-12-18 10:32:53,187	[DEBUG]	
2020-12-18 10:32:53,189	[INFO]	270	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:32:56,310	[INFO]	271	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:32:57,204	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:32:57,206	[INFO]	273	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:32:57,206	[DEBUG]	
2020-12-18 10:32:57,207	[INFO]	274	SUCCESS	+4.0	
2020-12-18 10:32:57,207	[DEBUG]	
2020-12-18 10:32:58,148	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:32:58,914	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:32:59,800	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:33:02,916	[INFO]	278	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:33:02,917	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:33:02,918	[INFO]	279	SUCCESS	+4.0	
2020-12-18 10:33:02,918	[DEBUG]	
2020-12-18 10:33:03,823	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:33:04,713	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:05,627	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:33:08,795	[INFO]	283	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:33:08,796	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:33:08,797	[INFO]	284	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:33:08,798	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:33:08,799	[INFO]	285	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:33:08,799	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:33:08,800	[INFO]	286	SUCCESS	+4.0	
2020-12-18 10:33:08,800	[DEBUG]	
2020-12-18 10:33:09,690	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:33:10,592	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:33:11,498	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:33:11,500	[INFO]	290	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:11,500	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:11,501	[INFO]	291	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:33:11,501	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:11,502	[INFO]	292	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:11,502	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:11,503	[INFO]	293	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:33:11,503	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:11,504	[INFO]	294	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:11,504	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:12,373	[INFO]	295	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:33:12,374	[INFO]	296	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:33:12,375	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:12,375	[INFO]	297	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:12,376	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:12,376	[INFO]	298	SUCCESS	+4.0	
2020-12-18 10:33:12,377	[DEBUG]	
2020-12-18 10:33:13,302	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:33:16,388	[INFO]	300	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:33:16,390	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:33:16,392	[INFO]	301	SUCCESS	+4.0	
2020-12-18 10:33:16,393	[DEBUG]	
2020-12-18 10:33:19,446	[INFO]	302	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:33:19,448	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:33:19,451	[INFO]	303	SUCCESS	+4.0	
2020-12-18 10:33:19,452	[DEBUG]	
2020-12-18 10:33:20,336	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:33:21,233	[INFO]	305	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:33:22,148	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:33:22,149	[INFO]	307	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:33:22,150	[INFO]	308	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:33:22,151	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:33:25,286	[INFO]	309	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:33:25,287	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:33:28,372	[INFO]	310	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:33:28,373	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:33:28,374	[INFO]	311	SUCCESS	+4.0	
2020-12-18 10:33:28,375	[DEBUG]	
2020-12-18 10:33:29,244	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:33:29,246	[INFO]	313	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:33:29,247	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:33:29,250	[INFO]	314	SUCCESS	+4.0	
2020-12-18 10:33:29,251	[DEBUG]	
2020-12-18 10:33:29,252	[INFO]	315	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:33:29,252	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:33:29,253	[INFO]	316	SUCCESS	+4.0	
2020-12-18 10:33:29,254	[DEBUG]	
2020-12-18 10:33:30,168	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:33:33,317	[INFO]	318	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:33:33,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:33:33,319	[INFO]	319	SUCCESS	+4.0	
2020-12-18 10:33:33,319	[DEBUG]	
2020-12-18 10:33:34,218	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:33:37,308	[INFO]	321	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:33:37,309	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:33:37,309	[INFO]	==== END ====
2020-12-18 10:33:37,309	[INFO]	Reason: target fitness reached
2020-12-18 10:33:37,310	[INFO]	
2020-12-18 10:33:37,310	[INFO]	========== EPOCH 11 ==========
2020-12-18 10:33:37,310	[INFO]	==== WARMUP ====
2020-12-18 10:33:40,396	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:33:40,396	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:33:43,576	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:33:43,576	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:33:46,686	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:33:46,686	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:33:49,754	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:33:49,754	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:33:49,754	[INFO]	==== START ====
2020-12-18 10:33:50,634	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:33:53,669	[INFO]	2	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:33:54,585	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:33:55,482	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:33:56,392	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:33:59,485	[INFO]	6	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:33:59,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:33:59,488	[INFO]	7	SUCCESS	+4.0	
2020-12-18 10:33:59,488	[DEBUG]	
2020-12-18 10:34:00,213	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:34:03,345	[INFO]	9	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:34:06,491	[INFO]	10	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:34:06,491	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:34:06,492	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:34:06,493	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:34:06,493	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:34:06,494	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:34:07,342	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:34:10,491	[INFO]	14	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:34:10,492	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:34:11,354	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:34:12,277	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:34:15,423	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:34:15,423	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:34:16,309	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:34:17,221	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:34:18,135	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:34:18,136	[INFO]	21	SUCCESS	+4.0	
2020-12-18 10:34:18,136	[DEBUG]	
2020-12-18 10:34:19,060	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:34:19,807	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:34:22,791	[INFO]	24	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:34:22,792	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:34:23,716	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:34:23,717	[INFO]	26	SUCCESS	+4.0	
2020-12-18 10:34:23,718	[DEBUG]	
2020-12-18 10:34:26,764	[INFO]	27	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:34:26,765	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:34:26,766	[INFO]	28	SUCCESS	+4.0	
2020-12-18 10:34:26,766	[DEBUG]	
2020-12-18 10:34:27,676	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:34:28,586	[INFO]	30	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:34:29,520	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:34:32,597	[INFO]	32	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:34:33,491	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:34:36,642	[INFO]	34	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:34:36,643	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:34:36,644	[INFO]	35	SUCCESS	+4.0	
2020-12-18 10:34:36,644	[DEBUG]	
2020-12-18 10:34:37,539	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:34:38,434	[INFO]	37	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:34:38,436	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:34:39,357	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:34:40,286	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:34:40,289	[INFO]	41	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:34:43,355	[INFO]	42	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:34:43,357	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:34:43,359	[INFO]	43	SUCCESS	+4.0	
2020-12-18 10:34:43,360	[DEBUG]	
2020-12-18 10:34:44,251	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:34:47,336	[INFO]	45	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:34:47,337	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             rows.add(init);
          }
  
          return rows;

2020-12-18 10:34:47,338	[INFO]	46	SUCCESS	+4.0	
2020-12-18 10:34:47,338	[DEBUG]	
2020-12-18 10:34:47,339	[INFO]	47	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:34:48,232	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:34:49,149	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:34:50,043	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:34:50,045	[INFO]	51	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:34:50,953	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:34:54,043	[INFO]	53	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:34:54,044	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:34:54,045	[INFO]	54	SUCCESS	+4.0	
2020-12-18 10:34:54,045	[DEBUG]	
2020-12-18 10:34:57,092	[INFO]	55	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:34:57,094	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:35:00,226	[INFO]	56	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:35:00,227	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:35:01,116	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:35:04,239	[INFO]	58	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:35:04,240	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:35:04,240	[INFO]	59	SUCCESS	+4.0	
2020-12-18 10:35:04,241	[DEBUG]	
2020-12-18 10:35:07,248	[INFO]	60	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:35:07,249	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:35:07,251	[INFO]	61	SUCCESS	+4.0	
2020-12-18 10:35:07,252	[DEBUG]	
2020-12-18 10:35:07,255	[INFO]	62	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:35:07,255	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:35:07,257	[INFO]	63	SUCCESS	+4.0	
2020-12-18 10:35:07,257	[DEBUG]	
2020-12-18 10:35:10,292	[INFO]	64	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:35:13,363	[INFO]	65	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:35:13,365	[INFO]	66	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:35:13,365	[DEBUG]	
2020-12-18 10:35:13,366	[INFO]	67	SUCCESS	+4.0	
2020-12-18 10:35:13,366	[DEBUG]	
2020-12-18 10:35:16,561	[INFO]	68	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:35:16,563	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:35:16,564	[INFO]	69	SUCCESS	+4.0	
2020-12-18 10:35:16,564	[DEBUG]	
2020-12-18 10:35:19,571	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:35:19,572	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:35:19,573	[INFO]	71	SUCCESS	+4.0	
2020-12-18 10:35:19,573	[DEBUG]	
2020-12-18 10:35:22,703	[INFO]	72	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:35:22,703	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:25,751	[INFO]	73	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:35:25,752	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:25,753	[INFO]	74	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:35:25,754	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:28,900	[INFO]	75	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:35:28,901	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,37 ****
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 27,37 ----
                      upleft = 0;
                  }
                  if (c < r) {
!                     rows.add(init);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:29,804	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:35:29,805	[INFO]	77	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:35:29,805	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:32,869	[INFO]	78	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:35:32,870	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,38 ----
                  } else {
                      upright = 0;
                  }
!                 init.add(1);
!                 
              }
              rows.add(row);
          }

2020-12-18 10:35:33,774	[INFO]	79	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:35:34,697	[INFO]	80	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:35:38,841	[INFO]	81	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:35:38,842	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 init.add(1);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:35:39,889	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:35:41,050	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:35:41,051	[INFO]	84	SUCCESS	+4.0	
2020-12-18 10:35:41,052	[DEBUG]	
2020-12-18 10:35:44,863	[INFO]	85	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:35:44,864	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:35:48,093	[INFO]	86	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:35:48,094	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:35:48,095	[INFO]	87	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:35:48,095	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:35:48,096	[INFO]	88	SUCCESS	+4.0	
2020-12-18 10:35:48,096	[DEBUG]	
2020-12-18 10:35:49,015	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:35:52,111	[INFO]	90	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:35:52,112	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:35:52,113	[INFO]	==== END ====
2020-12-18 10:35:52,113	[INFO]	Reason: target fitness reached
2020-12-18 10:35:52,114	[INFO]	
2020-12-18 10:35:52,114	[INFO]	========== EPOCH 12 ==========
2020-12-18 10:35:52,115	[INFO]	==== WARMUP ====
2020-12-18 10:35:55,251	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:35:55,252	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:35:58,304	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:35:58,304	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:01,389	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:36:01,390	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:04,400	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:36:04,400	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:04,401	[INFO]	==== START ====
2020-12-18 10:36:07,514	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:36:07,515	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:36:07,516	[INFO]	2	SUCCESS	+4.0	
2020-12-18 10:36:07,517	[DEBUG]	
2020-12-18 10:36:10,681	[INFO]	3	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:36:11,535	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:36:12,316	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:36:13,056	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:36:16,104	[INFO]	7	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:36:16,105	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:36:16,106	[INFO]	8	SUCCESS	+4.0	
2020-12-18 10:36:16,106	[DEBUG]	
2020-12-18 10:36:19,153	[INFO]	9	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:36:19,155	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:36:22,245	[INFO]	10	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:36:22,247	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,40 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c <= 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 10:36:25,276	[INFO]	11	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:36:26,023	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:36:26,025	[INFO]	13	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:36:26,025	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:36:26,026	[INFO]	14	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:36:26,027	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:36:26,027	[INFO]	15	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:36:26,028	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
          }
  
          return rows;

2020-12-18 10:36:26,029	[INFO]	16	SUCCESS	+4.0	
2020-12-18 10:36:26,029	[DEBUG]	
2020-12-18 10:36:29,176	[INFO]	17	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:36:29,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:36:29,179	[INFO]	18	SUCCESS	+4.0	
2020-12-18 10:36:29,180	[DEBUG]	
2020-12-18 10:36:32,290	[INFO]	19	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:36:32,291	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:36:32,291	[INFO]	20	SUCCESS	+4.0	
2020-12-18 10:36:32,292	[DEBUG]	
2020-12-18 10:36:32,292	[INFO]	21	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:36:32,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:36:33,171	[INFO]	22	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:36:33,172	[INFO]	23	SUCCESS	+4.0	
2020-12-18 10:36:33,173	[DEBUG]	
2020-12-18 10:36:36,295	[INFO]	24	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:36:36,297	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:36:36,298	[INFO]	==== END ====
2020-12-18 10:36:36,298	[INFO]	Reason: target fitness reached
2020-12-18 10:36:36,301	[INFO]	
2020-12-18 10:36:36,301	[INFO]	========== EPOCH 13 ==========
2020-12-18 10:36:36,302	[INFO]	==== WARMUP ====
2020-12-18 10:36:39,451	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:36:39,452	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:42,613	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:36:42,613	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:45,723	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:36:45,723	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:48,844	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:36:48,844	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:36:48,845	[INFO]	==== START ====
2020-12-18 10:36:51,804	[INFO]	1	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:36:54,904	[INFO]	2	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:36:54,906	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(init);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:36:54,908	[INFO]	3	SUCCESS	+4.0	
2020-12-18 10:36:54,909	[DEBUG]	
2020-12-18 10:36:58,002	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:36:58,004	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:36:58,878	[INFO]	5	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:36:58,879	[INFO]	6	SUCCESS	+4.0	
2020-12-18 10:36:58,880	[DEBUG]	
2020-12-18 10:36:59,792	[INFO]	7	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:37:00,691	[INFO]	8	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:37:03,772	[INFO]	9	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:37:03,774	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:37:03,776	[INFO]	10	SUCCESS	+4.0	
2020-12-18 10:37:03,777	[DEBUG]	
2020-12-18 10:37:04,555	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:37:07,620	[INFO]	12	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:37:07,620	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:37:10,657	[INFO]	13	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:37:10,658	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:37:10,659	[INFO]	14	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:37:10,659	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:37:13,697	[INFO]	15	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:37:13,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:37:14,612	[INFO]	16	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:37:17,740	[INFO]	17	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:37:17,741	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,26 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 34,40 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:37:18,631	[INFO]	18	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:37:21,692	[INFO]	19	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:37:21,693	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,26 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
+                 upleft = rows.get(r-1).get(c-1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:37:24,778	[INFO]	20	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:37:24,780	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:37:27,858	[INFO]	21	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:37:27,859	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:37:28,739	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:37:31,820	[INFO]	23	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:37:31,821	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:37:31,821	[INFO]	24	SUCCESS	+4.0	
2020-12-18 10:37:31,822	[DEBUG]	
2020-12-18 10:37:32,761	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:37:33,673	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:37:34,557	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:37:35,467	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:37:36,379	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:37:39,541	[INFO]	30	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:37:40,424	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:37:41,366	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:37:42,262	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:37:45,291	[INFO]	34	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:37:45,292	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:37:46,205	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:37:49,266	[INFO]	36	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:37:49,267	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:37:49,268	[INFO]	37	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:37:49,268	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:37:49,269	[INFO]	38	SUCCESS	+4.0	
2020-12-18 10:37:49,270	[DEBUG]	
2020-12-18 10:37:50,163	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:37:51,037	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:37:54,196	[INFO]	41	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:37:54,197	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:37:54,199	[INFO]	42	SUCCESS	+4.0	
2020-12-18 10:37:54,199	[DEBUG]	
2020-12-18 10:37:55,054	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:37:58,176	[INFO]	44	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:37:58,177	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:37:58,177	[INFO]	45	SUCCESS	+4.0	
2020-12-18 10:37:58,178	[DEBUG]	
2020-12-18 10:38:01,280	[INFO]	46	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:38:01,280	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:38:01,281	[INFO]	==== END ====
2020-12-18 10:38:01,281	[INFO]	Reason: target fitness reached
2020-12-18 10:38:01,281	[INFO]	
2020-12-18 10:38:01,282	[INFO]	========== EPOCH 14 ==========
2020-12-18 10:38:01,282	[INFO]	==== WARMUP ====
2020-12-18 10:38:04,405	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:38:04,405	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:38:07,420	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:38:07,420	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:38:10,520	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:38:10,520	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:38:13,554	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:38:13,555	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:38:13,555	[INFO]	==== START ====
2020-12-18 10:38:14,429	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:38:15,330	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:38:16,224	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:38:17,136	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:38:18,083	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:38:18,978	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:38:19,896	[INFO]	7	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:38:20,771	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:38:23,914	[INFO]	9	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:38:23,916	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:38:24,809	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:38:27,902	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:38:27,903	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:38:30,927	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:38:30,928	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:38:34,090	[INFO]	13	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:38:34,091	[INFO]	14	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:38:34,092	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:38:34,988	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:38:38,120	[INFO]	16	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:38:38,120	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:38:41,137	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:38:41,138	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,34 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
--- 26,35 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:44,225	[INFO]	18	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:38:44,226	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,34 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
--- 26,35 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:45,126	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:38:48,166	[INFO]	20	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:38:48,167	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,34 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
--- 19,35 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:49,076	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:38:49,978	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:38:50,881	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:38:51,785	[INFO]	24	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:38:52,702	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:38:55,787	[INFO]	26	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:38:55,789	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:58,824	[INFO]	27	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:38:58,826	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:58,828	[INFO]	28	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:38:58,829	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(init);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:38:58,831	[INFO]	29	SUCCESS	+4.0	
2020-12-18 10:38:58,831	[DEBUG]	
2020-12-18 10:39:01,887	[INFO]	30	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:39:01,887	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:39:04,989	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:39:04,990	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:39:05,872	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:39:05,874	[INFO]	33	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:39:05,875	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:39:06,798	[INFO]	34	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:39:07,699	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:39:07,703	[INFO]	36	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:39:07,704	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:39:10,756	[INFO]	37	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:39:10,758	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:39:13,911	[INFO]	38	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:39:13,912	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,30 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:39:16,881	[INFO]	39	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:39:16,882	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,30 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:39:16,882	[INFO]	==== END ====
2020-12-18 10:39:16,882	[INFO]	Reason: target fitness reached
2020-12-18 10:39:16,884	[INFO]	
2020-12-18 10:39:16,884	[INFO]	========== EPOCH 15 ==========
2020-12-18 10:39:16,884	[INFO]	==== WARMUP ====
2020-12-18 10:39:19,996	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:19,997	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:23,033	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:23,033	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:26,126	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:26,126	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:29,263	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:39:29,263	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:29,263	[INFO]	==== START ====
2020-12-18 10:39:30,131	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:39:33,244	[INFO]	2	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:39:33,246	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:39:33,246	[INFO]	==== END ====
2020-12-18 10:39:33,246	[INFO]	Reason: target fitness reached
2020-12-18 10:39:33,248	[INFO]	
2020-12-18 10:39:33,249	[INFO]	========== EPOCH 16 ==========
2020-12-18 10:39:33,249	[INFO]	==== WARMUP ====
2020-12-18 10:39:36,397	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:36,397	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:39,517	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:39,517	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:42,625	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:39:42,625	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:45,748	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:39:45,749	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:39:45,749	[INFO]	==== START ====
2020-12-18 10:39:45,750	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:39:45,750	[DEBUG]	
2020-12-18 10:39:45,751	[INFO]	2	SUCCESS	+4.0	
2020-12-18 10:39:45,751	[DEBUG]	
2020-12-18 10:39:46,633	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:39:46,635	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:39:46,636	[DEBUG]	
2020-12-18 10:39:46,636	[INFO]	5	SUCCESS	+4.0	
2020-12-18 10:39:46,637	[DEBUG]	
2020-12-18 10:39:49,679	[INFO]	6	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:39:49,680	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:39:49,681	[INFO]	7	SUCCESS	+4.0	
2020-12-18 10:39:49,682	[DEBUG]	
2020-12-18 10:39:52,947	[INFO]	8	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:39:52,950	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,28 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     return rows;
                  } else {
                      upleft = 0;
                  }

2020-12-18 10:39:52,952	[INFO]	9	SUCCESS	+4.0	
2020-12-18 10:39:52,953	[DEBUG]	
2020-12-18 10:39:53,849	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:39:56,880	[INFO]	11	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:39:57,753	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:40:00,965	[INFO]	13	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:40:00,965	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
+             init.add(1);
              rows.add(row);
          }
  

2020-12-18 10:40:00,966	[INFO]	14	SUCCESS	+4.0	
2020-12-18 10:40:00,966	[DEBUG]	
2020-12-18 10:40:01,860	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:40:04,908	[INFO]	16	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:40:04,909	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             int upleft, upright;
              rows.add(row);
          }
  

2020-12-18 10:40:04,910	[INFO]	17	SUCCESS	+4.0	
2020-12-18 10:40:04,910	[DEBUG]	
2020-12-18 10:40:04,911	[INFO]	18	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:40:04,912	[DEBUG]	
2020-12-18 10:40:04,912	[INFO]	19	SUCCESS	+4.0	
2020-12-18 10:40:04,912	[DEBUG]	
2020-12-18 10:40:05,790	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:40:08,888	[INFO]	21	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:40:08,888	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:40:08,889	[INFO]	22	SUCCESS	+4.0	
2020-12-18 10:40:08,889	[DEBUG]	
2020-12-18 10:40:11,948	[INFO]	23	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:40:11,949	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 10:40:11,950	[INFO]	24	SUCCESS	+4.0	
2020-12-18 10:40:11,950	[DEBUG]	
2020-12-18 10:40:12,880	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:40:13,778	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:40:14,699	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:40:17,814	[INFO]	28	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:40:17,815	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:40:17,817	[INFO]	29	SUCCESS	+4.0	
2020-12-18 10:40:17,817	[DEBUG]	
2020-12-18 10:40:18,789	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:40:18,791	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:40:18,792	[DEBUG]	
2020-12-18 10:40:19,735	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:40:19,736	[INFO]	33	SUCCESS	+4.0	
2020-12-18 10:40:19,736	[DEBUG]	
2020-12-18 10:40:23,028	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:40:23,029	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:40:23,030	[INFO]	35	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:40:23,030	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:40:23,031	[INFO]	36	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:40:23,031	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:40:23,965	[INFO]	37	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:40:23,966	[INFO]	38	SUCCESS	+4.0	
2020-12-18 10:40:23,967	[DEBUG]	
2020-12-18 10:40:23,967	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:40:23,968	[DEBUG]	
2020-12-18 10:40:27,137	[INFO]	40	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:40:27,140	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:40:27,140	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:40:28,099	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:40:29,035	[INFO]	43	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:40:29,038	[INFO]	44	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:40:29,039	[DEBUG]	
2020-12-18 10:40:29,040	[INFO]	45	SUCCESS	+4.0	
2020-12-18 10:40:29,041	[DEBUG]	
2020-12-18 10:40:29,858	[INFO]	46	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:40:30,742	[INFO]	47	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:40:31,655	[INFO]	48	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:40:32,619	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:40:33,525	[INFO]	50	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:40:33,526	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:40:33,527	[INFO]	52	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:40:36,750	[INFO]	53	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:40:36,752	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:40:36,755	[INFO]	54	SUCCESS	+4.0	
2020-12-18 10:40:36,755	[DEBUG]	
2020-12-18 10:40:37,673	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:40:40,863	[INFO]	56	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:40:40,866	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 return rows;
              }
              rows.add(row);
          }

2020-12-18 10:40:40,868	[INFO]	57	SUCCESS	+4.0	
2020-12-18 10:40:40,869	[DEBUG]	
2020-12-18 10:40:43,937	[INFO]	58	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:40:43,938	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:40:47,036	[INFO]	59	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:40:47,037	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:40:47,038	[INFO]	60	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:40:47,038	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:40:47,039	[INFO]	61	SUCCESS	+4.0	
2020-12-18 10:40:47,039	[DEBUG]	
2020-12-18 10:40:47,945	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:40:47,946	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:40:47,947	[DEBUG]	
2020-12-18 10:40:51,029	[INFO]	64	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:40:51,030	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:40:51,030	[INFO]	65	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:40:51,031	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:40:51,031	[INFO]	66	SUCCESS	+4.0	
2020-12-18 10:40:51,032	[DEBUG]	
2020-12-18 10:40:51,902	[INFO]	67	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:40:55,004	[INFO]	68	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:40:55,006	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:40:55,009	[INFO]	69	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:40:55,010	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:40:55,011	[INFO]	70	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:40:55,012	[DEBUG]	
2020-12-18 10:40:55,013	[INFO]	71	SUCCESS	+4.0	
2020-12-18 10:40:55,014	[DEBUG]	
2020-12-18 10:40:55,015	[INFO]	72	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:40:55,017	[INFO]	73	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:40:58,084	[INFO]	74	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:40:58,972	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:41:02,031	[INFO]	76	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:41:02,032	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:41:05,045	[INFO]	77	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:41:05,046	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,35 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:41:08,137	[INFO]	78	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:41:08,139	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:41:08,857	[INFO]	79	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:41:08,858	[INFO]	80	SUCCESS	+4.0	
2020-12-18 10:41:08,858	[DEBUG]	
2020-12-18 10:41:09,733	[INFO]	81	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:41:10,628	[INFO]	82	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:41:13,785	[INFO]	83	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:41:13,786	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:41:16,905	[INFO]	84	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:41:16,907	[INFO]	85	SUCCESS	+4.0	
2020-12-18 10:41:16,907	[DEBUG]	
2020-12-18 10:41:19,929	[INFO]	86	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:41:19,931	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:41:19,934	[INFO]	87	SUCCESS	+4.0	
2020-12-18 10:41:19,934	[DEBUG]	
2020-12-18 10:41:23,082	[INFO]	88	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:41:23,083	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:41:23,976	[INFO]	89	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:41:24,949	[INFO]	90	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:41:24,950	[INFO]	91	SUCCESS	+4.0	
2020-12-18 10:41:24,951	[DEBUG]	
2020-12-18 10:41:25,694	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:41:25,695	[INFO]	93	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:41:25,696	[DEBUG]	
2020-12-18 10:41:25,696	[INFO]	94	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:41:26,594	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:41:26,595	[INFO]	96	SUCCESS	+4.0	
2020-12-18 10:41:26,595	[DEBUG]	
2020-12-18 10:41:27,497	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:41:28,402	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:41:29,337	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:41:30,265	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:41:30,999	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:41:34,113	[INFO]	102	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:41:34,114	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             return rows;
          }
  
          return rows;

2020-12-18 10:41:34,114	[INFO]	103	SUCCESS	+4.0	
2020-12-18 10:41:34,115	[DEBUG]	
2020-12-18 10:41:34,115	[INFO]	104	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:41:34,116	[INFO]	105	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:41:34,117	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:41:37,194	[INFO]	106	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:41:37,196	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:41:37,197	[INFO]	107	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:41:37,198	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:41:37,199	[INFO]	108	SUCCESS	+4.0	
2020-12-18 10:41:37,200	[DEBUG]	
2020-12-18 10:41:40,290	[INFO]	109	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:41:41,072	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:41:44,285	[INFO]	111	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:41:44,286	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 return rows;
              }
              rows.add(row);
          }

2020-12-18 10:41:45,206	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:41:45,209	[INFO]	113	SUCCESS	+4.0	
2020-12-18 10:41:45,209	[DEBUG]	
2020-12-18 10:41:45,211	[INFO]	114	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:41:45,212	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:41:45,213	[INFO]	115	SUCCESS	+4.0	
2020-12-18 10:41:45,214	[DEBUG]	
2020-12-18 10:41:45,216	[INFO]	116	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:41:48,318	[INFO]	117	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:41:48,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upleft = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:41:48,319	[INFO]	118	SUCCESS	+4.0	
2020-12-18 10:41:48,320	[DEBUG]	
2020-12-18 10:41:49,233	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:41:49,234	[INFO]	120	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:41:49,234	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:41:49,235	[INFO]	121	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:41:49,236	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:41:52,313	[INFO]	122	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:41:52,314	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upright = rows.get(r-1).get(c);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:41:53,203	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:41:54,139	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:41:54,141	[INFO]	125	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:41:54,141	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upright = rows.get(r-1).get(c);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:41:54,142	[INFO]	126	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:41:54,143	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upright = rows.get(r-1).get(c);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:41:54,144	[INFO]	127	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:41:54,144	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:41:54,145	[INFO]	128	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:41:54,146	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:41:54,147	[INFO]	129	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:41:54,147	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:41:54,148	[INFO]	130	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:41:54,149	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:41:54,149	[INFO]	131	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:41:54,150	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:41:54,151	[INFO]	132	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:41:54,151	[DEBUG]	
2020-12-18 10:41:54,152	[INFO]	133	SUCCESS	+4.0	
2020-12-18 10:41:54,152	[DEBUG]	
2020-12-18 10:41:55,059	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:41:55,963	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:41:59,027	[INFO]	136	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:41:59,028	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:41:59,760	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:42:00,678	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:42:00,679	[INFO]	139	SUCCESS	+4.0	
2020-12-18 10:42:00,679	[DEBUG]	
2020-12-18 10:42:01,442	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:42:01,443	[INFO]	141	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:42:01,444	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:42:01,444	[INFO]	142	SUCCESS	+4.0	
2020-12-18 10:42:01,445	[DEBUG]	
2020-12-18 10:42:04,497	[INFO]	143	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:42:04,498	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:42:05,384	[INFO]	144	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:42:05,385	[INFO]	145	SUCCESS	+4.0	
2020-12-18 10:42:05,385	[DEBUG]	
2020-12-18 10:42:08,504	[INFO]	146	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:42:09,352	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:42:12,471	[INFO]	148	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:42:12,472	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:42:12,473	[INFO]	149	SUCCESS	+4.0	
2020-12-18 10:42:12,473	[DEBUG]	
2020-12-18 10:42:13,344	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:42:16,449	[INFO]	151	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:42:16,450	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 init.add(1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:42:16,451	[INFO]	152	SUCCESS	+4.0	
2020-12-18 10:42:16,451	[DEBUG]	
2020-12-18 10:42:17,346	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:42:17,347	[INFO]	154	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:42:17,347	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:42:18,212	[INFO]	155	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:42:18,213	[INFO]	156	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:42:18,214	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:42:18,214	[INFO]	157	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:42:18,215	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:42:18,215	[INFO]	158	SUCCESS	+4.0	
2020-12-18 10:42:18,216	[DEBUG]	
2020-12-18 10:42:18,216	[INFO]	159	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:42:18,217	[DEBUG]	
2020-12-18 10:42:18,217	[INFO]	160	SUCCESS	+4.0	
2020-12-18 10:42:18,218	[DEBUG]	
2020-12-18 10:42:21,337	[INFO]	161	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:42:21,337	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:42:21,338	[INFO]	162	SUCCESS	+4.0	
2020-12-18 10:42:21,338	[DEBUG]	
2020-12-18 10:42:24,508	[INFO]	163	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:42:24,510	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:42:27,812	[INFO]	164	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:42:27,814	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 init.add(1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:42:27,815	[INFO]	165	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:42:27,816	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 init.add(1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:42:27,817	[INFO]	166	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:42:27,818	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 init.add(1);
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:42:27,819	[INFO]	167	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:42:27,820	[DEBUG]	
2020-12-18 10:42:28,754	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:42:28,756	[INFO]	169	SUCCESS	+4.0	
2020-12-18 10:42:28,757	[DEBUG]	
2020-12-18 10:42:29,689	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:42:32,916	[INFO]	171	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:42:32,917	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:42:33,793	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:42:36,941	[INFO]	173	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:42:36,942	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:42:37,818	[INFO]	174	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:42:40,898	[INFO]	175	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:42:40,900	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,31 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 17,32 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:42:40,902	[INFO]	176	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:42:40,904	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:42:43,996	[INFO]	177	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:42:43,997	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:42:43,998	[INFO]	178	SUCCESS	+4.0	
2020-12-18 10:42:43,998	[DEBUG]	
2020-12-18 10:42:43,999	[INFO]	179	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:42:43,999	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:42:44,000	[INFO]	180	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:42:44,001	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:42:44,002	[INFO]	181	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:42:44,002	[DEBUG]	
2020-12-18 10:42:44,895	[INFO]	182	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:42:44,896	[INFO]	183	SUCCESS	+4.0	
2020-12-18 10:42:44,896	[DEBUG]	
2020-12-18 10:42:45,775	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:42:46,708	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:42:47,486	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:42:47,489	[INFO]	187	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:42:47,490	[DEBUG]	
2020-12-18 10:42:47,491	[INFO]	188	SUCCESS	+4.0	
2020-12-18 10:42:47,492	[DEBUG]	
2020-12-18 10:42:48,389	[INFO]	189	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:42:49,275	[INFO]	190	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:42:50,182	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:42:51,073	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:42:54,217	[INFO]	193	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:42:54,218	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:42:54,219	[INFO]	194	SUCCESS	+4.0	
2020-12-18 10:42:54,219	[DEBUG]	
2020-12-18 10:42:57,304	[INFO]	195	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:42:57,305	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:42:58,051	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:42:58,956	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:42:58,957	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:42:59,884	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:43:00,796	[INFO]	200	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:43:03,972	[INFO]	201	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:43:03,973	[INFO]	202	SUCCESS	+4.0	
2020-12-18 10:43:03,974	[DEBUG]	
2020-12-18 10:43:04,815	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:43:07,944	[INFO]	204	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:43:07,944	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = 0;
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:43:07,945	[INFO]	205	SUCCESS	+4.0	
2020-12-18 10:43:07,945	[DEBUG]	
2020-12-18 10:43:08,844	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:43:11,960	[INFO]	207	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:43:11,961	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:43:11,962	[INFO]	208	SUCCESS	+4.0	
2020-12-18 10:43:11,962	[DEBUG]	
2020-12-18 10:43:12,842	[INFO]	209	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:43:15,926	[INFO]	210	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:43:15,927	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:43:16,808	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:43:17,703	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:43:17,704	[INFO]	213	SUCCESS	+4.0	
2020-12-18 10:43:17,704	[DEBUG]	
2020-12-18 10:43:20,738	[INFO]	214	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:43:20,739	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:43:20,740	[INFO]	215	SUCCESS	+4.0	
2020-12-18 10:43:20,740	[DEBUG]	
2020-12-18 10:43:23,842	[INFO]	216	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:43:23,842	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:43:23,843	[INFO]	217	SUCCESS	+4.0	
2020-12-18 10:43:23,843	[DEBUG]	
2020-12-18 10:43:24,749	[INFO]	218	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:43:25,689	[INFO]	219	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:43:28,769	[INFO]	220	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:43:28,770	[INFO]	221	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:43:28,770	[DEBUG]	
2020-12-18 10:43:28,771	[INFO]	222	SUCCESS	+4.0	
2020-12-18 10:43:28,771	[DEBUG]	
2020-12-18 10:43:28,772	[INFO]	223	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:43:28,772	[DEBUG]	
2020-12-18 10:43:28,773	[INFO]	224	SUCCESS	+4.0	
2020-12-18 10:43:28,773	[DEBUG]	
2020-12-18 10:43:29,661	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:43:30,567	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:43:31,344	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:43:34,490	[INFO]	228	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:43:34,491	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:43:35,376	[INFO]	229	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:43:35,377	[INFO]	230	SUCCESS	+4.0	
2020-12-18 10:43:35,377	[DEBUG]	
2020-12-18 10:43:38,453	[INFO]	231	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:43:38,454	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:43:38,455	[INFO]	232	SUCCESS	+4.0	
2020-12-18 10:43:38,456	[DEBUG]	
2020-12-18 10:43:39,366	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:43:42,497	[INFO]	234	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:43:42,499	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:43:42,501	[INFO]	235	SUCCESS	+4.0	
2020-12-18 10:43:42,501	[DEBUG]	
2020-12-18 10:43:45,577	[INFO]	236	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:43:46,517	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:43:47,417	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:43:48,326	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:43:48,327	[INFO]	240	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:43:49,338	[INFO]	241	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:43:49,340	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:43:52,558	[INFO]	243	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:43:52,560	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upleft = rows.get(r-1).get(c-1);
              }
              rows.add(row);
          }

2020-12-18 10:43:55,615	[INFO]	244	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:43:55,617	[INFO]	245	SUCCESS	+4.0	
2020-12-18 10:43:55,617	[DEBUG]	
2020-12-18 10:43:56,537	[INFO]	246	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:43:57,434	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:43:57,435	[INFO]	248	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:43:58,329	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:43:59,238	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:44:02,487	[INFO]	251	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:44:02,489	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:44:05,500	[INFO]	252	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:44:05,501	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,29 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:44:05,502	[INFO]	253	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:44:05,502	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:44:05,503	[INFO]	254	SUCCESS	+4.0	
2020-12-18 10:44:05,503	[DEBUG]	
2020-12-18 10:44:06,408	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:44:07,293	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:44:08,193	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:44:08,195	[INFO]	258	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:44:08,195	[DEBUG]	
2020-12-18 10:44:11,319	[INFO]	259	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:44:11,320	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:44:11,321	[INFO]	260	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:44:11,321	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:44:12,214	[INFO]	261	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:44:12,215	[INFO]	262	SUCCESS	+4.0	
2020-12-18 10:44:12,215	[DEBUG]	
2020-12-18 10:44:15,329	[INFO]	263	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:44:15,330	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:44:18,366	[INFO]	264	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:44:21,455	[INFO]	265	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:44:21,456	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:44:21,457	[INFO]	266	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:44:21,457	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:44:22,353	[INFO]	267	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:44:23,248	[INFO]	268	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:44:24,183	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:44:27,286	[INFO]	270	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:44:27,288	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 15,25 ****
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 15,43 ----
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:44:27,288	[INFO]	271	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:44:27,289	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:44:28,187	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:44:28,189	[INFO]	273	SUCCESS	+4.0	
2020-12-18 10:44:28,189	[DEBUG]	
2020-12-18 10:44:29,069	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:44:29,070	[INFO]	275	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:44:29,833	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:44:32,967	[INFO]	277	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:44:32,968	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:44:32,968	[INFO]	278	SUCCESS	+4.0	
2020-12-18 10:44:32,969	[DEBUG]	
2020-12-18 10:44:36,041	[INFO]	279	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:44:39,142	[INFO]	280	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:44:40,026	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:44:40,028	[INFO]	282	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:44:40,028	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:44:40,029	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:44:40,030	[INFO]	284	SUCCESS	+4.0	
2020-12-18 10:44:40,030	[DEBUG]	
2020-12-18 10:44:43,212	[INFO]	285	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:44:43,213	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:44:43,215	[INFO]	286	SUCCESS	+4.0	
2020-12-18 10:44:43,216	[DEBUG]	
2020-12-18 10:44:46,247	[INFO]	287	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:44:46,248	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:44:46,249	[INFO]	288	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:44:46,250	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:44:47,143	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:44:48,071	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:44:48,074	[INFO]	291	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:44:48,075	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:44:48,996	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:44:48,999	[INFO]	293	SUCCESS	+4.0	
2020-12-18 10:44:49,000	[DEBUG]	
2020-12-18 10:44:52,076	[INFO]	294	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:44:52,077	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:44:52,078	[INFO]	295	SUCCESS	+4.0	
2020-12-18 10:44:52,078	[DEBUG]	
2020-12-18 10:44:55,146	[INFO]	296	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:44:55,147	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:44:55,148	[INFO]	297	SUCCESS	+4.0	
2020-12-18 10:44:55,148	[DEBUG]	
2020-12-18 10:44:55,149	[INFO]	298	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:44:55,890	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:44:56,748	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:44:59,879	[INFO]	301	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:44:59,881	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:44:59,883	[INFO]	302	SUCCESS	+4.0	
2020-12-18 10:44:59,884	[DEBUG]	
2020-12-18 10:44:59,886	[INFO]	303	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:44:59,888	[INFO]	304	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:44:59,888	[DEBUG]	
2020-12-18 10:45:00,768	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:45:03,853	[INFO]	306	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:45:03,855	[INFO]	307	SUCCESS	+4.0	
2020-12-18 10:45:03,856	[DEBUG]	
2020-12-18 10:45:04,750	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:45:07,776	[INFO]	309	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:45:07,777	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:45:08,712	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:45:11,796	[INFO]	311	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:45:11,799	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 29,34 ****
--- 32,38 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(row);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:45:11,803	[INFO]	312	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:45:11,804	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:45:12,715	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:45:12,716	[INFO]	314	SUCCESS	+4.0	
2020-12-18 10:45:12,716	[DEBUG]	
2020-12-18 10:45:13,600	[INFO]	315	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:45:16,698	[INFO]	316	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:45:17,579	[INFO]	317	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:45:18,455	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:45:21,563	[INFO]	319	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:45:21,565	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:45:21,566	[INFO]	320	SUCCESS	+4.0	
2020-12-18 10:45:21,566	[DEBUG]	
2020-12-18 10:45:22,431	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:45:25,486	[INFO]	322	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:45:25,487	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:45:25,488	[INFO]	323	SUCCESS	+4.0	
2020-12-18 10:45:25,488	[DEBUG]	
2020-12-18 10:45:26,393	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:45:26,394	[INFO]	325	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:45:26,395	[DEBUG]	
2020-12-18 10:45:26,395	[INFO]	326	SUCCESS	+4.0	
2020-12-18 10:45:26,396	[DEBUG]	
2020-12-18 10:45:27,318	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:45:27,319	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:45:30,426	[INFO]	329	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:45:30,428	[INFO]	330	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:45:31,170	[INFO]	331	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:45:32,119	[INFO]	332	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:45:32,120	[INFO]	333	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:45:32,121	[DEBUG]	
2020-12-18 10:45:32,122	[INFO]	334	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:45:32,123	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:45:32,123	[INFO]	335	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:45:32,124	[DEBUG]	
2020-12-18 10:45:35,410	[INFO]	336	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:45:39,469	[INFO]	337	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:45:39,470	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:45:39,471	[INFO]	338	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:45:39,472	[DEBUG]	
2020-12-18 10:45:39,472	[INFO]	339	SUCCESS	+4.0	
2020-12-18 10:45:39,473	[DEBUG]	
2020-12-18 10:45:40,391	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:45:41,167	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:45:42,104	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:45:45,224	[INFO]	343	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:45:45,225	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:45:45,226	[INFO]	344	SUCCESS	+4.0	
2020-12-18 10:45:45,226	[DEBUG]	
2020-12-18 10:45:45,227	[INFO]	345	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:45:45,228	[INFO]	346	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:45:48,303	[INFO]	347	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:45:48,304	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:45:51,358	[INFO]	348	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:45:51,359	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,26 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:45:51,360	[INFO]	349	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:45:51,361	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,26 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:45:52,140	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:45:52,142	[INFO]	351	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:45:52,142	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,26 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upright = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:45:55,252	[INFO]	352	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:45:55,253	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:45:58,350	[INFO]	353	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:45:58,351	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:45:58,353	[INFO]	354	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:45:58,353	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:45:59,229	[INFO]	355	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:46:00,110	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:46:03,234	[INFO]	357	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:46:03,234	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:46:04,160	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:46:04,163	[INFO]	359	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:46:04,164	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:46:05,053	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:46:05,054	[INFO]	361	SUCCESS	+4.0	
2020-12-18 10:46:05,054	[DEBUG]	
2020-12-18 10:46:05,929	[INFO]	362	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:46:06,830	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:46:07,752	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:46:08,659	[INFO]	365	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:46:11,743	[INFO]	366	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:46:14,830	[INFO]	367	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:46:14,831	[INFO]	368	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:46:17,843	[INFO]	369	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:46:17,844	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = rows.get(r-1).get(c);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:46:17,844	[INFO]	370	SUCCESS	+4.0	
2020-12-18 10:46:17,845	[DEBUG]	
2020-12-18 10:46:17,845	[INFO]	371	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:46:17,846	[DEBUG]	
2020-12-18 10:46:17,846	[INFO]	372	SUCCESS	+4.0	
2020-12-18 10:46:17,846	[DEBUG]	
2020-12-18 10:46:20,924	[INFO]	373	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:46:20,925	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:46:21,820	[INFO]	374	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:46:21,821	[INFO]	375	SUCCESS	+4.0	
2020-12-18 10:46:21,821	[DEBUG]	
2020-12-18 10:46:24,972	[INFO]	376	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:46:28,058	[INFO]	377	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:46:28,059	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
+             int upleft, upright;
              rows.add(row);
          }
  

2020-12-18 10:46:28,799	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:46:29,696	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:46:29,697	[INFO]	380	SUCCESS	+4.0	
2020-12-18 10:46:29,697	[DEBUG]	
2020-12-18 10:46:30,624	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:46:31,542	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:46:31,544	[INFO]	383	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:46:32,497	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:46:33,473	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:46:33,474	[INFO]	386	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:46:33,475	[DEBUG]	
2020-12-18 10:46:36,534	[INFO]	387	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:46:36,535	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:46:37,409	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:46:37,410	[INFO]	390	SUCCESS	+4.0	
2020-12-18 10:46:37,411	[DEBUG]	
2020-12-18 10:46:40,564	[INFO]	391	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:46:40,565	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:46:40,566	[INFO]	392	SUCCESS	+4.0	
2020-12-18 10:46:40,566	[DEBUG]	
2020-12-18 10:46:43,680	[INFO]	393	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:46:43,681	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:46:44,590	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:46:44,592	[INFO]	395	SUCCESS	+4.0	
2020-12-18 10:46:44,593	[DEBUG]	
2020-12-18 10:46:45,355	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:46:45,358	[INFO]	397	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:46:45,359	[DEBUG]	
2020-12-18 10:46:45,361	[INFO]	398	SUCCESS	+4.0	
2020-12-18 10:46:45,362	[DEBUG]	
2020-12-18 10:46:46,262	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:46:49,355	[INFO]	400	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:46:49,356	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:46:49,358	[INFO]	401	SUCCESS	+4.0	
2020-12-18 10:46:49,359	[DEBUG]	
2020-12-18 10:46:52,439	[INFO]	402	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:46:53,343	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:46:54,241	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:46:55,014	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:46:58,068	[INFO]	406	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:46:58,070	[INFO]	407	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:46:58,070	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:47:01,131	[INFO]	408	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:47:01,132	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,28 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:01,871	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:47:04,946	[INFO]	410	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:47:04,947	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,28 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:08,073	[INFO]	411	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:47:08,074	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,28 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:11,206	[INFO]	412	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:47:11,208	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:12,069	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:47:15,169	[INFO]	414	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:47:15,170	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:16,048	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:47:16,050	[INFO]	416	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:47:16,050	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:19,149	[INFO]	417	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:47:19,152	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:20,076	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:47:23,185	[INFO]	419	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:47:23,186	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,28 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:23,187	[INFO]	420	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:47:23,188	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,28 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:26,312	[INFO]	421	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:47:26,313	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:29,444	[INFO]	422	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:47:29,446	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,34 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:47:29,448	[INFO]	423	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:47:29,449	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:32,539	[INFO]	424	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:47:32,540	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,34 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:47:35,783	[INFO]	425	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:47:35,784	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,35 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:47:38,809	[INFO]	426	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:47:38,811	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,30 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
+                     upleft = rows.get(r-1).get(c-1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:41,892	[INFO]	427	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:47:41,894	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:41,897	[INFO]	428	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:47:41,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:47:57,426	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:47:57,428	[INFO]	430	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:47:57,429	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:48:00,638	[INFO]	431	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:48:00,640	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 rows.add(row);
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:48:01,504	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:48:01,505	[INFO]	433	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:48:01,506	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:48:01,506	[INFO]	434	SUCCESS	+4.0	
2020-12-18 10:48:01,507	[DEBUG]	
2020-12-18 10:48:04,672	[INFO]	435	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:48:04,673	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,32 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:48:04,674	[INFO]	436	SUCCESS	+4.0	
2020-12-18 10:48:04,674	[DEBUG]	
2020-12-18 10:48:05,401	[INFO]	437	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:48:08,443	[INFO]	438	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:48:11,588	[INFO]	439	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:48:11,590	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:48:12,315	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:48:15,430	[INFO]	441	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:48:15,432	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,31 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:48:16,308	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:48:19,410	[INFO]	443	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:48:19,412	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:48:19,414	[INFO]	444	SUCCESS	+4.0	
2020-12-18 10:48:19,414	[DEBUG]	
2020-12-18 10:48:20,302	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:48:21,055	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:48:21,971	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:48:25,077	[INFO]	448	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:48:25,079	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(row);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:48:25,081	[INFO]	449	SUCCESS	+4.0	
2020-12-18 10:48:25,081	[DEBUG]	
2020-12-18 10:48:25,845	[INFO]	450	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:48:25,846	[INFO]	451	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:48:25,846	[DEBUG]	
2020-12-18 10:48:25,847	[INFO]	452	SUCCESS	+4.0	
2020-12-18 10:48:25,847	[DEBUG]	
2020-12-18 10:48:26,572	[INFO]	453	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:48:29,612	[INFO]	454	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:48:29,614	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:48:30,538	[INFO]	455	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:48:30,540	[INFO]	456	SUCCESS	+4.0	
2020-12-18 10:48:30,540	[DEBUG]	
2020-12-18 10:48:33,710	[INFO]	457	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:48:33,711	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,35 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:48:33,712	[INFO]	458	SUCCESS	+4.0	
2020-12-18 10:48:33,712	[DEBUG]	
2020-12-18 10:48:34,587	[INFO]	459	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:48:37,725	[INFO]	460	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:48:37,726	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:48:37,726	[INFO]	461	SUCCESS	+4.0	
2020-12-18 10:48:37,727	[DEBUG]	
2020-12-18 10:48:40,925	[INFO]	462	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 10:48:40,926	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:48:40,926	[INFO]	463	SUCCESS	+4.0	
2020-12-18 10:48:40,927	[DEBUG]	
2020-12-18 10:48:41,799	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:48:44,928	[INFO]	465	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:48:44,929	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:48:45,843	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:48:46,638	[INFO]	467	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:48:46,641	[INFO]	468	SUCCESS	+4.0	
2020-12-18 10:48:46,641	[DEBUG]	
2020-12-18 10:48:49,632	[INFO]	469	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:48:49,633	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:48:49,634	[INFO]	470	SUCCESS	+4.0	
2020-12-18 10:48:49,634	[DEBUG]	
2020-12-18 10:48:50,538	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:48:51,451	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:48:54,563	[INFO]	473	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:48:54,564	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 10:48:55,425	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:48:56,169	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:48:56,171	[INFO]	476	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:48:56,171	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = 0;
              }
              rows.add(row);
          }

2020-12-18 10:48:59,252	[INFO]	477	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:48:59,253	[INFO]	478	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:48:59,254	[DEBUG]	
2020-12-18 10:48:59,254	[INFO]	479	SUCCESS	+4.0	
2020-12-18 10:48:59,255	[DEBUG]	
2020-12-18 10:49:00,170	[INFO]	480	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:49:01,068	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:49:04,123	[INFO]	482	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:49:04,125	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:49:05,010	[INFO]	483	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:49:05,011	[INFO]	484	SUCCESS	+4.0	
2020-12-18 10:49:05,012	[DEBUG]	
2020-12-18 10:49:08,064	[INFO]	485	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:49:08,065	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             return rows;
          }
  
          return rows;

2020-12-18 10:49:08,969	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:49:12,079	[INFO]	487	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:49:12,081	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
          }
  
          return rows;
--- 19,26 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
!             return rows;
          }
  
          return rows;

2020-12-18 10:49:12,082	[INFO]	488	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:49:12,083	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             return rows;
          }
  
          return rows;

2020-12-18 10:49:15,106	[INFO]	489	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:49:15,107	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             return rows;
          }
  
          return rows;

2020-12-18 10:49:18,147	[INFO]	490	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:49:18,148	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:49:18,148	[INFO]	==== END ====
2020-12-18 10:49:18,148	[INFO]	Reason: target fitness reached
2020-12-18 10:49:18,150	[INFO]	
2020-12-18 10:49:18,150	[INFO]	========== EPOCH 17 ==========
2020-12-18 10:49:18,150	[INFO]	==== WARMUP ====
2020-12-18 10:49:21,228	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:49:21,229	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:49:24,333	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:49:24,333	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:49:27,445	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:49:27,445	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:49:30,521	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 10:49:30,521	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:49:30,521	[INFO]	==== START ====
2020-12-18 10:49:31,421	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:49:32,363	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:49:35,508	[INFO]	3	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:49:35,509	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:49:35,510	[INFO]	4	SUCCESS	+4.0	
2020-12-18 10:49:35,510	[DEBUG]	
2020-12-18 10:49:36,243	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:49:37,137	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:49:37,138	[INFO]	7	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:49:37,138	[DEBUG]	
2020-12-18 10:49:38,051	[INFO]	8	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:49:38,052	[INFO]	9	SUCCESS	+4.0	
2020-12-18 10:49:38,052	[DEBUG]	
2020-12-18 10:49:41,125	[INFO]	10	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:49:41,126	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:41,127	[INFO]	11	SUCCESS	+4.0	
2020-12-18 10:49:41,127	[DEBUG]	
2020-12-18 10:49:42,012	[INFO]	12	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:49:42,940	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:49:46,179	[INFO]	14	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:49:46,180	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:49:47,025	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:49:47,909	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:49:47,910	[INFO]	17	SUCCESS	+4.0	
2020-12-18 10:49:47,911	[DEBUG]	
2020-12-18 10:49:51,130	[INFO]	18	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:49:52,008	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:49:55,020	[INFO]	20	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:49:55,021	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             rows.add(row);
              rows.add(row);
          }
  

2020-12-18 10:49:55,022	[INFO]	21	SUCCESS	+4.0	
2020-12-18 10:49:55,022	[DEBUG]	
2020-12-18 10:49:55,898	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:49:58,994	[INFO]	23	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:49:58,995	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:49:58,996	[INFO]	24	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:49:58,997	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:49:58,997	[INFO]	25	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:49:58,998	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:58,999	[INFO]	26	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:49:58,999	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:59,874	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:49:59,876	[INFO]	28	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:49:59,876	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:59,877	[INFO]	29	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:49:59,878	[INFO]	30	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:49:59,879	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:59,880	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:49:59,880	[INFO]	32	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:49:59,881	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:49:59,881	[INFO]	33	SUCCESS	+4.0	
2020-12-18 10:49:59,881	[DEBUG]	
2020-12-18 10:50:00,789	[INFO]	34	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:50:03,916	[INFO]	35	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:50:07,024	[INFO]	36	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:50:07,025	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(init);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:50:07,026	[INFO]	37	SUCCESS	+4.0	
2020-12-18 10:50:07,026	[DEBUG]	
2020-12-18 10:50:07,920	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:50:11,078	[INFO]	39	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:50:11,079	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:50:11,952	[INFO]	40	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:50:15,036	[INFO]	41	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:50:15,038	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:50:15,040	[INFO]	42	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:50:15,041	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:50:15,043	[INFO]	43	SUCCESS	+4.0	
2020-12-18 10:50:15,043	[DEBUG]	
2020-12-18 10:50:15,765	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:50:16,694	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:50:19,735	[INFO]	46	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:50:19,736	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 rows.add(row);
              }
              rows.add(row);
          }

2020-12-18 10:50:22,873	[INFO]	47	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:50:22,875	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 rows.add(row);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:50:25,911	[INFO]	48	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:50:25,912	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:50:25,913	[INFO]	49	SUCCESS	+4.0	
2020-12-18 10:50:25,913	[DEBUG]	
2020-12-18 10:50:25,914	[INFO]	50	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:50:28,992	[INFO]	51	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:50:29,898	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:50:29,900	[INFO]	53	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:50:29,901	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:50:29,902	[INFO]	54	SUCCESS	+4.0	
2020-12-18 10:50:29,903	[DEBUG]	
2020-12-18 10:50:33,085	[INFO]	55	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:50:33,086	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:50:33,086	[INFO]	56	SUCCESS	+4.0	
2020-12-18 10:50:33,087	[DEBUG]	
2020-12-18 10:50:33,947	[INFO]	57	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:50:33,949	[INFO]	58	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:50:33,949	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:50:33,950	[INFO]	59	SUCCESS	+4.0	
2020-12-18 10:50:33,950	[DEBUG]	
2020-12-18 10:50:34,850	[INFO]	60	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:50:34,851	[INFO]	61	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:50:34,851	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:50:38,146	[INFO]	62	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:50:39,054	[INFO]	63	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:50:39,055	[INFO]	64	SUCCESS	+4.0	
2020-12-18 10:50:39,056	[DEBUG]	
2020-12-18 10:50:39,965	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:50:40,883	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:50:44,103	[INFO]	67	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:50:44,104	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:50:44,980	[INFO]	68	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:50:45,893	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:46,804	[INFO]	70	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:50:46,805	[INFO]	71	SUCCESS	+4.0	
2020-12-18 10:50:46,805	[DEBUG]	
2020-12-18 10:50:47,719	[INFO]	72	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:48,631	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:50:49,538	[INFO]	74	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:50:50,444	[INFO]	75	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:50:54,390	[INFO]	76	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:50:54,390	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,392	[INFO]	77	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:50:54,392	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,393	[INFO]	78	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:50:54,393	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,395	[INFO]	79	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:50:54,395	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,397	[INFO]	80	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:50:54,397	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,398	[INFO]	81	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:50:54,399	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,400	[INFO]	82	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:50:54,401	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:54,403	[INFO]	83	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:54,403	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:55,529	[INFO]	84	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:59,401	[INFO]	85	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:50:59,402	[INFO]	86	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:59,403	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:50:59,404	[INFO]	87	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:50:59,404	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:02,980	[INFO]	88	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:51:02,981	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:03,779	[INFO]	89	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:51:03,784	[INFO]	90	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:03,786	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:03,789	[INFO]	91	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:51:03,791	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:04,670	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:07,814	[INFO]	93	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:51:07,816	[INFO]	94	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:07,816	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,38 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:08,599	[INFO]	95	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:09,652	[INFO]	96	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:51:09,655	[INFO]	97	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:09,656	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,658	[INFO]	98	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:51:09,659	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,661	[INFO]	99	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:51:09,662	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,664	[INFO]	100	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:51:09,665	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,667	[INFO]	101	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,668	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,669	[INFO]	102	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,670	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,671	[INFO]	103	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,672	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,674	[INFO]	104	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,675	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,676	[INFO]	105	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,677	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:09,677	[INFO]	106	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:09,678	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:10,588	[INFO]	107	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:51:13,645	[INFO]	108	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:51:13,646	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,40 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
          return rows;
      }
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:51:13,647	[INFO]	109	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:51:13,648	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,40 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
          return rows;
      }
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:51:13,649	[INFO]	110	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:51:13,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,40 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
          return rows;
      }
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:51:13,651	[INFO]	111	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:51:13,651	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,40 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
          return rows;
      }
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:51:13,652	[INFO]	112	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:51:13,653	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,40 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
          return rows;
      }
--- 19,29 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
+ 
+         int upleft, upright;
  
          return rows;
      }

2020-12-18 10:51:13,654	[INFO]	113	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:51:13,655	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:16,722	[INFO]	114	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:51:16,723	[INFO]	115	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:51:16,723	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:51:16,724	[INFO]	116	SUCCESS	+4.0	
2020-12-18 10:51:16,724	[DEBUG]	
2020-12-18 10:51:19,869	[INFO]	117	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:51:19,870	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:19,871	[INFO]	118	SUCCESS	+4.0	
2020-12-18 10:51:19,871	[DEBUG]	
2020-12-18 10:51:20,591	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:51:21,473	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:51:22,371	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:51:23,293	[INFO]	122	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:51:26,334	[INFO]	123	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:51:26,335	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:51:26,336	[INFO]	124	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:51:26,336	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:51:29,422	[INFO]	125	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:51:29,422	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:29,423	[INFO]	126	SUCCESS	+4.0	
2020-12-18 10:51:29,423	[DEBUG]	
2020-12-18 10:51:30,179	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:51:33,221	[INFO]	128	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:51:33,222	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:51:33,223	[INFO]	129	SUCCESS	+4.0	
2020-12-18 10:51:33,223	[DEBUG]	
2020-12-18 10:51:33,224	[INFO]	130	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:51:33,225	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:51:33,225	[INFO]	131	SUCCESS	+4.0	
2020-12-18 10:51:33,225	[DEBUG]	
2020-12-18 10:51:36,348	[INFO]	132	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:51:37,280	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:51:37,282	[INFO]	134	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 10:51:37,282	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:40,376	[INFO]	135	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:51:40,378	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:41,193	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:51:41,196	[INFO]	137	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:51:41,197	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:42,113	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:51:45,255	[INFO]	139	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:51:45,256	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:46,172	[INFO]	140	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:51:47,089	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:51:47,988	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:51:50,987	[INFO]	143	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:51:50,988	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:50,989	[INFO]	144	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:51:50,990	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:51,889	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:51:55,002	[INFO]	146	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:51:55,003	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:55,005	[INFO]	147	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:51:55,005	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:55,006	[INFO]	148	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:51:55,007	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:55,008	[INFO]	149	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:51:55,008	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:58,035	[INFO]	150	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:51:58,036	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,36 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 upleft = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:51:58,038	[INFO]	151	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:51:58,039	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,36 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 upleft = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:51:58,040	[INFO]	152	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:51:58,041	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,36 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 upleft = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:51:58,928	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:51:58,930	[INFO]	154	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:51:58,931	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,36 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
--- 22,38 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
+                 upleft = 0;
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:51:58,932	[INFO]	155	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:51:58,933	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,32 ****
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
!                     upleft = 0;
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:51:58,934	[INFO]	156	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:51:58,935	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:01,977	[INFO]	157	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:52:01,979	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:01,980	[INFO]	158	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:52:01,981	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:01,982	[INFO]	159	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:52:01,982	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:02,893	[INFO]	160	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:52:02,896	[INFO]	161	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:52:02,897	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:05,960	[INFO]	162	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:52:05,963	[INFO]	163	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:52:05,964	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:05,966	[INFO]	164	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:52:05,967	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:05,969	[INFO]	165	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:52:05,970	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:05,971	[INFO]	166	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:52:05,972	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(row);
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:09,074	[INFO]	167	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:52:09,075	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:09,076	[INFO]	168	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:52:09,076	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
!                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:12,149	[INFO]	169	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:52:12,150	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:13,031	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:13,034	[INFO]	171	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:52:13,035	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:16,175	[INFO]	172	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:52:16,176	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,39 ****
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 27,40 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:52:16,177	[INFO]	173	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:52:16,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:16,179	[INFO]	174	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:52:16,179	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = rows.get(r-1).get(c-1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:16,180	[INFO]	175	SUCCESS	+4.0	
2020-12-18 10:52:16,180	[DEBUG]	
2020-12-18 10:52:17,058	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:52:17,950	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:52:21,032	[INFO]	178	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:52:24,108	[INFO]	179	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:52:24,108	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:52:24,110	[INFO]	180	SUCCESS	+4.0	
2020-12-18 10:52:24,110	[DEBUG]	
2020-12-18 10:52:24,973	[INFO]	181	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:52:28,038	[INFO]	182	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 10:52:28,039	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:28,041	[INFO]	183	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:28,042	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:28,921	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:28,923	[INFO]	185	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:52:28,924	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:28,925	[INFO]	186	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:52:28,926	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:29,849	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:29,851	[INFO]	188	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:52:29,851	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:29,853	[INFO]	189	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:52:29,853	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:29,854	[INFO]	190	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:29,855	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:29,856	[INFO]	191	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:52:29,857	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:29,858	[INFO]	192	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:52:29,858	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:30,775	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:52:30,777	[INFO]	194	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:52:30,778	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:30,780	[INFO]	195	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:52:30,781	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:33,883	[INFO]	196	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:52:33,884	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:36,976	[INFO]	197	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:52:36,977	[INFO]	198	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:52:36,978	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             rows.add(row);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:52:40,032	[INFO]	199	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:52:40,033	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:43,263	[INFO]	200	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:52:43,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:44,135	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:52:47,257	[INFO]	202	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 10:52:47,258	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:50,278	[INFO]	203	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:52:50,279	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,33 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:53,439	[INFO]	204	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:52:53,441	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 27,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:56,464	[INFO]	205	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:52:56,466	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,24 ****
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             init.add(1);
              ArrayList<Integer> row = new ArrayList<Integer>();
+             init.add(1);
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 28,34 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:52:59,585	[INFO]	206	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:52:59,586	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             init.add(1);
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 27,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:02,746	[INFO]	207	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:53:02,747	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:05,818	[INFO]	208	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:53:05,819	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,38 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
              rows.add(row);
          }
  
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
+             int upleft, upright;
              rows.add(row);
          }
  

2020-12-18 10:53:09,026	[INFO]	209	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:53:09,027	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
+             int upleft, upright;
              rows.add(row);
          }
  

2020-12-18 10:53:09,028	[INFO]	210	SUCCESS	+4.0	
2020-12-18 10:53:09,028	[DEBUG]	
2020-12-18 10:53:12,028	[INFO]	211	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:53:12,029	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:12,030	[INFO]	212	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:53:12,031	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:12,032	[INFO]	213	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:53:12,032	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:12,033	[INFO]	214	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:53:12,034	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:12,035	[INFO]	215	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:53:12,035	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:12,922	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:53:16,054	[INFO]	217	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:53:16,055	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:53:16,944	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:53:20,029	[INFO]	219	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:53:20,030	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,35 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
!                     if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:23,079	[INFO]	220	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:53:23,080	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 27,32 ****
--- 27,35 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:26,140	[INFO]	221	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:53:26,141	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,35 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:26,142	[INFO]	222	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:53:26,142	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,35 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:53:26,143	[INFO]	223	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 10:53:26,143	[DEBUG]	
2020-12-18 10:53:27,063	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:53:27,066	[INFO]	225	SUCCESS	+4.0	
2020-12-18 10:53:27,067	[DEBUG]	
2020-12-18 10:53:30,139	[INFO]	226	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:53:30,140	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:53:33,213	[INFO]	227	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:53:33,214	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,25 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             rows.add(init);
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:53:36,277	[INFO]	228	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:53:36,278	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,25 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             rows.add(init);
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,38 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 10:53:36,280	[INFO]	229	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:53:36,280	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,25 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 18,26 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             rows.add(init);
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:53:39,401	[INFO]	230	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:53:39,402	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             rows.add(init);
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:53:40,323	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 10:53:43,372	[INFO]	232	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:53:43,373	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 18,27 ****
          rows.add(init);
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 18,28 ----
          rows.add(init);
  
          for (int r=1; r<n; r++) {
+             rows.add(init);
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:53:46,489	[INFO]	233	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:53:46,490	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:53:47,369	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:53:50,404	[INFO]	235	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:53:50,405	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:53:50,406	[INFO]	236	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 10:53:50,406	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:53:50,407	[INFO]	237	SUCCESS	+4.0	
2020-12-18 10:53:50,407	[DEBUG]	
2020-12-18 10:53:51,314	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:53:52,193	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:53:53,110	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:53:53,111	[INFO]	241	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:53:53,112	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:53:53,112	[INFO]	242	SUCCESS	+4.0	
2020-12-18 10:53:53,113	[DEBUG]	
2020-12-18 10:53:54,034	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:53:54,910	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:53:57,967	[INFO]	245	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:53:57,968	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:53:57,969	[INFO]	246	SUCCESS	+4.0	
2020-12-18 10:53:57,969	[DEBUG]	
2020-12-18 10:54:01,044	[INFO]	247	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:54:01,904	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:54:04,909	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:54:04,910	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         ArrayList<Integer> row = new ArrayList<Integer>();
  
          return rows;
      }

2020-12-18 10:54:04,911	[INFO]	250	SUCCESS	+4.0	
2020-12-18 10:54:04,911	[DEBUG]	
2020-12-18 10:54:07,998	[INFO]	251	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:54:08,000	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:54:11,086	[INFO]	252	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:11,088	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:54:11,090	[INFO]	253	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:11,091	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:54:11,093	[INFO]	254	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:11,094	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:54:14,141	[INFO]	255	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:54:14,141	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:54:14,143	[INFO]	256	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:54:14,143	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,39 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:54:14,988	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:54:15,948	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:54:16,858	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:54:17,794	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:18,688	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:54:19,571	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:54:20,465	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:54:21,371	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:54:24,498	[INFO]	265	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:54:24,500	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:54:25,367	[INFO]	266	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:54:25,368	[INFO]	267	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:54:25,369	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:54:25,370	[INFO]	268	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:54:25,370	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:54:28,443	[INFO]	269	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:54:28,446	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
***************
*** 36,41 ****
--- 36,43 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 10:54:44,655	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:54:47,754	[INFO]	271	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:54:47,755	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,43 ----
              rows.add(row);
          }
  
+         ArrayList<Integer> row = new ArrayList<Integer>();
+ 
          return rows;
      }
  }

2020-12-18 10:54:48,636	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:54:48,638	[INFO]	273	SUCCESS	+4.0	
2020-12-18 10:54:48,638	[DEBUG]	
2020-12-18 10:54:48,639	[INFO]	274	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:54:48,639	[DEBUG]	
2020-12-18 10:54:49,554	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:54:49,555	[INFO]	276	SUCCESS	+4.0	
2020-12-18 10:54:49,555	[DEBUG]	
2020-12-18 10:54:52,678	[INFO]	277	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:54:52,679	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 28,33 ****
--- 28,36 ----
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }

2020-12-18 10:54:52,679	[INFO]	278	SUCCESS	+4.0	
2020-12-18 10:54:52,680	[DEBUG]	
2020-12-18 10:54:53,408	[INFO]	279	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:54:54,299	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 10:54:57,333	[INFO]	281	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:54:57,334	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:54:57,335	[INFO]	282	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:57,335	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:54:57,336	[INFO]	283	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:54:57,336	[DEBUG]	
2020-12-18 10:54:58,218	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:54:58,220	[INFO]	285	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:54:58,220	[DEBUG]	
2020-12-18 10:54:58,221	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:54:59,142	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:55:00,045	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 10:55:00,957	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:55:01,845	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:55:01,847	[INFO]	291	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:55:01,847	[DEBUG]	
2020-12-18 10:55:01,847	[INFO]	292	SUCCESS	+4.0	
2020-12-18 10:55:01,848	[DEBUG]	
2020-12-18 10:55:04,943	[INFO]	293	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:55:05,818	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:55:08,911	[INFO]	295	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:55:08,912	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     init.add(1);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:55:08,913	[INFO]	296	SUCCESS	+4.0	
2020-12-18 10:55:08,913	[DEBUG]	
2020-12-18 10:55:11,943	[INFO]	297	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:55:11,944	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:55:12,837	[INFO]	298	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:55:12,838	[INFO]	299	SUCCESS	+4.0	
2020-12-18 10:55:12,838	[DEBUG]	
2020-12-18 10:55:13,735	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:55:14,652	[INFO]	301	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:55:15,553	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:55:16,450	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:55:17,203	[INFO]	304	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:55:20,257	[INFO]	305	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:55:23,355	[INFO]	306	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:55:23,356	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:55:26,416	[INFO]	307	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:55:26,417	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:55:26,417	[INFO]	308	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:55:26,418	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 10:55:26,418	[INFO]	309	SUCCESS	+4.0	
2020-12-18 10:55:26,419	[DEBUG]	
2020-12-18 10:55:27,294	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:55:30,417	[INFO]	311	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:55:30,418	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     init.add(1);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:55:31,325	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:55:31,327	[INFO]	313	SUCCESS	+4.0	
2020-12-18 10:55:31,328	[DEBUG]	
2020-12-18 10:55:34,464	[INFO]	314	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:55:34,466	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:55:35,324	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 10:55:38,496	[INFO]	316	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:55:38,497	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 upleft = 0;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 32,40 ----
                  } else {
                      upright = 0;
                  }
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:55:39,431	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:55:39,433	[INFO]	318	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:55:39,433	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
              }
              rows.add(row);
          }

2020-12-18 10:55:39,434	[INFO]	319	SUCCESS	+4.0	
2020-12-18 10:55:39,435	[DEBUG]	
2020-12-18 10:55:42,554	[INFO]	320	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:55:45,601	[INFO]	321	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:55:48,697	[INFO]	322	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:55:48,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:55:48,699	[INFO]	323	SUCCESS	+4.0	
2020-12-18 10:55:48,699	[DEBUG]	
2020-12-18 10:55:48,700	[INFO]	324	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:55:51,888	[INFO]	325	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:55:51,889	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:55:51,889	[INFO]	326	SUCCESS	+4.0	
2020-12-18 10:55:51,890	[DEBUG]	
2020-12-18 10:55:55,008	[INFO]	327	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:55:55,009	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:55:55,907	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:55:59,060	[INFO]	329	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:55:59,061	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:55:59,062	[INFO]	330	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:55:59,062	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 10:55:59,063	[INFO]	331	SUCCESS	+4.0	
2020-12-18 10:55:59,063	[DEBUG]	
2020-12-18 10:56:02,075	[INFO]	332	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:56:02,078	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:56:02,080	[INFO]	333	SUCCESS	+4.0	
2020-12-18 10:56:02,081	[DEBUG]	
2020-12-18 10:56:05,109	[INFO]	334	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:56:05,109	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             init.add(1);
          }
  
          return rows;

2020-12-18 10:56:05,110	[INFO]	335	SUCCESS	+4.0	
2020-12-18 10:56:05,110	[DEBUG]	
2020-12-18 10:56:08,283	[INFO]	336	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:56:08,285	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:56:09,119	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:56:09,120	[INFO]	338	SUCCESS	+4.0	
2020-12-18 10:56:09,120	[DEBUG]	
2020-12-18 10:56:12,225	[INFO]	339	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:56:12,226	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:56:12,227	[INFO]	340	SUCCESS	+4.0	
2020-12-18 10:56:12,227	[DEBUG]	
2020-12-18 10:56:13,115	[INFO]	341	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:56:13,850	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:56:14,729	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:56:14,731	[INFO]	344	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 10:56:17,804	[INFO]	345	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:56:17,805	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:56:20,891	[INFO]	346	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:56:20,892	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,63 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:56:20,893	[INFO]	347	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:56:20,894	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             rows.add(row);
+         }
+ 
          return rows;
      }
  }

2020-12-18 10:56:20,894	[INFO]	348	SUCCESS	+4.0	
2020-12-18 10:56:20,894	[DEBUG]	
2020-12-18 10:56:23,954	[INFO]	349	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:56:23,955	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:56:23,955	[INFO]	350	SUCCESS	+4.0	
2020-12-18 10:56:23,956	[DEBUG]	
2020-12-18 10:56:24,733	[INFO]	351	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:56:24,735	[INFO]	352	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:56:24,735	[DEBUG]	
2020-12-18 10:56:25,649	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:56:26,542	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:56:26,544	[INFO]	355	SUCCESS	+4.0	
2020-12-18 10:56:26,544	[DEBUG]	
2020-12-18 10:56:27,467	[INFO]	356	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 10:56:30,600	[INFO]	357	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:56:30,600	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 10:56:30,602	[INFO]	358	SUCCESS	+4.0	
2020-12-18 10:56:30,602	[DEBUG]	
2020-12-18 10:56:31,513	[INFO]	359	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:56:34,593	[INFO]	360	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:56:34,594	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 return rows;
              }
              rows.add(row);
          }

2020-12-18 10:56:34,595	[INFO]	361	SUCCESS	+4.0	
2020-12-18 10:56:34,596	[DEBUG]	
2020-12-18 10:56:37,716	[INFO]	362	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:56:40,830	[INFO]	363	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:56:40,831	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 10:56:41,635	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:56:41,637	[INFO]	365	SUCCESS	+4.0	
2020-12-18 10:56:41,637	[DEBUG]	
2020-12-18 10:56:42,524	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 10:56:45,584	[INFO]	367	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:56:45,585	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 10:56:45,586	[INFO]	368	SUCCESS	+4.0	
2020-12-18 10:56:45,586	[DEBUG]	
2020-12-18 10:56:48,697	[INFO]	369	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:56:48,697	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 10:56:48,698	[INFO]	370	SUCCESS	+4.0	
2020-12-18 10:56:48,698	[DEBUG]	
2020-12-18 10:56:51,733	[INFO]	371	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:56:52,634	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:56:55,711	[INFO]	373	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:56:55,712	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upleft = rows.get(r-1).get(c-1);
              }
              rows.add(row);
          }

2020-12-18 10:56:56,594	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:56:59,735	[INFO]	375	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:56:59,736	[INFO]	376	SUCCESS	+4.0	
2020-12-18 10:56:59,736	[DEBUG]	
2020-12-18 10:57:00,635	[INFO]	377	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:57:00,636	[INFO]	378	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:57:01,503	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:57:04,542	[INFO]	380	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 10:57:04,543	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(init);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 10:57:04,544	[INFO]	381	SUCCESS	+4.0	
2020-12-18 10:57:04,544	[DEBUG]	
2020-12-18 10:57:07,552	[INFO]	382	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:57:07,552	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:07,553	[INFO]	383	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 10:57:07,554	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:07,555	[INFO]	384	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:57:07,555	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:07,556	[INFO]	385	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:57:07,556	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:07,557	[INFO]	386	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:57:07,558	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:08,448	[INFO]	387	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:57:08,450	[INFO]	388	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:57:08,450	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:08,451	[INFO]	389	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:57:08,452	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 10:57:08,453	[INFO]	390	SUCCESS	+4.0	
2020-12-18 10:57:08,453	[DEBUG]	
2020-12-18 10:57:09,196	[INFO]	391	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 10:57:12,363	[INFO]	392	SUCCESS	*3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:57:12,365	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:57:13,281	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:57:14,190	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:57:15,081	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 10:57:15,985	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:57:16,913	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:57:20,038	[INFO]	398	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 10:57:23,138	[INFO]	399	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:57:23,139	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,47 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:57:26,272	[INFO]	400	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:57:29,342	[INFO]	401	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:57:29,343	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,26 ****
--- 21,41 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
+                 if (c < 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {

2020-12-18 10:57:32,507	[INFO]	402	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:57:33,395	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:57:34,301	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:57:37,421	[INFO]	405	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 10:57:40,490	[INFO]	406	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 10:57:40,492	[INFO]	407	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:57:40,493	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,47 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:57:43,694	[INFO]	408	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:57:43,695	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,46 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c != r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:57:46,747	[INFO]	409	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:57:49,826	[INFO]	410	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 10:57:49,827	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:57:50,695	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:57:53,819	[INFO]	412	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:57:53,820	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,39 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:57:54,706	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:57:57,865	[INFO]	414	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:57:57,866	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c != r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:00,947	[INFO]	415	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 10:58:01,866	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:58:04,930	[INFO]	417	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:58:04,932	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:08,117	[INFO]	418	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:58:08,122	[INFO]	419	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 10:58:08,124	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:08,128	[INFO]	420	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:58:08,131	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:08,134	[INFO]	421	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:58:08,137	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:08,141	[INFO]	422	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:58:08,144	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,39 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:09,077	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:58:12,263	[INFO]	424	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:58:12,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,40 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 upright = 0;
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:58:15,291	[INFO]	425	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:58:15,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,47 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
+                 if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:58:18,325	[INFO]	426	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 10:58:18,326	[INFO]	427	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:58:18,327	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,47 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upleft = 0;
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 10:58:18,328	[INFO]	428	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 10:58:19,236	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:58:19,238	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:58:22,358	[INFO]	431	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:58:22,359	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:58:22,360	[INFO]	432	SUCCESS	 4.0	
2020-12-18 10:58:25,456	[INFO]	433	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 10:58:28,853	[INFO]	434	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 10:58:30,087	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:58:31,499	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:58:35,467	[INFO]	437	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 10:58:35,468	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c != r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:58:35,470	[INFO]	438	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:58:35,470	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:58:35,471	[INFO]	439	SUCCESS	 4.0	
2020-12-18 10:58:36,392	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:58:39,495	[INFO]	441	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:58:54,987	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 10:58:55,919	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 10:58:55,921	[INFO]	444	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:58:55,922	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:58:59,096	[INFO]	445	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:58:59,097	[INFO]	446	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:58:59,097	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:02,129	[INFO]	447	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:59:02,130	[INFO]	448	SUCCESS	 4.0	
2020-12-18 10:59:02,132	[INFO]	449	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 10:59:05,166	[INFO]	450	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 10:59:08,351	[INFO]	451	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:59:09,217	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:59:09,982	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:59:13,145	[INFO]	454	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 10:59:13,149	[INFO]	455	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 10:59:14,039	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:59:14,997	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:59:18,104	[INFO]	458	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:59:18,982	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:59:18,984	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:59:19,915	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:59:20,686	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 10:59:21,595	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 10:59:21,597	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 10:59:22,348	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:59:22,351	[INFO]	466	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:59:22,352	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:22,353	[INFO]	467	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:59:22,354	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:23,266	[INFO]	468	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 10:59:23,269	[INFO]	469	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 10:59:23,270	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:24,176	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 10:59:24,177	[INFO]	471	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:59:24,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:25,074	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:59:25,077	[INFO]	473	SUCCESS	 4.0	
2020-12-18 10:59:26,076	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 10:59:27,013	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 10:59:27,015	[INFO]	476	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 10:59:30,123	[INFO]	477	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 10:59:30,124	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c!=r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {

2020-12-18 10:59:31,058	[INFO]	478	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 10:59:31,062	[INFO]	479	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:59:31,063	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:31,065	[INFO]	480	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 10:59:31,067	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:31,957	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:59:35,083	[INFO]	482	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:59:35,085	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:35,088	[INFO]	483	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:59:35,089	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:38,232	[INFO]	484	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:59:38,236	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,46 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upleft = rows.get(r-1).get(c-1);
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:38,239	[INFO]	485	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:59:38,242	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,46 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upleft = rows.get(r-1).get(c-1);
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:41,407	[INFO]	486	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 10:59:41,409	[INFO]	487	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 10:59:41,409	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,46 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upleft = rows.get(r-1).get(c-1);
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:42,311	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 10:59:45,389	[INFO]	489	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 10:59:48,569	[INFO]	490	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:59:48,570	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,49 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     upleft = rows.get(r-1).get(c-1);
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 10:59:49,444	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 10:59:50,395	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 10:59:50,400	[INFO]	493	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:59:50,402	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:51,352	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 10:59:52,107	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 10:59:52,108	[INFO]	496	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 10:59:52,109	[INFO]	497	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 10:59:52,109	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,45 ----
                  } else {
                      upleft = 0;
                  }
+                 if (c <= r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 10:59:52,110	[INFO]	498	SUCCESS	+3.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 10:59:52,111	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 10:59:53,013	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 10:59:53,014	[INFO]	500	SUCCESS	 4.0	
2020-12-18 10:59:53,015	[INFO]	==== END ====
2020-12-18 10:59:53,015	[INFO]	Reason: step budget
2020-12-18 10:59:53,016	[INFO]	
2020-12-18 10:59:53,016	[INFO]	========== EPOCH 18 ==========
2020-12-18 10:59:53,016	[INFO]	==== WARMUP ====
2020-12-18 10:59:56,082	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:59:56,082	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 10:59:59,139	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 10:59:59,139	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:00:02,275	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:00:02,276	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:00:05,329	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 11:00:05,330	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:00:05,330	[INFO]	==== START ====
2020-12-18 11:00:08,386	[INFO]	1	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:00:09,296	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:00:10,209	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:00:10,211	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:00:10,211	[DEBUG]	
2020-12-18 11:00:13,281	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:00:13,282	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:00:13,283	[INFO]	6	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:00:13,283	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:00:13,284	[INFO]	7	SUCCESS	+4.0	
2020-12-18 11:00:13,284	[DEBUG]	
2020-12-18 11:00:16,385	[INFO]	8	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:00:16,386	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
+             int upleft, upright;
              rows.add(row);
          }
  

2020-12-18 11:00:16,387	[INFO]	9	SUCCESS	+4.0	
2020-12-18 11:00:16,387	[DEBUG]	
2020-12-18 11:00:17,277	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:00:20,477	[INFO]	11	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:00:20,478	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upright = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:00:21,350	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:00:22,249	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:00:22,250	[INFO]	14	SUCCESS	+4.0	
2020-12-18 11:00:22,250	[DEBUG]	
2020-12-18 11:00:23,156	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:00:26,225	[INFO]	16	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:00:27,127	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:00:28,039	[INFO]	18	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:00:31,175	[INFO]	19	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:00:31,177	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:00:32,121	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:00:32,124	[INFO]	21	SUCCESS	+4.0	
2020-12-18 11:00:32,126	[DEBUG]	
2020-12-18 11:00:35,288	[INFO]	22	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:00:35,289	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:00:35,290	[INFO]	23	SUCCESS	+4.0	
2020-12-18 11:00:35,291	[DEBUG]	
2020-12-18 11:00:36,465	[INFO]	24	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:00:37,378	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:00:38,568	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:00:41,986	[INFO]	27	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:00:41,987	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:00:42,874	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:00:42,875	[INFO]	29	SUCCESS	+4.0	
2020-12-18 11:00:42,875	[DEBUG]	
2020-12-18 11:00:43,759	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:00:44,723	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:00:45,657	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:00:46,545	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:00:49,560	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:00:49,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:00:49,562	[INFO]	35	SUCCESS	+4.0	
2020-12-18 11:00:49,562	[DEBUG]	
2020-12-18 11:00:50,367	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:00:51,248	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:00:52,165	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:00:52,911	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:00:55,949	[INFO]	40	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:00:55,950	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:00:56,845	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:00:59,922	[INFO]	42	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:00:59,923	[INFO]	43	SUCCESS	+4.0	
2020-12-18 11:00:59,924	[DEBUG]	
2020-12-18 11:01:03,012	[INFO]	44	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:01:03,013	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 }
              }
              rows.add(row);
          }

2020-12-18 11:01:03,015	[INFO]	45	SUCCESS	+4.0	
2020-12-18 11:01:03,015	[DEBUG]	
2020-12-18 11:01:06,119	[INFO]	46	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:01:06,120	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:01:07,020	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:01:07,024	[INFO]	48	SUCCESS	+4.0	
2020-12-18 11:01:07,025	[DEBUG]	
2020-12-18 11:01:10,078	[INFO]	49	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:01:10,078	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:01:10,079	[INFO]	50	SUCCESS	+4.0	
2020-12-18 11:01:10,080	[DEBUG]	
2020-12-18 11:01:13,186	[INFO]	51	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:01:13,187	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:01:16,267	[INFO]	52	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:01:16,268	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:01:16,268	[INFO]	==== END ====
2020-12-18 11:01:16,268	[INFO]	Reason: target fitness reached
2020-12-18 11:01:16,269	[INFO]	
2020-12-18 11:01:16,269	[INFO]	========== EPOCH 19 ==========
2020-12-18 11:01:16,270	[INFO]	==== WARMUP ====
2020-12-18 11:01:19,334	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:01:19,335	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:01:22,446	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:01:22,446	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:01:25,458	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:01:25,458	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:01:28,584	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 11:01:28,585	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:01:28,585	[INFO]	==== START ====
2020-12-18 11:01:31,651	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:01:31,651	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:01:31,652	[INFO]	2	SUCCESS	+4.0	
2020-12-18 11:01:31,652	[DEBUG]	
2020-12-18 11:01:32,570	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:01:33,482	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:01:34,398	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:01:37,444	[INFO]	6	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:01:37,445	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 init.add(1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:01:37,445	[INFO]	7	SUCCESS	+4.0	
2020-12-18 11:01:37,446	[DEBUG]	
2020-12-18 11:01:38,353	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:01:41,503	[INFO]	9	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:01:42,434	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:01:45,561	[INFO]	11	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:01:45,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:01:48,681	[INFO]	12	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:01:48,682	[INFO]	13	SUCCESS	+4.0	
2020-12-18 11:01:48,683	[DEBUG]	
2020-12-18 11:01:49,537	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:01:50,290	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:01:51,200	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:01:54,325	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:01:54,326	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 11:01:55,245	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:01:56,121	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:01:59,185	[INFO]	20	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:01:59,185	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:02:00,093	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:02:00,992	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:02:04,102	[INFO]	23	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:02:04,102	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:02:04,978	[INFO]	24	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:02:04,979	[INFO]	25	SUCCESS	+4.0	
2020-12-18 11:02:04,980	[DEBUG]	
2020-12-18 11:02:05,872	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:02:06,814	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:02:07,734	[INFO]	28	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:02:08,588	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:02:09,356	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:02:10,243	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:02:13,396	[INFO]	32	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:02:16,402	[INFO]	33	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:02:16,403	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 11:02:16,404	[INFO]	34	SUCCESS	+4.0	
2020-12-18 11:02:16,404	[DEBUG]	
2020-12-18 11:02:16,406	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:02:17,140	[INFO]	36	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:02:18,037	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:02:18,038	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:02:18,965	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:02:22,000	[INFO]	40	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:02:24,993	[INFO]	41	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:02:24,994	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     return rows;
                  }
                  row.add(upleft+upright);
              }

2020-12-18 11:02:28,102	[INFO]	42	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:02:28,103	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     return rows;
                  }
                  row.add(upleft+upright);
              }

2020-12-18 11:02:31,185	[INFO]	43	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:02:31,187	[INFO]	44	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:02:31,188	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     return rows;
                  }
                  row.add(upleft+upright);
              }

2020-12-18 11:02:34,314	[INFO]	45	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:02:37,502	[INFO]	46	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:02:37,503	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:02:37,504	[INFO]	47	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:02:37,504	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,35 ****
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     upright = 0;
                  }
                  row.add(upleft+upright);
              }
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
!                     return rows;
                  }
                  row.add(upleft+upright);
              }

2020-12-18 11:02:37,505	[INFO]	48	SUCCESS	+4.0	
2020-12-18 11:02:37,505	[DEBUG]	
2020-12-18 11:02:38,383	[INFO]	49	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:02:39,309	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:02:39,312	[INFO]	51	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:02:39,313	[DEBUG]	
2020-12-18 11:02:42,418	[INFO]	52	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:02:42,420	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:02:43,287	[INFO]	53	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:02:43,289	[INFO]	54	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:02:43,289	[DEBUG]	
2020-12-18 11:02:46,411	[INFO]	55	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:02:46,412	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:02:49,553	[INFO]	56	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:02:49,554	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:02:52,641	[INFO]	57	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:02:52,642	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:02:52,643	[INFO]	58	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:02:52,643	[DEBUG]	
2020-12-18 11:02:52,644	[INFO]	59	SUCCESS	+4.0	
2020-12-18 11:02:52,645	[DEBUG]	
2020-12-18 11:02:55,725	[INFO]	60	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:02:55,726	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:02:55,727	[INFO]	61	SUCCESS	+4.0	
2020-12-18 11:02:55,727	[DEBUG]	
2020-12-18 11:02:58,857	[INFO]	62	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:02:58,858	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:02:59,611	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:02:59,612	[INFO]	64	SUCCESS	+4.0	
2020-12-18 11:02:59,612	[DEBUG]	
2020-12-18 11:03:00,366	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:03:00,367	[INFO]	66	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:03:00,367	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:03:00,368	[INFO]	67	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:03:00,369	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:03:01,270	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:03:01,272	[INFO]	69	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:03:01,272	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:03:02,135	[INFO]	70	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:03:02,136	[INFO]	71	SUCCESS	+4.0	
2020-12-18 11:03:02,137	[DEBUG]	
2020-12-18 11:03:03,048	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:03:03,932	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:03:04,827	[INFO]	74	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:03:04,828	[INFO]	75	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:03:04,828	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:04,829	[INFO]	76	SUCCESS	+4.0	
2020-12-18 11:03:04,829	[DEBUG]	
2020-12-18 11:03:05,734	[INFO]	77	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:03:06,657	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:03:07,568	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:03:10,700	[INFO]	80	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:03:10,701	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:11,573	[INFO]	81	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:03:11,574	[INFO]	82	SUCCESS	+4.0	
2020-12-18 11:03:11,575	[DEBUG]	
2020-12-18 11:03:12,502	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:03:12,505	[INFO]	84	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:03:12,506	[DEBUG]	
2020-12-18 11:03:15,548	[INFO]	85	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:03:15,549	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:16,410	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:03:17,310	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:03:17,311	[INFO]	88	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:03:17,312	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:20,332	[INFO]	89	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:03:20,333	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 }
              }
              rows.add(row);
          }

2020-12-18 11:03:20,334	[INFO]	90	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:03:20,335	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:20,336	[INFO]	91	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:03:20,336	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:21,215	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:03:22,109	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:03:22,852	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:03:22,853	[INFO]	95	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:03:22,854	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:23,747	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:03:26,940	[INFO]	97	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:03:26,941	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:03:27,814	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:03:30,846	[INFO]	99	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:03:30,847	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
+                     init.add(1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:03:33,908	[INFO]	100	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:03:33,909	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
!                     init.add(1);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:03:37,213	[INFO]	101	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:03:37,214	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:03:38,136	[INFO]	102	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:03:41,369	[INFO]	103	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:03:41,369	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:03:42,238	[INFO]	104	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:03:45,281	[INFO]	105	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:03:45,282	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:03:46,214	[INFO]	106	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:03:46,215	[INFO]	107	SUCCESS	+4.0	
2020-12-18 11:03:46,215	[DEBUG]	
2020-12-18 11:03:46,216	[INFO]	108	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:03:46,217	[DEBUG]	
2020-12-18 11:03:47,119	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:03:47,120	[INFO]	110	SUCCESS	+4.0	
2020-12-18 11:03:47,120	[DEBUG]	
2020-12-18 11:03:48,027	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:03:51,042	[INFO]	112	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:03:51,043	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 11:03:51,044	[INFO]	113	SUCCESS	+4.0	
2020-12-18 11:03:51,044	[DEBUG]	
2020-12-18 11:03:54,115	[INFO]	114	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:03:54,117	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 11:03:54,986	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:03:58,008	[INFO]	116	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 11:03:58,009	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,29 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
--- 17,30 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 11:03:58,010	[INFO]	117	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:03:58,010	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 24,29 ****
--- 24,30 ----
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
+                     rows.add(init);
                      upleft = 0;
                  }
                  if (c < r) {

2020-12-18 11:03:58,011	[INFO]	118	SUCCESS	+4.0	
2020-12-18 11:03:58,011	[DEBUG]	
2020-12-18 11:03:58,924	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:03:58,925	[INFO]	120	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:03:58,926	[DEBUG]	
2020-12-18 11:03:58,926	[INFO]	121	SUCCESS	+4.0	
2020-12-18 11:03:58,926	[DEBUG]	
2020-12-18 11:04:02,121	[INFO]	122	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:04:02,122	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:04:02,123	[INFO]	123	SUCCESS	+4.0	
2020-12-18 11:04:02,123	[DEBUG]	
2020-12-18 11:04:02,823	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:04:03,700	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:04:04,634	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:04:05,362	[INFO]	127	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:04:08,385	[INFO]	128	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:04:08,386	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:04:09,269	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:04:09,270	[INFO]	130	SUCCESS	+4.0	
2020-12-18 11:04:09,270	[DEBUG]	
2020-12-18 11:04:10,143	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:04:11,044	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:04:11,957	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:04:12,909	[INFO]	134	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:04:15,932	[INFO]	135	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:04:15,932	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:15,933	[INFO]	136	SUCCESS	+4.0	
2020-12-18 11:04:15,933	[DEBUG]	
2020-12-18 11:04:16,841	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:04:19,913	[INFO]	138	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:04:19,914	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(row);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 11:04:20,796	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:04:20,797	[INFO]	140	SUCCESS	+4.0	
2020-12-18 11:04:20,797	[DEBUG]	
2020-12-18 11:04:23,864	[INFO]	141	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:04:23,865	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:04:23,865	[INFO]	142	SUCCESS	+4.0	
2020-12-18 11:04:23,866	[DEBUG]	
2020-12-18 11:04:24,761	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:04:24,762	[INFO]	144	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:04:24,763	[DEBUG]	
2020-12-18 11:04:24,763	[INFO]	145	SUCCESS	+4.0	
2020-12-18 11:04:24,763	[DEBUG]	
2020-12-18 11:04:25,647	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:04:28,786	[INFO]	147	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:04:28,787	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 11:04:28,788	[INFO]	148	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:04:28,789	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 11:04:28,790	[INFO]	149	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:04:28,791	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             init.add(1);
              rows.add(row);
          }
  

2020-12-18 11:04:28,792	[INFO]	150	SUCCESS	+4.0	
2020-12-18 11:04:28,792	[DEBUG]	
2020-12-18 11:04:28,793	[INFO]	151	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:04:28,793	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:04:28,794	[INFO]	152	SUCCESS	+4.0	
2020-12-18 11:04:28,795	[DEBUG]	
2020-12-18 11:04:31,914	[INFO]	153	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:04:31,915	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 11:04:31,915	[INFO]	154	SUCCESS	+4.0	
2020-12-18 11:04:31,916	[DEBUG]	
2020-12-18 11:04:32,793	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:04:33,681	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:04:34,602	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:04:35,518	[INFO]	158	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:04:38,627	[INFO]	159	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:04:38,628	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 init.add(1);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:04:38,628	[INFO]	160	SUCCESS	+4.0	
2020-12-18 11:04:38,629	[DEBUG]	
2020-12-18 11:04:41,730	[INFO]	161	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:04:41,731	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 rows.add(init);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:04:41,731	[INFO]	162	SUCCESS	+4.0	
2020-12-18 11:04:41,732	[DEBUG]	
2020-12-18 11:04:44,796	[INFO]	163	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:04:45,528	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:04:46,421	[INFO]	165	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:04:49,494	[INFO]	166	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:04:49,495	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upright = rows.get(r-1).get(c);
              }
              rows.add(row);
          }

2020-12-18 11:04:49,496	[INFO]	167	SUCCESS	+4.0	
2020-12-18 11:04:49,496	[DEBUG]	
2020-12-18 11:04:49,497	[INFO]	168	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:04:49,497	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:04:49,498	[INFO]	169	SUCCESS	+4.0	
2020-12-18 11:04:49,498	[DEBUG]	
2020-12-18 11:04:52,584	[INFO]	170	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:04:52,585	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:55,661	[INFO]	171	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:04:55,663	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:58,744	[INFO]	172	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:04:58,747	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:04:59,664	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:04:59,667	[INFO]	174	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:04:59,668	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:59,669	[INFO]	175	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:04:59,670	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:59,672	[INFO]	176	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:04:59,672	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:04:59,674	[INFO]	177	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:04:59,674	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:05:00,612	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:05:03,698	[INFO]	179	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:05:03,699	[INFO]	180	SUCCESS	+4.0	
2020-12-18 11:05:03,699	[DEBUG]	
2020-12-18 11:05:03,700	[INFO]	181	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:05:03,701	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:05:03,701	[INFO]	182	SUCCESS	+4.0	
2020-12-18 11:05:03,702	[DEBUG]	
2020-12-18 11:05:04,599	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:05:05,514	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:05:06,434	[INFO]	185	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:05:06,435	[INFO]	186	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:05:07,346	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:05:10,360	[INFO]	188	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:05:10,361	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:05:13,451	[INFO]	189	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:05:13,453	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,27 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 17,27 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:05:16,547	[INFO]	190	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:05:16,548	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 11:05:19,618	[INFO]	191	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:05:19,620	[INFO]	192	SUCCESS	+4.0	
2020-12-18 11:05:19,621	[DEBUG]	
2020-12-18 11:05:22,739	[INFO]	193	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:05:22,741	[INFO]	194	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:05:22,741	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:05:25,843	[INFO]	195	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:05:25,844	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 27,33 ****
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
!                     return rows;
                  } else {
                      upright = 0;
                  }

2020-12-18 11:05:26,727	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:05:29,858	[INFO]	197	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:05:29,860	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,33 ****
                      upleft = 0;
                  }
                  if (c < r) {
!                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
!                     return rows;
                  } else {
                      upright = 0;
                  }

2020-12-18 11:05:29,863	[INFO]	198	SUCCESS	+4.0	
2020-12-18 11:05:29,864	[DEBUG]	
2020-12-18 11:05:30,742	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:05:31,489	[INFO]	200	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:05:34,629	[INFO]	201	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:05:37,860	[INFO]	202	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:05:37,860	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:05:38,788	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:05:38,790	[INFO]	204	SUCCESS	+4.0	
2020-12-18 11:05:38,790	[DEBUG]	
2020-12-18 11:05:39,720	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:05:39,722	[INFO]	206	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:05:39,722	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:05:39,723	[INFO]	207	SUCCESS	+4.0	
2020-12-18 11:05:39,723	[DEBUG]	
2020-12-18 11:05:42,850	[INFO]	208	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:05:42,853	[INFO]	209	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:05:42,854	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:05:42,856	[INFO]	210	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 11:05:42,857	[DEBUG]	
2020-12-18 11:05:42,859	[INFO]	211	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 11:05:42,859	[DEBUG]	
2020-12-18 11:05:42,862	[INFO]	212	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'})
2020-12-18 11:05:42,863	[DEBUG]	
2020-12-18 11:05:45,976	[INFO]	213	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:05:45,977	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 11:05:46,860	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:05:46,862	[INFO]	215	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:05:46,862	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 11:05:47,743	[INFO]	216	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:05:50,881	[INFO]	217	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:05:50,883	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 11:05:53,970	[INFO]	218	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:05:54,874	[INFO]	219	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:05:54,875	[INFO]	220	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:05:54,876	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 11:05:54,877	[INFO]	221	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:05:54,877	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 11:05:58,010	[INFO]	222	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:05:58,011	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 11:05:58,012	[INFO]	223	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:05:58,013	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             int upleft, upright;
          }
  
          return rows;

2020-12-18 11:06:01,152	[INFO]	224	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:01,153	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,38 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:04,214	[INFO]	225	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:04,217	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:04,220	[INFO]	226	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:04,222	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:04,225	[INFO]	227	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:04,227	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:04,232	[INFO]	228	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:06:04,234	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:04,237	[INFO]	229	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:04,239	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:07,270	[INFO]	230	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 11:06:07,272	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:07,274	[INFO]	231	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:07,275	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,38 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             for (int c=0; c==r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 47,52 ----

2020-12-18 11:06:10,326	[INFO]	232	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:10,328	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:11,249	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:11,251	[INFO]	234	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:11,251	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:11,252	[INFO]	235	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:11,253	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:12,199	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:06:15,361	[INFO]	237	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:15,362	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:15,364	[INFO]	238	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:06:15,365	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:15,366	[INFO]	239	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:06:15,367	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:15,368	[INFO]	240	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:06:15,368	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:18,412	[INFO]	241	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:06:18,414	[INFO]	242	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:18,415	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:18,416	[INFO]	243	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:19,308	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:06:19,310	[INFO]	245	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:06:19,311	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:19,313	[INFO]	246	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:06:19,313	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:20,225	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:06:20,227	[INFO]	248	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:06:20,229	[INFO]	249	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:06:20,230	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:21,121	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:06:21,124	[INFO]	251	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:21,125	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:21,126	[INFO]	252	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:06:21,127	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:21,900	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:06:21,904	[INFO]	254	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:21,906	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:22,772	[INFO]	255	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:22,774	[INFO]	256	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:22,775	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:22,777	[INFO]	257	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:06:22,778	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,879	[INFO]	258	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 11:06:25,881	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,884	[INFO]	259	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:06:25,886	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,889	[INFO]	260	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:06:25,891	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,894	[INFO]	261	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 11:06:25,895	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,897	[INFO]	262	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:25,899	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r<n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:25,901	[INFO]	263	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:25,903	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:26,833	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:26,835	[INFO]	265	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:26,836	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:26,838	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:26,840	[INFO]	267	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:06:26,841	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:27,737	[INFO]	268	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:06:27,739	[INFO]	269	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:06:27,740	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:27,742	[INFO]	270	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:06:27,743	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:27,746	[INFO]	271	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:06:27,747	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 36,41 ****
--- 36,60 ----
              rows.add(row);
          }
  
+         for (int r=1; r==n; r++) {
+             ArrayList<Integer> row = new ArrayList<Integer>();
+             
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
+         }
+ 
          return rows;
      }
  }

2020-12-18 11:06:27,749	[INFO]	272	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:06:27,750	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:30,815	[INFO]	273	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:06:30,817	[INFO]	274	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:06:30,817	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:30,819	[INFO]	275	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:06:30,820	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:30,821	[INFO]	276	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:30,822	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:31,724	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:31,726	[INFO]	278	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:06:31,727	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:32,680	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:06:32,682	[INFO]	280	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:32,683	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:32,685	[INFO]	281	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:32,686	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:32,688	[INFO]	282	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:32,689	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:32,690	[INFO]	283	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:32,692	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:32,695	[INFO]	284	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:33,601	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:06:33,603	[INFO]	286	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:06:33,604	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:33,606	[INFO]	287	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:06:33,607	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:33,609	[INFO]	288	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:06:33,610	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:33,612	[INFO]	289	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:06:33,613	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:33,615	[INFO]	290	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:33,617	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,409	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:34,416	[INFO]	292	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:06:34,419	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,424	[INFO]	293	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:06:34,427	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,433	[INFO]	294	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:06:34,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,447	[INFO]	295	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:34,451	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,455	[INFO]	296	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:34,458	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,463	[INFO]	297	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:34,465	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,467	[INFO]	298	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:34,468	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,470	[INFO]	299	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:34,471	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:34,473	[INFO]	300	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:34,474	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:35,334	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:06:35,336	[INFO]	302	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:35,337	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:35,339	[INFO]	303	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:35,340	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:35,341	[INFO]	304	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:35,342	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,24 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r==n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:38,534	[INFO]	305	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:06:38,535	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:38,537	[INFO]	306	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:38,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:38,539	[INFO]	307	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:38,540	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:38,541	[INFO]	308	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:38,542	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:38,543	[INFO]	309	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:06:38,544	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,24 ****
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
+             
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
-             rows.add(row);
          }
  
          return rows;
--- 34,39 ----

2020-12-18 11:06:41,639	[INFO]	310	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:06:41,640	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:41,641	[INFO]	311	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:06:41,642	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:42,483	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:06:42,485	[INFO]	313	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:06:42,486	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:42,487	[INFO]	314	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:06:42,488	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:42,489	[INFO]	315	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:42,490	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:42,492	[INFO]	316	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:06:42,493	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:43,386	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:06:43,389	[INFO]	318	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:06:43,390	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,445	[INFO]	319	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:46,447	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 11:06:46,450	[INFO]	320	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:06:46,451	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 11:06:46,454	[INFO]	321	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:06:46,455	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,25 ----
          init.add(1);
          rows.add(init);
  
!         
! 
!         int upleft, upright;
  
          return rows;
      }

2020-12-18 11:06:46,457	[INFO]	322	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:06:46,460	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,461	[INFO]	323	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:06:46,462	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,464	[INFO]	324	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:06:46,465	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,467	[INFO]	325	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:06:46,468	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,471	[INFO]	326	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:06:46,472	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:46,473	[INFO]	327	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:06:46,475	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,335	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:06:47,339	[INFO]	329	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:06:47,340	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,343	[INFO]	330	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:47,344	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,347	[INFO]	331	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:47,348	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,351	[INFO]	332	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:47,353	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,356	[INFO]	333	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:06:47,358	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,360	[INFO]	334	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:06:47,361	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,363	[INFO]	335	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:06:47,363	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,366	[INFO]	336	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:06:47,367	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,369	[INFO]	337	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:47,370	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,373	[INFO]	338	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:06:47,374	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,377	[INFO]	339	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:47,378	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,380	[INFO]	340	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:47,381	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,383	[INFO]	341	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:06:47,384	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,386	[INFO]	342	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:47,387	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,389	[INFO]	343	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:47,390	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:47,392	[INFO]	344	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:06:47,393	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:50,431	[INFO]	345	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:06:50,433	[INFO]	346	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:50,434	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:50,435	[INFO]	347	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:06:50,436	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:50,437	[INFO]	348	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:06:50,438	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:50,439	[INFO]	349	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:50,440	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:50,441	[INFO]	350	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:50,442	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:51,327	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:06:51,331	[INFO]	352	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:51,333	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,197	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:06:52,199	[INFO]	354	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:52,200	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,201	[INFO]	355	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:52,201	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,203	[INFO]	356	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:06:52,203	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,205	[INFO]	357	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:52,205	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,206	[INFO]	358	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:52,207	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,208	[INFO]	359	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 11:06:52,209	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,211	[INFO]	360	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 11:06:52,212	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,213	[INFO]	361	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'})
2020-12-18 11:06:52,214	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,217	[INFO]	362	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:52,218	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:52,220	[INFO]	363	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:52,221	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:53,181	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:53,185	[INFO]	365	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:06:53,186	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:53,189	[INFO]	366	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:06:53,191	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:53,195	[INFO]	367	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:06:53,197	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:53,200	[INFO]	368	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:06:53,202	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:53,205	[INFO]	369	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:06:53,206	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,279	[INFO]	370	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:56,280	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,282	[INFO]	371	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:56,283	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,284	[INFO]	372	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:56,285	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,286	[INFO]	373	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:06:56,287	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,289	[INFO]	374	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:06:56,290	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,292	[INFO]	375	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:06:56,293	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,295	[INFO]	376	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:06:56,296	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,299	[INFO]	377	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:06:56,300	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,303	[INFO]	378	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:56,304	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,307	[INFO]	379	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:56,308	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,310	[INFO]	380	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:06:56,311	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,312	[INFO]	381	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:06:56,314	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:56,316	[INFO]	382	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:06:56,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:06:59,328	[INFO]	383	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:06:59,330	[INFO]	384	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:06:59,330	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:00,234	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:07:01,128	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:07:02,020	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:07:02,022	[INFO]	388	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:07:02,023	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,025	[INFO]	389	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:07:02,026	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,027	[INFO]	390	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:07:02,028	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,030	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:07:02,031	[INFO]	392	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:07:02,032	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,034	[INFO]	393	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:02,035	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,036	[INFO]	394	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:02,037	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,039	[INFO]	395	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:02,040	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,042	[INFO]	396	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:02,044	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,046	[INFO]	397	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:02,047	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,048	[INFO]	398	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:07:02,049	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,051	[INFO]	399	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:07:02,052	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,055	[INFO]	400	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:07:02,057	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,060	[INFO]	401	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:07:02,061	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,064	[INFO]	402	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:07:02,065	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,963	[INFO]	403	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:02,965	[INFO]	404	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:07:02,966	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:02,967	[INFO]	405	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:07:02,968	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:03,898	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:07:04,806	[INFO]	407	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:07:05,690	[INFO]	408	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:07:05,693	[INFO]	409	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:07:05,694	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:05,697	[INFO]	410	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:07:05,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:05,700	[INFO]	411	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:07:05,702	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:05,704	[INFO]	412	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:07:05,706	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,637	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:07:06,640	[INFO]	414	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:06,641	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,643	[INFO]	415	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:06,644	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,646	[INFO]	416	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:07:06,647	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,649	[INFO]	417	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:07:06,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,653	[INFO]	418	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:06,654	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:06,655	[INFO]	419	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:06,656	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,677	[INFO]	420	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:07:09,679	[INFO]	421	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:09,680	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,682	[INFO]	422	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:07:09,682	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,684	[INFO]	423	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:07:09,685	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,686	[INFO]	424	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:07:09,687	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,688	[INFO]	425	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:07:09,690	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,692	[INFO]	426	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:07:09,693	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,696	[INFO]	427	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 11:07:09,698	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,701	[INFO]	428	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:09,702	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,705	[INFO]	429	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:09,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,709	[INFO]	430	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:09,711	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 14,40 ****
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 14,24 ----
      public static ArrayList<ArrayList<Integer>> pascal(int n) {
          ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();
          ArrayList<Integer> init = new ArrayList<Integer>();
+         int upleft, upright;
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,713	[INFO]	431	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:09,714	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:09,717	[INFO]	432	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:07:09,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:10,694	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:07:11,559	[INFO]	434	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:07:11,561	[INFO]	435	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:07:11,561	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,563	[INFO]	436	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:07:11,564	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,565	[INFO]	437	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:11,566	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,567	[INFO]	438	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:07:11,568	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,569	[INFO]	439	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:07:11,570	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,572	[INFO]	440	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:07:11,573	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,575	[INFO]	441	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:07:11,576	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,578	[INFO]	442	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:07:11,579	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,581	[INFO]	443	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:07:11,582	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,584	[INFO]	444	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:07:11,585	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,587	[INFO]	445	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:07:11,588	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,590	[INFO]	446	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:07:11,591	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,593	[INFO]	447	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:11,594	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,596	[INFO]	448	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:11,597	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,599	[INFO]	449	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:11,599	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,601	[INFO]	450	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:07:11,602	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,604	[INFO]	451	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:07:11,605	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,607	[INFO]	452	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 11:07:11,608	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,609	[INFO]	453	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:07:11,610	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:11,612	[INFO]	454	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:07:11,612	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:12,353	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:07:12,355	[INFO]	456	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:12,356	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,411	[INFO]	457	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:07:15,413	[INFO]	458	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:15,414	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,415	[INFO]	459	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:15,416	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,417	[INFO]	460	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,418	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,419	[INFO]	461	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,420	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,422	[INFO]	462	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,422	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,424	[INFO]	463	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,424	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,426	[INFO]	464	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,427	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,428	[INFO]	465	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,429	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:15,431	[INFO]	466	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:15,432	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,219	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:16,225	[INFO]	468	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:07:16,230	[INFO]	469	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:16,233	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,238	[INFO]	470	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:07:16,240	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,247	[INFO]	471	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:07:16,250	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,256	[INFO]	472	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:07:16,257	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,261	[INFO]	473	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:07:16,264	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:16,268	[INFO]	474	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:07:16,269	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,135	[INFO]	475	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:07:17,137	[INFO]	476	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:07:17,137	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,139	[INFO]	477	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:07:17,139	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,141	[INFO]	478	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:07:17,141	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,143	[INFO]	479	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,143	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,145	[INFO]	480	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,147	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,151	[INFO]	481	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,152	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,154	[INFO]	482	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,155	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,157	[INFO]	483	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,158	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,160	[INFO]	484	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,163	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,165	[INFO]	485	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:07:17,166	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,169	[INFO]	486	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:07:17,170	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,173	[INFO]	487	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:07:17,175	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:17,177	[INFO]	488	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:07:17,178	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:18,065	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:07:18,070	[INFO]	490	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:07:18,072	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,053	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:07:19,061	[INFO]	492	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:07:19,064	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,071	[INFO]	493	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:07:19,075	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,084	[INFO]	494	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:07:19,088	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,094	[INFO]	495	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:07:19,098	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,102	[INFO]	496	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:07:19,104	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,108	[INFO]	497	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:07:19,110	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,112	[INFO]	498	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:07:19,114	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,116	[INFO]	499	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:07:19,118	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,121	[INFO]	500	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:07:19,124	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:07:19,124	[INFO]	==== END ====
2020-12-18 11:07:19,125	[INFO]	Reason: step budget
2020-12-18 11:07:19,126	[INFO]	
2020-12-18 11:07:19,126	[INFO]	========== EPOCH 20 ==========
2020-12-18 11:07:19,126	[INFO]	==== WARMUP ====
2020-12-18 11:07:22,178	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:07:22,178	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:07:25,195	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:07:25,195	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:07:28,252	[INFO]	WARM	SUCCESS	 4.0	
2020-12-18 11:07:28,252	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:07:31,275	[INFO]	INITIAL	SUCCESS	 4.0	
2020-12-18 11:07:31,276	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 4.0>
2020-12-18 11:07:31,276	[INFO]	==== START ====
2020-12-18 11:07:34,398	[INFO]	1	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:07:34,399	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:07:35,341	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:07:35,342	[INFO]	3	SUCCESS	+4.0	
2020-12-18 11:07:35,342	[DEBUG]	
2020-12-18 11:07:38,684	[INFO]	4	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:07:38,685	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:07:41,931	[INFO]	5	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:07:41,933	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:07:45,127	[INFO]	6	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:07:45,128	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:07:48,206	[INFO]	7	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:48,207	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upleft = rows.get(r-1).get(c-1);
              }
              rows.add(row);
          }

2020-12-18 11:07:51,314	[INFO]	8	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:51,317	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 upleft = rows.get(r-1).get(c-1);
              }
              rows.add(row);
          }

2020-12-18 11:07:51,319	[INFO]	9	SUCCESS	+4.0	
2020-12-18 11:07:51,320	[DEBUG]	
2020-12-18 11:07:52,232	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 0), 'direction': 'before'})
2020-12-18 11:07:52,986	[INFO]	11	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:07:56,062	[INFO]	12	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:07:56,063	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:07:56,064	[INFO]	13	SUCCESS	+4.0	
2020-12-18 11:07:56,065	[DEBUG]	
2020-12-18 11:07:56,965	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:07:56,967	[INFO]	15	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:07:56,967	[DEBUG]	
2020-12-18 11:07:56,967	[INFO]	16	SUCCESS	+4.0	
2020-12-18 11:07:56,968	[DEBUG]	
2020-12-18 11:07:56,969	[INFO]	17	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:07:56,969	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:07:57,896	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:07:58,819	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:07:58,822	[INFO]	20	SUCCESS	+4.0	
2020-12-18 11:07:58,822	[DEBUG]	
2020-12-18 11:07:59,710	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:08:02,906	[INFO]	22	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:08:02,907	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:08:02,908	[INFO]	23	SUCCESS	+4.0	
2020-12-18 11:08:02,908	[DEBUG]	
2020-12-18 11:08:05,896	[INFO]	24	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:08:05,897	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:08:05,898	[INFO]	25	SUCCESS	+4.0	
2020-12-18 11:08:05,898	[DEBUG]	
2020-12-18 11:08:09,070	[INFO]	26	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:08:09,071	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 init.add(1);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:08:09,939	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:08:09,940	[INFO]	28	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:08:09,941	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 init.add(1);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:08:09,941	[INFO]	29	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:08:09,942	[DEBUG]	
2020-12-18 11:08:09,942	[INFO]	30	SUCCESS	+4.0	
2020-12-18 11:08:09,943	[DEBUG]	
2020-12-18 11:08:09,943	[INFO]	31	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='})
2020-12-18 11:08:09,944	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c <= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:08:09,945	[INFO]	32	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:08:09,945	[INFO]	33	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:08:09,946	[DEBUG]	
2020-12-18 11:08:09,946	[INFO]	34	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:08:09,946	[DEBUG]	
2020-12-18 11:08:09,947	[INFO]	35	SUCCESS	+4.0	
2020-12-18 11:08:09,947	[DEBUG]	
2020-12-18 11:08:10,849	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:08:11,765	[INFO]	37	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:08:12,550	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:08:13,450	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:08:13,451	[INFO]	40	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:08:13,452	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:08:13,453	[INFO]	41	SUCCESS	+4.0	
2020-12-18 11:08:13,453	[DEBUG]	
2020-12-18 11:08:13,454	[INFO]	42	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:08:13,454	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:08:13,454	[INFO]	43	SUCCESS	+4.0	
2020-12-18 11:08:13,455	[DEBUG]	
2020-12-18 11:08:16,545	[INFO]	44	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:08:16,546	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:08:17,413	[INFO]	45	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:08:17,415	[INFO]	46	SUCCESS	+4.0	
2020-12-18 11:08:17,415	[DEBUG]	
2020-12-18 11:08:20,455	[INFO]	47	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:08:21,347	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:08:22,257	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:08:25,366	[INFO]	50	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:08:25,367	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 11:08:25,368	[INFO]	51	SUCCESS	+4.0	
2020-12-18 11:08:25,368	[DEBUG]	
2020-12-18 11:08:25,369	[INFO]	52	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:08:25,370	[DEBUG]	
2020-12-18 11:08:28,476	[INFO]	53	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:08:28,477	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:08:28,478	[INFO]	54	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:08:28,478	[DEBUG]	
2020-12-18 11:08:29,376	[INFO]	55	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:08:30,259	[INFO]	56	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:08:31,174	[INFO]	57	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:08:32,096	[INFO]	58	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:08:33,037	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:08:36,165	[INFO]	60	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:08:36,166	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:08:39,264	[INFO]	61	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:08:39,266	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
!                     upright = rows.get(r-1).get(c);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:08:42,465	[INFO]	62	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:08:42,466	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
!                     upright = rows.get(r-1).get(c);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:08:42,467	[INFO]	63	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:08:42,467	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
!                     upright = rows.get(r-1).get(c);
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:08:42,468	[INFO]	64	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:08:42,468	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:08:43,307	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:08:44,199	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:08:45,112	[INFO]	67	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:08:45,113	[INFO]	68	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:08:45,114	[DEBUG]	
2020-12-18 11:08:48,316	[INFO]	69	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:08:48,317	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 28,33 ****
--- 28,34 ----
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }

2020-12-18 11:08:48,317	[INFO]	70	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:08:48,318	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 28,33 ****
--- 28,34 ----
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
+                     upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }

2020-12-18 11:08:49,226	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:08:49,987	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:08:50,896	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:08:50,899	[INFO]	74	SUCCESS	+4.0	
2020-12-18 11:08:50,899	[DEBUG]	
2020-12-18 11:08:51,836	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:08:52,746	[INFO]	76	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:08:53,626	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:08:54,539	[INFO]	78	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:08:55,428	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:08:56,354	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:08:59,497	[INFO]	81	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:08:59,498	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:09:00,352	[INFO]	82	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:09:01,262	[INFO]	83	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:09:01,264	[INFO]	84	SUCCESS	+4.0	
2020-12-18 11:09:01,264	[DEBUG]	
2020-12-18 11:09:04,387	[INFO]	85	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:09:04,388	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:09:04,388	[INFO]	86	SUCCESS	+4.0	
2020-12-18 11:09:04,389	[DEBUG]	
2020-12-18 11:09:05,295	[INFO]	87	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:09:08,469	[INFO]	88	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:09:08,472	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:09:08,474	[INFO]	89	SUCCESS	+4.0	
2020-12-18 11:09:08,475	[DEBUG]	
2020-12-18 11:09:11,535	[INFO]	90	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:09:11,535	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(row);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 11:09:12,449	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:09:12,450	[INFO]	92	SUCCESS	+4.0	
2020-12-18 11:09:12,451	[DEBUG]	
2020-12-18 11:09:13,333	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:09:14,251	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:09:15,149	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:09:18,306	[INFO]	96	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:09:18,307	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 27,32 ****
--- 27,33 ----
                      upleft = 0;
                  }
                  if (c < r) {
+                     upright = 0;
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:09:18,308	[INFO]	97	SUCCESS	+4.0	
2020-12-18 11:09:18,308	[DEBUG]	
2020-12-18 11:09:21,304	[INFO]	98	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:09:24,323	[INFO]	99	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:09:24,324	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             
          }
  
          return rows;

2020-12-18 11:09:24,324	[INFO]	100	SUCCESS	+4.0	
2020-12-18 11:09:24,325	[DEBUG]	
2020-12-18 11:09:27,401	[INFO]	101	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:09:27,402	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:09:27,404	[INFO]	102	SUCCESS	+4.0	
2020-12-18 11:09:27,405	[DEBUG]	
2020-12-18 11:09:28,318	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:09:28,320	[INFO]	104	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:09:28,320	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:09:28,321	[INFO]	105	SUCCESS	+4.0	
2020-12-18 11:09:28,322	[DEBUG]	
2020-12-18 11:09:29,235	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:09:32,372	[INFO]	107	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:09:35,523	[INFO]	108	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:09:35,524	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:09:38,545	[INFO]	109	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:09:38,546	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,31 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:09:38,547	[INFO]	110	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:09:38,547	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:09:39,460	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:09:39,462	[INFO]	112	SUCCESS	+4.0	
2020-12-18 11:09:39,462	[DEBUG]	
2020-12-18 11:09:40,363	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:09:43,513	[INFO]	114	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:09:43,514	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:09:46,537	[INFO]	115	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:09:46,538	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:09:46,539	[INFO]	116	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:09:46,540	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:09:46,540	[INFO]	117	SUCCESS	+4.0	
2020-12-18 11:09:46,540	[DEBUG]	
2020-12-18 11:09:49,713	[INFO]	118	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'})
2020-12-18 11:09:49,713	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:09:49,715	[INFO]	119	SUCCESS	+4.0	
2020-12-18 11:09:49,715	[DEBUG]	
2020-12-18 11:09:50,598	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:09:51,497	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:09:52,404	[INFO]	122	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:09:53,291	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:09:54,049	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:09:54,811	[INFO]	125	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:09:58,323	[INFO]	126	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:09:58,324	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:10:01,434	[INFO]	127	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:10:01,435	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,28 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
!                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:10:02,337	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:10:03,105	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:10:03,108	[INFO]	130	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:10:03,109	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:10:06,414	[INFO]	131	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:10:06,418	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,31 ****
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:10:06,421	[INFO]	132	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:10:06,423	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,31 ****
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:10:06,426	[INFO]	133	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:10:06,427	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,31 ****
--- 22,33 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
+                 upright = 0;
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:10:06,429	[INFO]	134	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 17), 'direction': 'before'})
2020-12-18 11:10:06,430	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     upright = 0;
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:10:06,431	[INFO]	135	SUCCESS	+4.0	
2020-12-18 11:10:06,432	[DEBUG]	
2020-12-18 11:10:09,546	[INFO]	136	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 11:10:09,547	[INFO]	137	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:10:09,548	[DEBUG]	
2020-12-18 11:10:09,548	[INFO]	138	SUCCESS	+4.0	
2020-12-18 11:10:09,549	[DEBUG]	
2020-12-18 11:10:12,641	[INFO]	139	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:10:12,642	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:10:15,687	[INFO]	140	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:10:15,688	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,39 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
!             
          }
  
          return rows;

2020-12-18 11:10:15,689	[INFO]	141	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:10:15,689	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:10:18,766	[INFO]	142	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:10:18,767	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,37 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 26,37 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:10:19,677	[INFO]	143	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 20), 'direction': 'before'})
2020-12-18 11:10:22,835	[INFO]	144	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:10:22,836	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:23,697	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:10:23,699	[INFO]	146	SUCCESS	+4.0	
2020-12-18 11:10:23,699	[DEBUG]	
2020-12-18 11:10:24,600	[INFO]	147	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:10:25,532	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:10:28,652	[INFO]	149	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'})
2020-12-18 11:10:28,654	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 upright = rows.get(r-1).get(c);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:10:29,387	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 16), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:10:29,390	[INFO]	151	SUCCESS	+4.0	
2020-12-18 11:10:29,390	[DEBUG]	
2020-12-18 11:10:30,306	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:10:31,182	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:10:32,154	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:10:33,097	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:10:36,633	[INFO]	156	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='})
2020-12-18 11:10:36,634	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:37,730	[INFO]	157	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:10:41,847	[INFO]	158	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:10:45,650	[INFO]	159	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:10:45,650	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c == r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:48,995	[INFO]	160	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:10:48,996	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:48,997	[INFO]	161	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:10:48,998	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:52,152	[INFO]	162	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:10:52,153	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:55,168	[INFO]	163	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:10:55,168	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:10:56,072	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:10:59,097	[INFO]	165	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:10:59,099	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:00,013	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:11:00,934	[INFO]	167	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:11:03,947	[INFO]	168	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '!='})
2020-12-18 11:11:03,948	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r!=n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:03,949	[INFO]	169	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:11:03,949	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:07,067	[INFO]	170	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:11:07,069	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:10,128	[INFO]	171	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:11:10,131	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,33 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 rows.add(init);
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:13,163	[INFO]	172	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:11:13,164	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,33 ----
                  } else {
                      upleft = 0;
                  }
!                 rows.add(init);
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:14,064	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:11:14,065	[INFO]	174	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:11:14,066	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:14,067	[INFO]	175	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:11:14,067	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:14,978	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:11:15,835	[INFO]	177	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:11:15,836	[INFO]	178	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '!='})
2020-12-18 11:11:15,837	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c != r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:15,837	[INFO]	179	SUCCESS	+4.0	
2020-12-18 11:11:15,838	[DEBUG]	
2020-12-18 11:11:18,973	[INFO]	180	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:11:22,007	[INFO]	181	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:11:22,007	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  } else {
                      upright = 0;
                  }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:11:22,008	[INFO]	182	SUCCESS	+4.0	
2020-12-18 11:11:22,008	[DEBUG]	
2020-12-18 11:11:22,896	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:11:23,779	[INFO]	184	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:11:26,985	[INFO]	185	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:11:26,987	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,39 ****
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 33,39 ----
                  }
                  row.add(upleft+upright);
              }
!             rows.add(init);
          }
  
          return rows;

2020-12-18 11:11:27,917	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:11:31,157	[INFO]	187	SUCCESS	 5.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>='})
2020-12-18 11:11:34,429	[INFO]	188	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:11:34,430	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,39 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(row);
          }
  
          return rows;
--- 26,39 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
                  }
                  row.add(upleft+upright);
              }
!             rows.add(init);
          }
  
          return rows;

2020-12-18 11:11:37,706	[INFO]	189	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:11:37,707	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:11:37,708	[INFO]	190	SUCCESS	+4.0	
2020-12-18 11:11:37,709	[DEBUG]	
2020-12-18 11:11:38,592	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:11:41,872	[INFO]	192	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:11:41,874	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:11:42,830	[INFO]	193	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:11:42,832	[INFO]	194	SUCCESS	+4.0	
2020-12-18 11:11:42,832	[DEBUG]	
2020-12-18 11:11:43,771	[INFO]	195	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:11:46,913	[INFO]	196	SUCCESS	+4.0	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:11:46,913	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 init.add(1);
              }
              rows.add(row);
          }

2020-12-18 11:11:46,914	[INFO]	197	SUCCESS	+4.0	
2020-12-18 11:11:46,915	[DEBUG]	
2020-12-18 11:11:49,976	[INFO]	198	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:11:50,907	[INFO]	199	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:11:54,046	[INFO]	200	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:11:54,048	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 25,30 ****
--- 25,31 ----
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
+                     upleft = 0;
                  }
                  if (c < r) {
                      upright = rows.get(r-1).get(c);

2020-12-18 11:11:54,050	[INFO]	201	SUCCESS	+4.0	
2020-12-18 11:11:54,051	[DEBUG]	
2020-12-18 11:11:54,922	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 4), 'ingredient': ('java_programs/PASCAL.java.xml', 19)})
2020-12-18 11:11:55,833	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:11:56,742	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 13), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:11:57,641	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:11:58,557	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 1), 'direction': 'before'})
2020-12-18 11:12:01,630	[INFO]	207	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:12:01,631	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:02,526	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:12:05,589	[INFO]	209	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:12:05,590	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:12:06,514	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'})
2020-12-18 11:12:09,624	[INFO]	211	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '<'})
2020-12-18 11:12:09,625	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c < 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:12:09,626	[INFO]	212	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='})
2020-12-18 11:12:09,627	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:12:09,628	[INFO]	213	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:12:09,628	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,32 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 21,32 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c <= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:12:09,629	[INFO]	214	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:12:09,629	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:09,630	[INFO]	215	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:12:09,630	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:09,631	[INFO]	216	SUCCESS	+4.0	
2020-12-18 11:12:09,631	[DEBUG]	
2020-12-18 11:12:09,632	[INFO]	217	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:12:10,505	[INFO]	218	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:12:11,377	[INFO]	219	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:12:11,379	[INFO]	220	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:12:12,361	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:12:15,589	[INFO]	222	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 14), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:12:15,590	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,31 ****
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
+                 upleft = rows.get(r-1).get(c-1);
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {

2020-12-18 11:12:15,590	[INFO]	223	SUCCESS	+4.0	
2020-12-18 11:12:15,591	[DEBUG]	
2020-12-18 11:12:16,462	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:12:19,566	[INFO]	225	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>='})
2020-12-18 11:12:19,567	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c >= 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:19,568	[INFO]	226	SUCCESS	+4.0	
2020-12-18 11:12:19,568	[DEBUG]	
2020-12-18 11:12:19,569	[INFO]	227	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:12:22,636	[INFO]	228	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:12:22,638	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,30 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:23,532	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:12:23,533	[INFO]	230	SUCCESS	+4.0	
2020-12-18 11:12:23,533	[DEBUG]	
2020-12-18 11:12:24,421	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:12:25,321	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 6), 'direction': 'before'})
2020-12-18 11:12:26,218	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:12:29,309	[INFO]	234	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '>'})
2020-12-18 11:12:29,310	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,23 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r>n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;

2020-12-18 11:12:29,311	[INFO]	235	SUCCESS	+4.0	
2020-12-18 11:12:29,311	[DEBUG]	
2020-12-18 11:12:30,244	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:12:31,164	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 9), 'direction': 'before'})
2020-12-18 11:12:34,289	[INFO]	238	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:12:34,290	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:12:34,291	[INFO]	239	SUCCESS	+4.0	
2020-12-18 11:12:34,291	[DEBUG]	
2020-12-18 11:12:37,326	[INFO]	240	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:12:37,327	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 20,25 ****
--- 20,26 ----
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
+                 rows.add(row);
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:12:37,327	[INFO]	241	SUCCESS	+4.0	
2020-12-18 11:12:37,328	[DEBUG]	
2020-12-18 11:12:40,436	[INFO]	242	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:12:40,436	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:12:40,437	[INFO]	243	SUCCESS	+4.0	
2020-12-18 11:12:40,437	[DEBUG]	
2020-12-18 11:12:40,438	[INFO]	244	SUCCESS	 5.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '=='})
2020-12-18 11:12:41,184	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:12:42,088	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:12:42,091	[INFO]	247	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:12:42,092	[DEBUG]	
2020-12-18 11:12:42,094	[INFO]	248	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:12:42,095	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:42,097	[INFO]	249	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:12:42,098	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:43,032	[INFO]	250	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 4), 'direction': 'before'})
2020-12-18 11:12:46,130	[INFO]	251	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>='})
2020-12-18 11:12:46,131	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,27 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c>=r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:46,132	[INFO]	252	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '!='})
2020-12-18 11:12:46,132	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c != 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:12:46,133	[INFO]	253	SUCCESS	+4.0	
2020-12-18 11:12:46,133	[DEBUG]	
2020-12-18 11:12:47,026	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:12:47,929	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:12:48,690	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:12:51,724	[INFO]	257	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:12:51,725	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:12:54,781	[INFO]	258	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 5), 'value': '<='})
2020-12-18 11:12:54,783	[INFO]	259	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:12:54,783	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:12:54,784	[INFO]	260	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 7)})
2020-12-18 11:12:54,784	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,38 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
              rows.add(row);
          }
  
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             
              rows.add(row);
          }
  

2020-12-18 11:12:54,785	[INFO]	261	SUCCESS	+4.0	
2020-12-18 11:12:54,785	[DEBUG]	
2020-12-18 11:12:55,697	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 16), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:12:56,581	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 9)})
2020-12-18 11:12:57,466	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:12:58,375	[INFO]	265	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:13:01,481	[INFO]	266	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:13:01,482	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:13:01,483	[INFO]	267	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 13), 'direction': 'before'})
2020-12-18 11:13:01,483	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:13:01,484	[INFO]	268	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:13:01,484	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:13:04,489	[INFO]	269	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 3), 'direction': 'before'})
2020-12-18 11:13:04,490	[INFO]	270	SUCCESS	+4.0	
2020-12-18 11:13:04,491	[DEBUG]	
2020-12-18 11:13:05,404	[INFO]	271	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 13)})
2020-12-18 11:13:06,317	[INFO]	272	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:13:07,205	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 12)})
2020-12-18 11:13:07,207	[INFO]	274	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'})
2020-12-18 11:13:07,207	[DEBUG]	
2020-12-18 11:13:08,102	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:13:09,005	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 1), 'ingredient': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:13:09,006	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 0)})
2020-12-18 11:13:09,925	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 7), 'ingredient': ('java_programs/PASCAL.java.xml', 10), 'direction': 'before'})
2020-12-18 11:13:09,927	[INFO]	279	SUCCESS	+4.0	
2020-12-18 11:13:09,927	[DEBUG]	
2020-12-18 11:13:13,023	[INFO]	280	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'})
2020-12-18 11:13:13,024	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:13:16,029	[INFO]	281	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:13:16,029	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,32 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 19,32 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
                  }
!                 if (c > r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:13:19,071	[INFO]	282	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='})
2020-12-18 11:13:19,072	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c==r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:13:19,964	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:13:19,965	[INFO]	284	SUCCESS	+4.0	
2020-12-18 11:13:19,966	[DEBUG]	
2020-12-18 11:13:23,095	[INFO]	285	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:13:26,160	[INFO]	286	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 11), 'value': '=='})
2020-12-18 11:13:26,161	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 21,27 ****
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 21,27 ----
              ArrayList<Integer> row = new ArrayList<Integer>();
              for (int c=0; c<r; c++) {
                  int upleft, upright;
!                 if (c == 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:13:26,162	[INFO]	287	SUCCESS	+4.0	
2020-12-18 11:13:26,162	[DEBUG]	
2020-12-18 11:13:26,163	[INFO]	288	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'})
2020-12-18 11:13:26,163	[DEBUG]	
2020-12-18 11:13:26,164	[INFO]	289	SUCCESS	+4.0	
2020-12-18 11:13:26,164	[DEBUG]	
2020-12-18 11:13:26,165	[INFO]	290	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 4)})
2020-12-18 11:13:26,165	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 17,40 ****
          init.add(1);
          rows.add(init);
  
!         for (int r=1; r<n; r++) {
!             ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
!                 int upleft, upright;
!                 if (c > 0) {
!                     upleft = rows.get(r-1).get(c-1);
!                 } else {
!                     upleft = 0;
!                 }
!                 if (c < r) {
!                     upright = rows.get(r-1).get(c);
!                 } else {
!                     upright = 0;
!                 }
!                 row.add(upleft+upright);
!             }
!             rows.add(row);
!         }
  
          return rows;
      }
--- 17,23 ----
          init.add(1);
          rows.add(init);
  
!         
  
          return rows;
      }

2020-12-18 11:13:26,166	[INFO]	291	SUCCESS	+4.0	
2020-12-18 11:13:26,166	[DEBUG]	
2020-12-18 11:13:27,060	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 0), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:13:27,980	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:13:28,753	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 10), 'ingredient': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:13:29,657	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 9), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:13:32,718	[INFO]	296	SUCCESS	 5.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 3)})
2020-12-18 11:13:33,610	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 10)})
2020-12-18 11:13:36,717	[INFO]	298	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:13:36,718	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
+                 rows.add(row);
                  row.add(upleft+upright);
              }
              rows.add(row);

2020-12-18 11:13:36,719	[INFO]	299	SUCCESS	+4.0	
2020-12-18 11:13:36,719	[DEBUG]	
2020-12-18 11:13:39,818	[INFO]	300	SUCCESS	+4.0	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 18)})
2020-12-18 11:13:39,818	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 31,37 ****
                  } else {
                      upright = 0;
                  }
!                 row.add(upleft+upright);
              }
              rows.add(row);
          }
--- 31,37 ----
                  } else {
                      upright = 0;
                  }
!                 
              }
              rows.add(row);
          }

2020-12-18 11:13:39,819	[INFO]	301	SUCCESS	+4.0	
2020-12-18 11:13:39,819	[DEBUG]	
2020-12-18 11:13:40,681	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 20), 'ingredient': ('java_programs/PASCAL.java.xml', 12), 'direction': 'before'})
2020-12-18 11:13:40,683	[INFO]	303	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 1)})
2020-12-18 11:13:41,609	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 16)})
2020-12-18 11:13:42,507	[INFO]	305	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 6)})
2020-12-18 11:13:43,414	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/PASCAL.java.xml', 6), 'ingredient': ('java_programs/PASCAL.java.xml', 2)})
2020-12-18 11:13:46,518	[INFO]	307	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:13:46,520	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 22,27 ****
--- 22,28 ----
              for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     rows.add(row);
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:13:46,521	[INFO]	308	SUCCESS	+4.0	
2020-12-18 11:13:46,522	[DEBUG]	
2020-12-18 11:13:47,425	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:13:50,500	[INFO]	310	SUCCESS	 5.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 2), 'ingredient': ('java_programs/PASCAL.java.xml', 2), 'direction': 'before'})
2020-12-18 11:13:51,375	[INFO]	311	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 17)})
2020-12-18 11:13:52,277	[INFO]	312	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 20)})
2020-12-18 11:13:53,030	[INFO]	313	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/PASCAL.java.xml', 14)})
2020-12-18 11:13:56,139	[INFO]	314	SUCCESS	+4.0	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 17), 'ingredient': ('java_programs/PASCAL.java.xml', 19), 'direction': 'before'})
2020-12-18 11:13:56,140	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 29,34 ****
--- 29,35 ----
                  if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
+                     rows.add(row);
                      upright = 0;
                  }
                  row.add(upleft+upright);

2020-12-18 11:13:56,141	[INFO]	315	SUCCESS	+4.0	
2020-12-18 11:13:56,141	[DEBUG]	
2020-12-18 11:13:59,136	[INFO]	316	SUCCESS	+4.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '>='})
2020-12-18 11:13:59,136	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 26,32 ****
                  } else {
                      upleft = 0;
                  }
!                 if (c < r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;
--- 26,32 ----
                  } else {
                      upleft = 0;
                  }
!                 if (c >= r) {
                      upright = rows.get(r-1).get(c);
                  } else {
                      upright = 0;

2020-12-18 11:13:59,137	[INFO]	317	SUCCESS	+4.0	
2020-12-18 11:13:59,137	[DEBUG]	
2020-12-18 11:14:00,097	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 3), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'})
2020-12-18 11:14:03,242	[INFO]	319	SUCCESS	*0.0	ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,243	[DEBUG]	*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,244	[INFO]	==== END ====
2020-12-18 11:14:03,244	[INFO]	Reason: target fitness reached
2020-12-18 11:14:03,244	[INFO]	
2020-12-18 11:14:03,244	[INFO]	========== REPORT ==========
2020-12-18 11:14:03,245	[INFO]	==== Epoch 1 ====
2020-12-18 11:14:03,245	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,245	[INFO]	Number of interations: 100
2020-12-18 11:14:03,245	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,245	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,245	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,245	[INFO]	==== Epoch 2 ====
2020-12-18 11:14:03,245	[INFO]	Termination: step budget
2020-12-18 11:14:03,245	[INFO]	Number of interations: 500
2020-12-18 11:14:03,245	[INFO]	==== Epoch 3 ====
2020-12-18 11:14:03,245	[INFO]	Termination: step budget
2020-12-18 11:14:03,245	[INFO]	Number of interations: 500
2020-12-18 11:14:03,245	[INFO]	Best fitness: 3.0
2020-12-18 11:14:03,246	[INFO]	Best patch: MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:14:03,246	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 11:14:03,246	[INFO]	==== Epoch 4 ====
2020-12-18 11:14:03,246	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,246	[INFO]	Number of interations: 221
2020-12-18 11:14:03,246	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,246	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,246	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,246	[INFO]	==== Epoch 5 ====
2020-12-18 11:14:03,246	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,246	[INFO]	Number of interations: 65
2020-12-18 11:14:03,247	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,247	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 15), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,247	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,247	[INFO]	==== Epoch 6 ====
2020-12-18 11:14:03,247	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,247	[INFO]	Number of interations: 22
2020-12-18 11:14:03,247	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,247	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,247	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,247	[INFO]	==== Epoch 7 ====
2020-12-18 11:14:03,247	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,247	[INFO]	Number of interations: 200
2020-12-18 11:14:03,248	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,248	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,248	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,248	[INFO]	==== Epoch 8 ====
2020-12-18 11:14:03,248	[INFO]	Termination: step budget
2020-12-18 11:14:03,248	[INFO]	Number of interations: 500
2020-12-18 11:14:03,248	[INFO]	Best fitness: 3.0
2020-12-18 11:14:03,248	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 18), 'ingredient': ('java_programs/PASCAL.java.xml', 18), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='})
2020-12-18 11:14:03,248	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c!=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
***************
*** 32,37 ****
--- 32,38 ----
                      upright = 0;
                  }
                  row.add(upleft+upright);
+                 row.add(upleft+upright);
              }
              rows.add(row);
          }

2020-12-18 11:14:03,248	[INFO]	==== Epoch 9 ====
2020-12-18 11:14:03,248	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,248	[INFO]	Number of interations: 315
2020-12-18 11:14:03,248	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,249	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,249	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,249	[INFO]	==== Epoch 10 ====
2020-12-18 11:14:03,249	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,249	[INFO]	Number of interations: 321
2020-12-18 11:14:03,249	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,249	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,249	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,249	[INFO]	==== Epoch 11 ====
2020-12-18 11:14:03,249	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,249	[INFO]	Number of interations: 90
2020-12-18 11:14:03,249	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,249	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,250	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,250	[INFO]	==== Epoch 12 ====
2020-12-18 11:14:03,250	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,250	[INFO]	Number of interations: 24
2020-12-18 11:14:03,250	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,250	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,250	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,250	[INFO]	==== Epoch 13 ====
2020-12-18 11:14:03,250	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,250	[INFO]	Number of interations: 46
2020-12-18 11:14:03,250	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,250	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,250	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,250	[INFO]	==== Epoch 14 ====
2020-12-18 11:14:03,251	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,251	[INFO]	Number of interations: 39
2020-12-18 11:14:03,251	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,251	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 12), 'ingredient': ('java_programs/PASCAL.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,251	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,27 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;
--- 19,30 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
+                     if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 }
                      upleft = rows.get(r-1).get(c-1);
                  } else {
                      upleft = 0;

2020-12-18 11:14:03,251	[INFO]	==== Epoch 15 ====
2020-12-18 11:14:03,251	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,251	[INFO]	Number of interations: 2
2020-12-18 11:14:03,251	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,251	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,251	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,251	[INFO]	==== Epoch 16 ====
2020-12-18 11:14:03,252	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,252	[INFO]	Number of interations: 490
2020-12-18 11:14:03,252	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,252	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,252	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,252	[INFO]	==== Epoch 17 ====
2020-12-18 11:14:03,252	[INFO]	Termination: step budget
2020-12-18 11:14:03,252	[INFO]	Number of interations: 500
2020-12-18 11:14:03,252	[INFO]	Best fitness: 3.0
2020-12-18 11:14:03,252	[INFO]	Best patch: MyStmtInsertion({'target': ('java_programs/PASCAL.java.xml', 19), 'ingredient': ('java_programs/PASCAL.java.xml', 7), 'direction': 'before'})
2020-12-18 11:14:03,252	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 33,38 ****
--- 33,52 ----
                  }
                  row.add(upleft+upright);
              }
+             for (int c=0; c<r; c++) {
+                 int upleft, upright;
+                 if (c > 0) {
+                     upleft = rows.get(r-1).get(c-1);
+                 } else {
+                     upleft = 0;
+                 }
+                 if (c < r) {
+                     upright = rows.get(r-1).get(c);
+                 } else {
+                     upright = 0;
+                 }
+                 row.add(upleft+upright);
+             }
              rows.add(row);
          }
  

2020-12-18 11:14:03,252	[INFO]	==== Epoch 18 ====
2020-12-18 11:14:03,253	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,253	[INFO]	Number of interations: 52
2020-12-18 11:14:03,253	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,253	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,253	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,253	[INFO]	==== Epoch 19 ====
2020-12-18 11:14:03,253	[INFO]	Termination: step budget
2020-12-18 11:14:03,253	[INFO]	Number of interations: 500
2020-12-18 11:14:03,253	[INFO]	==== Epoch 20 ====
2020-12-18 11:14:03,253	[INFO]	Termination: target fitness reached
2020-12-18 11:14:03,253	[INFO]	Number of interations: 319
2020-12-18 11:14:03,254	[INFO]	Best fitness: 0.0
2020-12-18 11:14:03,254	[INFO]	Best patch: ComparisonOperatorSetting({'target': ('java_programs/PASCAL.java.xml', 8), 'value': '<='})
2020-12-18 11:14:03,254	[INFO]	Diff:
*** before: java_programs/PASCAL.java.xml
--- after: java_programs/PASCAL.java.xml
***************
*** 19,25 ****
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);
--- 19,25 ----
  
          for (int r=1; r<n; r++) {
              ArrayList<Integer> row = new ArrayList<Integer>();
!             for (int c=0; c<=r; c++) {
                  int upleft, upright;
                  if (c > 0) {
                      upleft = rows.get(r-1).get(c-1);

2020-12-18 11:14:03,260	[INFO]	Experiment duration: 5683.37327170372
