2020-12-19 00:08:03,115	[INFO]	Path to the temporal program variants: ./.pyggi/tmp_variants/QuixBugs/1608332883
2020-12-19 00:08:03,116	[INFO]	========== EXPERIMENT FOR ['java_programs/SHORTEST_PATH_LENGTH.java.xml']  ==========
2020-12-19 00:08:03,116	[INFO]	modification points:
 ['./decl_stmt[1]', './decl_stmt[2]', './decl_stmt[3]', './expr_stmt[1]', './while[1]', './while[1]/decl_stmt[1]', './while[1]/decl_stmt[2]', './while[1]/expr_stmt[1]', './while[1]/if[1]', './while[1]/if[1]/operator_comp[1]', './while[1]/if[1]/return[1]', './while[1]/expr_stmt[2]', './while[1]/for[1]', './while[1]/for[1]/if[1]', './while[1]/for[1]/if[1]/continue[1]', './while[1]/for[1]/if[2]', './while[1]/for[1]/if[2]/operator_comp[1]', './while[1]/for[1]/if[2]/expr_stmt[1]', './while[1]/for[1]/expr_stmt[1]', './return[1]', './decl_stmt[4]', './decl_stmt[5]', './for[1]', './for[1]/decl_stmt[1]', './for[1]/if[1]', './for[1]/if[1]/operator_comp[1]', './for[1]/if[1]/expr_stmt[1]', './for[1]/if[1]/expr_stmt[2]', './return[2]']
2020-12-19 00:08:03,116	[INFO]	number of statements and comparisons: 26, 3
2020-12-19 00:08:03,116	[INFO]	========== EPOCH 1 ==========
2020-12-19 00:08:03,116	[INFO]	==== WARMUP ====
2020-12-19 00:08:06,025	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:08:06,025	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:08:08,918	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:08:08,918	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:08:11,885	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:08:11,885	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:08:14,730	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 00:08:14,730	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:08:14,730	[INFO]	==== START ====
2020-12-19 00:08:17,783	[INFO]	1	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:08:17,784	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:17,785	[INFO]	2	SUCCESS	+2.0	
2020-12-19 00:08:17,786	[DEBUG]	
2020-12-19 00:08:20,777	[INFO]	3	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:08:20,778	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:21,648	[INFO]	4	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:08:24,655	[INFO]	5	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:08:24,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:24,656	[INFO]	6	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:08:24,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:24,658	[INFO]	7	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:08:24,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:24,659	[INFO]	8	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:08:24,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:24,661	[INFO]	9	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:08:24,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:24,662	[INFO]	10	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:08:24,662	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:08:25,573	[INFO]	11	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:08:26,465	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:08:27,356	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:08:28,237	[INFO]	14	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:08:29,148	[INFO]	15	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:08:29,150	[INFO]	16	SUCCESS	+2.0	
2020-12-19 00:08:29,150	[DEBUG]	
2020-12-19 00:08:32,137	[INFO]	17	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:08:35,053	[INFO]	18	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:08:35,054	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:08:35,917	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:08:35,918	[INFO]	20	SUCCESS	+2.0	
2020-12-19 00:08:35,918	[DEBUG]	
2020-12-19 00:08:36,796	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:08:37,699	[INFO]	22	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:08:40,800	[INFO]	23	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:08:40,801	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:08:44,086	[INFO]	24	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:08:44,087	[INFO]	25	SUCCESS	+2.0	
2020-12-19 00:08:44,088	[DEBUG]	
2020-12-19 00:08:45,030	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:08:46,036	[INFO]	27	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:08:47,046	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:08:50,306	[INFO]	29	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:08:50,307	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 00:08:50,308	[INFO]	30	SUCCESS	+2.0	
2020-12-19 00:08:50,308	[DEBUG]	
2020-12-19 00:08:51,313	[INFO]	31	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:08:52,285	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:08:53,276	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:08:54,267	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:08:57,561	[INFO]	35	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:08:58,528	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:08:59,560	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:09:00,546	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:09:03,810	[INFO]	39	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:09:03,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:09:07,213	[INFO]	40	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:09:07,214	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 52,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:09:10,420	[INFO]	41	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:09:10,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:09:10,421	[INFO]	42	SUCCESS	+2.0	
2020-12-19 00:09:10,422	[DEBUG]	
2020-12-19 00:09:13,745	[INFO]	43	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:09:17,041	[INFO]	44	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:09:18,003	[INFO]	45	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:09:33,071	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:09:33,072	[INFO]	47	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:09:33,072	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:09:33,073	[INFO]	48	SUCCESS	+2.0	
2020-12-19 00:09:33,073	[DEBUG]	
2020-12-19 00:09:33,901	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:09:36,879	[INFO]	50	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:09:36,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 00:09:36,881	[INFO]	51	SUCCESS	+2.0	
2020-12-19 00:09:36,881	[DEBUG]	
2020-12-19 00:09:37,790	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:09:40,962	[INFO]	53	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:09:40,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 00:09:40,964	[INFO]	54	SUCCESS	+2.0	
2020-12-19 00:09:40,964	[DEBUG]	
2020-12-19 00:09:44,264	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:09:44,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-19 00:09:45,266	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:09:46,255	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:09:47,199	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:09:47,202	[INFO]	59	SUCCESS	+2.0	
2020-12-19 00:09:47,203	[DEBUG]	
2020-12-19 00:09:48,198	[INFO]	60	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:09:49,172	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:09:50,194	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:09:53,487	[INFO]	63	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:09:53,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:09:53,489	[INFO]	64	SUCCESS	+2.0	
2020-12-19 00:09:53,489	[DEBUG]	
2020-12-19 00:09:56,858	[INFO]	65	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:09:56,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:09:57,826	[INFO]	66	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:09:57,827	[INFO]	67	SUCCESS	+2.0	
2020-12-19 00:09:57,827	[DEBUG]	
2020-12-19 00:09:58,817	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:09:59,831	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:10:00,930	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:10:01,922	[INFO]	71	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:10:01,925	[INFO]	72	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:10:01,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:10:01,928	[INFO]	73	SUCCESS	+2.0	
2020-12-19 00:10:01,928	[DEBUG]	
2020-12-19 00:10:02,907	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:10:03,916	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:10:07,307	[INFO]	76	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:10:07,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:10:07,309	[INFO]	77	SUCCESS	+2.0	
2020-12-19 00:10:07,309	[DEBUG]	
2020-12-19 00:10:08,243	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:10:09,230	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:10:12,581	[INFO]	80	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:10:15,934	[INFO]	81	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:10:31,013	[INFO]	82	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:10:31,923	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:10:31,927	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:10:31,928	[DEBUG]	
2020-12-19 00:10:34,962	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:10:34,964	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:10:38,245	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:10:38,246	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:10:38,248	[INFO]	87	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:10:38,249	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:10:38,250	[INFO]	88	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:10:38,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:10:39,259	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:10:42,516	[INFO]	90	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:10:42,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
--- 31,43 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:10:43,557	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:10:46,919	[INFO]	92	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:10:46,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:10:46,921	[INFO]	93	SUCCESS	+2.0	
2020-12-19 00:10:46,921	[DEBUG]	
2020-12-19 00:10:50,183	[INFO]	94	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:10:50,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:10:50,185	[INFO]	95	SUCCESS	+2.0	
2020-12-19 00:10:50,186	[DEBUG]	
2020-12-19 00:10:53,476	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:10:53,477	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:10:54,500	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:10:54,501	[INFO]	98	SUCCESS	+2.0	
2020-12-19 00:10:54,501	[DEBUG]	
2020-12-19 00:10:54,502	[INFO]	99	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:10:54,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:10:55,565	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:10:55,567	[INFO]	101	SUCCESS	+2.0	
2020-12-19 00:10:55,568	[DEBUG]	
2020-12-19 00:10:55,569	[INFO]	102	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:10:55,570	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:10:55,570	[INFO]	103	SUCCESS	+2.0	
2020-12-19 00:10:55,571	[DEBUG]	
2020-12-19 00:10:56,631	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:10:59,981	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:10:59,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-19 00:11:01,002	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:11:01,005	[INFO]	107	SUCCESS	+2.0	
2020-12-19 00:11:01,006	[DEBUG]	
2020-12-19 00:11:01,980	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:11:01,982	[INFO]	109	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:11:01,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:11:02,982	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:11:02,983	[INFO]	111	SUCCESS	+2.0	
2020-12-19 00:11:02,984	[DEBUG]	
2020-12-19 00:11:06,310	[INFO]	112	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:11:07,260	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:11:07,263	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:11:08,229	[INFO]	115	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:11:09,204	[INFO]	116	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:11:10,225	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:11:13,455	[INFO]	118	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:11:14,438	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:11:15,457	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:11:15,463	[INFO]	121	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:11:16,463	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:11:17,473	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:11:18,472	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:11:19,454	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:11:19,455	[INFO]	126	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:11:20,463	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:11:23,810	[INFO]	128	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:11:23,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 00:11:24,783	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:11:24,784	[INFO]	130	SUCCESS	+2.0	
2020-12-19 00:11:24,784	[DEBUG]	
2020-12-19 00:11:25,797	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:11:26,771	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:11:27,798	[INFO]	133	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:11:28,789	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:11:28,791	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:11:29,803	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:11:30,859	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:11:30,863	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:11:34,296	[INFO]	139	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:11:34,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:11:35,259	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:11:35,262	[INFO]	141	SUCCESS	+2.0	
2020-12-19 00:11:35,263	[DEBUG]	
2020-12-19 00:11:35,265	[INFO]	142	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:11:35,266	[DEBUG]	
2020-12-19 00:11:35,267	[INFO]	143	SUCCESS	+2.0	
2020-12-19 00:11:35,268	[DEBUG]	
2020-12-19 00:11:36,266	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:11:37,315	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:11:40,765	[INFO]	146	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:11:41,733	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:11:45,162	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:11:45,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 00:11:45,164	[INFO]	149	SUCCESS	+2.0	
2020-12-19 00:11:45,164	[DEBUG]	
2020-12-19 00:11:46,130	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:11:49,507	[INFO]	151	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:11:49,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:11:50,468	[INFO]	152	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:11:53,775	[INFO]	153	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:11:53,776	[INFO]	154	SUCCESS	+2.0	
2020-12-19 00:11:53,777	[DEBUG]	
2020-12-19 00:11:56,895	[INFO]	155	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:11:56,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:11:57,848	[INFO]	156	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:11:58,789	[INFO]	157	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:11:58,790	[INFO]	158	SUCCESS	+2.0	
2020-12-19 00:11:58,791	[DEBUG]	
2020-12-19 00:12:02,134	[INFO]	159	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:12:02,135	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 00:12:05,497	[INFO]	160	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:12:08,861	[INFO]	161	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:12:08,862	[INFO]	162	SUCCESS	+2.0	
2020-12-19 00:12:08,863	[DEBUG]	
2020-12-19 00:12:12,168	[INFO]	163	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:12:12,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:12:15,379	[INFO]	164	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:12:15,380	[INFO]	165	SUCCESS	+2.0	
2020-12-19 00:12:15,380	[DEBUG]	
2020-12-19 00:12:16,375	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:12:17,401	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:12:18,396	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:12:19,376	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:12:20,404	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:12:21,368	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:12:22,348	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:12:23,354	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:12:24,369	[INFO]	174	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:12:25,372	[INFO]	175	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:12:28,702	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:12:28,704	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 00:12:28,705	[INFO]	177	SUCCESS	+2.0	
2020-12-19 00:12:28,706	[DEBUG]	
2020-12-19 00:12:29,714	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:12:33,011	[INFO]	179	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:12:33,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:12:33,012	[INFO]	180	SUCCESS	+2.0	
2020-12-19 00:12:33,013	[DEBUG]	
2020-12-19 00:12:36,351	[INFO]	181	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:12:36,352	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:12:36,353	[INFO]	182	SUCCESS	+2.0	
2020-12-19 00:12:36,353	[DEBUG]	
2020-12-19 00:12:36,354	[INFO]	183	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:12:36,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:12:36,355	[INFO]	184	SUCCESS	+2.0	
2020-12-19 00:12:36,356	[DEBUG]	
2020-12-19 00:12:37,356	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:12:38,382	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:12:39,381	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:12:42,755	[INFO]	188	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:12:46,093	[INFO]	189	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:12:46,095	[INFO]	190	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:12:46,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:12:46,096	[INFO]	191	SUCCESS	+2.0	
2020-12-19 00:12:46,096	[DEBUG]	
2020-12-19 00:12:47,067	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:13:02,148	[INFO]	193	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:13:02,149	[INFO]	194	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:13:02,150	[DEBUG]	
2020-12-19 00:13:03,073	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:13:04,011	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:13:04,012	[INFO]	197	SUCCESS	+2.0	
2020-12-19 00:13:04,013	[DEBUG]	
2020-12-19 00:13:04,919	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:13:08,007	[INFO]	199	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:13:08,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:13:08,871	[INFO]	200	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:13:09,755	[INFO]	201	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:13:12,965	[INFO]	202	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:13:12,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
! 
!                 
              }
          }
  

2020-12-19 00:13:16,226	[INFO]	203	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:13:16,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,40 ----
                      continue;
                  }
  
!                 
  
!                 return Integer.MAX_VALUE;
! 
!                 
              }
          }
  

2020-12-19 00:13:17,187	[INFO]	204	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:13:17,189	[INFO]	205	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:13:17,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
! 
!                 
              }
          }
  

2020-12-19 00:13:20,414	[INFO]	206	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:13:21,397	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:13:22,326	[INFO]	208	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:13:25,479	[INFO]	209	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:13:25,481	[INFO]	210	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:13:25,481	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:13:26,425	[INFO]	211	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:13:26,427	[INFO]	212	SUCCESS	+2.0	
2020-12-19 00:13:26,428	[DEBUG]	
2020-12-19 00:13:29,593	[INFO]	213	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:13:32,842	[INFO]	214	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:13:32,843	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:33,780	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:13:34,807	[INFO]	216	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:13:35,743	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:13:35,744	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:13:35,745	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:39,034	[INFO]	219	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:13:39,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:39,036	[INFO]	220	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:13:39,036	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:39,038	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:13:39,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:42,203	[INFO]	222	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:13:42,207	[INFO]	223	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:13:42,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:43,194	[INFO]	224	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:13:44,145	[INFO]	225	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:13:44,147	[INFO]	226	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:13:44,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:47,462	[INFO]	227	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:13:47,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,33 ----
              }
              visitedNodes.add(node);
  
!             continue;
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:47,465	[INFO]	228	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:13:47,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:50,724	[INFO]	229	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:13:50,725	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:13:50,726	[INFO]	230	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:13:50,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:50,727	[INFO]	231	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:13:50,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:50,729	[INFO]	232	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:13:50,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:13:50,730	[INFO]	233	SUCCESS	+2.0	
2020-12-19 00:13:50,730	[DEBUG]	
2020-12-19 00:13:51,807	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:13:55,377	[INFO]	235	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:13:55,378	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:13:56,499	[INFO]	236	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:13:56,500	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:13:57,531	[INFO]	238	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:13:57,532	[INFO]	239	SUCCESS	+2.0	
2020-12-19 00:13:57,532	[DEBUG]	
2020-12-19 00:13:58,582	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:13:58,584	[INFO]	241	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:13:58,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:13:59,651	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:13:59,653	[INFO]	243	SUCCESS	+2.0	
2020-12-19 00:13:59,654	[DEBUG]	
2020-12-19 00:14:00,698	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:14:01,750	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:14:02,776	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:14:06,110	[INFO]	247	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:14:07,054	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:14:08,053	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:14:09,091	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:14:12,422	[INFO]	251	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:14:12,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:14:13,417	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:14:14,441	[INFO]	253	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:14:14,442	[INFO]	254	SUCCESS	+2.0	
2020-12-19 00:14:14,442	[DEBUG]	
2020-12-19 00:14:15,509	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:14:16,501	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:14:19,726	[INFO]	257	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:14:20,714	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:14:20,716	[INFO]	259	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:14:21,731	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:14:22,745	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:14:23,724	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:14:24,722	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:14:25,732	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:14:26,742	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:14:30,015	[INFO]	266	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:14:30,016	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-19 00:14:30,017	[INFO]	267	SUCCESS	+2.0	
2020-12-19 00:14:30,017	[DEBUG]	
2020-12-19 00:14:30,985	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:14:31,990	[INFO]	269	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:14:35,275	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:14:35,277	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 00:14:35,279	[INFO]	271	SUCCESS	+2.0	
2020-12-19 00:14:35,280	[DEBUG]	
2020-12-19 00:14:38,477	[INFO]	272	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:14:41,791	[INFO]	273	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:14:42,775	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:14:43,802	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:14:44,819	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:14:44,823	[INFO]	277	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:14:45,839	[INFO]	278	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:14:49,142	[INFO]	279	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:15:04,201	[INFO]	280	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:15:05,085	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:15:08,081	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:15:08,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:15:11,184	[INFO]	283	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:15:11,185	[INFO]	284	SUCCESS	+2.0	
2020-12-19 00:15:11,185	[DEBUG]	
2020-12-19 00:15:12,116	[INFO]	285	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:15:15,429	[INFO]	286	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:15:15,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 00:15:15,431	[INFO]	287	SUCCESS	+2.0	
2020-12-19 00:15:15,431	[DEBUG]	
2020-12-19 00:15:18,734	[INFO]	288	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:15:19,761	[INFO]	289	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:15:23,201	[INFO]	290	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:15:23,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:15:23,203	[INFO]	291	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:15:23,204	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:15:24,232	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:15:25,320	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:15:26,365	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:15:26,367	[INFO]	295	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:15:26,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:15:27,435	[INFO]	296	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:15:27,438	[INFO]	297	SUCCESS	+2.0	
2020-12-19 00:15:27,439	[DEBUG]	
2020-12-19 00:15:30,789	[INFO]	298	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:15:34,052	[INFO]	299	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:15:35,179	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:15:36,581	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:15:40,489	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:15:40,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:15:40,492	[INFO]	303	SUCCESS	+2.0	
2020-12-19 00:15:40,492	[DEBUG]	
2020-12-19 00:15:41,526	[INFO]	304	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:15:44,889	[INFO]	305	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:15:45,943	[INFO]	306	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:15:46,957	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:15:47,950	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:15:48,947	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:15:52,306	[INFO]	310	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:15:53,267	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:15:53,270	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:15:54,258	[INFO]	313	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:15:57,598	[INFO]	314	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:15:57,600	[INFO]	315	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:15:58,625	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:15:58,626	[INFO]	317	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:15:58,627	[INFO]	318	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:15:58,627	[DEBUG]	
2020-12-19 00:15:59,638	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:15:59,640	[INFO]	320	SUCCESS	+2.0	
2020-12-19 00:15:59,640	[DEBUG]	
2020-12-19 00:16:00,661	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:16:01,657	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:16:04,989	[INFO]	323	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:16:04,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:16:08,274	[INFO]	324	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:16:08,275	[INFO]	325	SUCCESS	+2.0	
2020-12-19 00:16:08,276	[DEBUG]	
2020-12-19 00:16:08,277	[INFO]	326	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:16:08,277	[DEBUG]	
2020-12-19 00:16:09,227	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:16:09,228	[INFO]	328	SUCCESS	+2.0	
2020-12-19 00:16:09,228	[DEBUG]	
2020-12-19 00:16:12,530	[INFO]	329	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:16:12,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:16:15,765	[INFO]	330	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:16:15,766	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:16:15,767	[INFO]	331	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:16:15,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:16:16,805	[INFO]	332	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:16:20,164	[INFO]	333	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:16:20,165	[INFO]	334	SUCCESS	+2.0	
2020-12-19 00:16:20,166	[DEBUG]	
2020-12-19 00:16:21,147	[INFO]	335	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:16:22,141	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:16:23,161	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:16:26,456	[INFO]	338	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:16:26,457	[INFO]	339	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:16:26,457	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:16:27,438	[INFO]	340	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:16:27,439	[INFO]	341	SUCCESS	+2.0	
2020-12-19 00:16:27,440	[DEBUG]	
2020-12-19 00:16:28,445	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:16:28,447	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:16:28,447	[DEBUG]	
2020-12-19 00:16:28,448	[INFO]	344	SUCCESS	+2.0	
2020-12-19 00:16:28,448	[DEBUG]	
2020-12-19 00:16:29,477	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:16:30,453	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:16:33,886	[INFO]	347	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:16:33,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:16:33,887	[INFO]	348	SUCCESS	+2.0	
2020-12-19 00:16:33,888	[DEBUG]	
2020-12-19 00:16:33,889	[INFO]	349	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:16:33,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:16:33,890	[INFO]	350	SUCCESS	+2.0	
2020-12-19 00:16:33,890	[DEBUG]	
2020-12-19 00:16:34,834	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:16:49,894	[INFO]	352	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:16:52,924	[INFO]	353	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:16:53,828	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:16:56,805	[INFO]	355	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:17:00,100	[INFO]	356	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:17:01,095	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:17:02,091	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:17:05,391	[INFO]	359	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:17:05,391	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:17:06,366	[INFO]	360	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:17:06,369	[INFO]	361	SUCCESS	+2.0	
2020-12-19 00:17:06,371	[DEBUG]	
2020-12-19 00:17:09,764	[INFO]	362	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:17:09,765	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-19 00:17:09,766	[INFO]	363	SUCCESS	+2.0	
2020-12-19 00:17:09,766	[DEBUG]	
2020-12-19 00:17:10,743	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:17:11,762	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:17:15,119	[INFO]	366	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:17:18,369	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:17:18,370	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:17:19,342	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:17:19,345	[INFO]	369	SUCCESS	+2.0	
2020-12-19 00:17:19,345	[DEBUG]	
2020-12-19 00:17:20,371	[INFO]	370	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:17:21,380	[INFO]	371	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:17:21,384	[INFO]	372	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:17:24,729	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:17:24,730	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:17:24,731	[INFO]	374	SUCCESS	+2.0	
2020-12-19 00:17:24,731	[DEBUG]	
2020-12-19 00:17:25,708	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:17:26,674	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:17:27,663	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:17:28,730	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:17:32,139	[INFO]	379	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:17:35,682	[INFO]	380	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:17:39,112	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:17:39,113	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 00:17:40,186	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:17:41,242	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:17:42,229	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:17:42,230	[INFO]	385	SUCCESS	+2.0	
2020-12-19 00:17:42,230	[DEBUG]	
2020-12-19 00:17:43,277	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:17:44,322	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:17:45,339	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:17:45,341	[INFO]	389	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:17:45,342	[DEBUG]	
2020-12-19 00:17:45,344	[INFO]	390	SUCCESS	+2.0	
2020-12-19 00:17:45,345	[DEBUG]	
2020-12-19 00:18:00,429	[INFO]	391	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:18:01,320	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:18:02,209	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:18:03,084	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:18:03,085	[INFO]	395	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:18:03,988	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:18:07,073	[INFO]	397	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:18:07,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:18:07,075	[INFO]	398	SUCCESS	+2.0	
2020-12-19 00:18:07,075	[DEBUG]	
2020-12-19 00:18:10,452	[INFO]	399	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:18:10,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:18:11,419	[INFO]	400	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:18:12,376	[INFO]	401	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:18:12,379	[INFO]	402	SUCCESS	+2.0	
2020-12-19 00:18:12,380	[DEBUG]	
2020-12-19 00:18:13,371	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:18:14,339	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:18:15,333	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:18:18,548	[INFO]	406	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:18:18,549	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
              }
          }
  

2020-12-19 00:18:18,550	[INFO]	407	SUCCESS	+2.0	
2020-12-19 00:18:18,550	[DEBUG]	
2020-12-19 00:18:19,564	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:18:20,549	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:18:21,568	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:18:24,813	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:18:24,814	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-19 00:18:27,988	[INFO]	412	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:18:27,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
              }
          }
  

2020-12-19 00:18:31,326	[INFO]	413	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:18:31,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:18:32,360	[INFO]	414	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:18:33,405	[INFO]	415	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:18:33,406	[INFO]	416	SUCCESS	+2.0	
2020-12-19 00:18:33,407	[DEBUG]	
2020-12-19 00:18:34,423	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:18:35,447	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:18:36,440	[INFO]	419	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:18:39,704	[INFO]	420	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:18:39,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:18:39,706	[INFO]	421	SUCCESS	+2.0	
2020-12-19 00:18:39,706	[DEBUG]	
2020-12-19 00:18:43,049	[INFO]	422	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:18:43,050	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:18:43,052	[INFO]	423	SUCCESS	+2.0	
2020-12-19 00:18:43,053	[DEBUG]	
2020-12-19 00:18:43,055	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:18:43,055	[DEBUG]	
2020-12-19 00:18:44,084	[INFO]	425	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:18:44,087	[INFO]	426	SUCCESS	+2.0	
2020-12-19 00:18:44,088	[DEBUG]	
2020-12-19 00:18:45,155	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:18:46,223	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:18:49,725	[INFO]	429	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:18:53,102	[INFO]	430	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:18:54,150	[INFO]	431	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:18:55,197	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:18:58,568	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:18:58,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 00:18:58,570	[INFO]	434	SUCCESS	+2.0	
2020-12-19 00:18:58,570	[DEBUG]	
2020-12-19 00:18:59,533	[INFO]	435	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:18:59,535	[INFO]	436	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:18:59,535	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:18:59,536	[INFO]	437	SUCCESS	+2.0	
2020-12-19 00:18:59,536	[DEBUG]	
2020-12-19 00:19:00,560	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:19:03,709	[INFO]	439	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:19:03,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:19:04,698	[INFO]	440	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:19:04,699	[INFO]	441	SUCCESS	+2.0	
2020-12-19 00:19:04,699	[DEBUG]	
2020-12-19 00:19:07,974	[INFO]	442	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:19:07,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:19:07,976	[INFO]	443	SUCCESS	+2.0	
2020-12-19 00:19:07,977	[DEBUG]	
2020-12-19 00:19:07,979	[INFO]	444	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:19:23,042	[INFO]	445	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:19:23,940	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:19:23,941	[INFO]	447	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:19:26,947	[INFO]	448	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:19:27,936	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:19:27,937	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:19:28,977	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:19:30,061	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:19:30,062	[INFO]	453	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:19:33,343	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:19:33,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:19:33,345	[INFO]	455	SUCCESS	+2.0	
2020-12-19 00:19:33,345	[DEBUG]	
2020-12-19 00:19:34,335	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:19:35,338	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:19:36,448	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:19:37,476	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:19:37,480	[INFO]	460	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:19:37,481	[DEBUG]	
2020-12-19 00:19:37,483	[INFO]	461	SUCCESS	+2.0	
2020-12-19 00:19:37,484	[DEBUG]	
2020-12-19 00:19:40,818	[INFO]	462	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:19:40,819	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:19:41,805	[INFO]	463	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:19:41,806	[INFO]	464	SUCCESS	+2.0	
2020-12-19 00:19:41,807	[DEBUG]	
2020-12-19 00:19:42,857	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:19:43,876	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:19:47,186	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:19:47,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:19:48,209	[INFO]	468	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:19:48,210	[INFO]	469	SUCCESS	+2.0	
2020-12-19 00:19:48,211	[DEBUG]	
2020-12-19 00:19:49,233	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:19:49,235	[INFO]	471	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:19:49,236	[DEBUG]	
2020-12-19 00:19:50,254	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:19:51,289	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:19:52,287	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:19:53,281	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:19:53,282	[INFO]	476	SUCCESS	+2.0	
2020-12-19 00:19:53,282	[DEBUG]	
2020-12-19 00:19:54,304	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:19:55,320	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:19:56,335	[INFO]	479	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:19:56,338	[INFO]	480	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:19:57,348	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:19:57,350	[INFO]	482	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:20:00,704	[INFO]	483	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:20:00,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:20:01,725	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:20:02,726	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:20:02,727	[INFO]	486	SUCCESS	+2.0	
2020-12-19 00:20:02,727	[DEBUG]	
2020-12-19 00:20:03,746	[INFO]	487	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:20:04,731	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:20:08,077	[INFO]	489	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:20:09,064	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:20:12,366	[INFO]	491	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:20:13,268	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:20:16,534	[INFO]	493	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:20:19,757	[INFO]	494	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:20:19,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:20:19,758	[INFO]	495	SUCCESS	+2.0	
2020-12-19 00:20:19,759	[DEBUG]	
2020-12-19 00:20:20,791	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:20:21,768	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:20:25,037	[INFO]	498	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:20:25,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:20:25,984	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:20:27,019	[INFO]	500	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:20:27,020	[INFO]	==== END ====
2020-12-19 00:20:27,020	[INFO]	Reason: step budget
2020-12-19 00:20:27,021	[INFO]	
2020-12-19 00:20:27,021	[INFO]	========== EPOCH 2 ==========
2020-12-19 00:20:27,021	[INFO]	==== WARMUP ====
2020-12-19 00:20:30,315	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:20:30,315	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:20:33,641	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:20:33,641	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:20:37,157	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:20:37,158	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:20:40,436	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 00:20:40,436	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:20:40,436	[INFO]	==== START ====
2020-12-19 00:20:41,402	[INFO]	1	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:20:44,753	[INFO]	2	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:20:44,755	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:20:45,762	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:20:46,765	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:20:50,080	[INFO]	6	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:20:50,081	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:20:51,124	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:20:52,155	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:20:55,475	[INFO]	9	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:20:55,477	[INFO]	10	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:20:55,478	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:20:55,479	[INFO]	11	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:20:55,479	[DEBUG]	
2020-12-19 00:20:56,484	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:20:57,482	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:20:57,483	[INFO]	14	SUCCESS	+2.0	
2020-12-19 00:20:57,483	[DEBUG]	
2020-12-19 00:20:58,490	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:21:01,772	[INFO]	16	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:21:01,774	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:21:01,775	[INFO]	17	SUCCESS	+2.0	
2020-12-19 00:21:01,776	[DEBUG]	
2020-12-19 00:21:02,763	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:21:03,800	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:21:07,122	[INFO]	20	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:21:07,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:21:08,097	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:21:08,100	[INFO]	22	SUCCESS	+2.0	
2020-12-19 00:21:08,100	[DEBUG]	
2020-12-19 00:21:09,102	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:21:10,106	[INFO]	24	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:21:13,424	[INFO]	25	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:21:13,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:21:13,426	[INFO]	26	SUCCESS	+2.0	
2020-12-19 00:21:13,426	[DEBUG]	
2020-12-19 00:21:16,744	[INFO]	27	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:21:16,745	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-19 00:21:17,708	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:21:17,709	[INFO]	29	SUCCESS	+2.0	
2020-12-19 00:21:17,710	[DEBUG]	
2020-12-19 00:21:18,715	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:21:18,716	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:21:18,717	[DEBUG]	
2020-12-19 00:21:19,696	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:21:19,697	[INFO]	33	SUCCESS	+2.0	
2020-12-19 00:21:19,697	[DEBUG]	
2020-12-19 00:21:23,051	[INFO]	34	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:21:23,053	[INFO]	35	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:21:23,054	[DEBUG]	
2020-12-19 00:21:23,055	[INFO]	36	SUCCESS	+2.0	
2020-12-19 00:21:23,056	[DEBUG]	
2020-12-19 00:21:24,018	[INFO]	37	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:21:24,021	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:21:27,370	[INFO]	39	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:21:27,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:21:28,406	[INFO]	40	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:21:28,410	[INFO]	41	SUCCESS	+2.0	
2020-12-19 00:21:28,411	[DEBUG]	
2020-12-19 00:21:31,716	[INFO]	42	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:21:31,717	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:21:35,129	[INFO]	43	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:21:35,130	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:21:36,098	[INFO]	44	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:21:39,441	[INFO]	45	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:21:39,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:21:42,918	[INFO]	46	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:21:42,919	[INFO]	47	SUCCESS	+2.0	
2020-12-19 00:21:42,919	[DEBUG]	
2020-12-19 00:21:43,960	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:21:44,979	[INFO]	49	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:21:45,977	[INFO]	50	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:21:46,961	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:21:47,957	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:21:47,959	[INFO]	53	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:21:47,959	[DEBUG]	
2020-12-19 00:21:47,960	[INFO]	54	SUCCESS	+2.0	
2020-12-19 00:21:47,960	[DEBUG]	
2020-12-19 00:21:51,269	[INFO]	55	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:21:52,253	[INFO]	56	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:21:53,237	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:21:54,231	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:21:57,628	[INFO]	59	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:21:57,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:21:57,630	[INFO]	60	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:21:57,630	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:22:00,804	[INFO]	61	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:22:00,806	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 52,57 ****
--- 50,62 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 00:22:00,807	[INFO]	62	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:22:00,808	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 52,57 ****
--- 50,62 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 00:22:04,086	[INFO]	63	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:22:07,307	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:22:07,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 00:22:08,291	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:22:09,296	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:22:09,297	[INFO]	67	SUCCESS	+2.0	
2020-12-19 00:22:09,298	[DEBUG]	
2020-12-19 00:22:12,637	[INFO]	68	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:22:15,925	[INFO]	69	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:22:16,910	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:22:20,222	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:22:20,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 00:22:20,224	[INFO]	72	SUCCESS	+2.0	
2020-12-19 00:22:20,224	[DEBUG]	
2020-12-19 00:22:21,201	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:22:22,206	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:22:25,564	[INFO]	75	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:22:26,509	[INFO]	76	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:22:27,512	[INFO]	77	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:22:30,775	[INFO]	78	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:22:30,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:22:34,126	[INFO]	79	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:22:34,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 13,18 ****
--- 13,20 ----
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
+         int minDistance = Integer.MAX_VALUE;
+ 
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:22:34,129	[INFO]	80	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:22:34,130	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:22:34,131	[INFO]	81	SUCCESS	+2.0	
2020-12-19 00:22:34,131	[DEBUG]	
2020-12-19 00:22:35,144	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:22:38,361	[INFO]	83	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:22:38,362	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:22:38,363	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:22:38,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:22:38,365	[INFO]	85	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:22:38,365	[DEBUG]	
2020-12-19 00:22:38,366	[INFO]	86	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:22:38,366	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:22:39,392	[INFO]	87	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:22:39,395	[INFO]	88	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:22:39,397	[DEBUG]	
2020-12-19 00:22:39,399	[INFO]	89	SUCCESS	+2.0	
2020-12-19 00:22:39,400	[DEBUG]	
2020-12-19 00:22:40,407	[INFO]	90	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:22:43,786	[INFO]	91	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:22:43,789	[INFO]	92	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:22:44,818	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:22:45,807	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:22:46,810	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:22:47,835	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:22:51,168	[INFO]	97	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:22:51,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:22:52,138	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:22:52,139	[INFO]	99	SUCCESS	+2.0	
2020-12-19 00:22:52,140	[DEBUG]	
2020-12-19 00:22:53,183	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:22:56,546	[INFO]	101	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:22:56,547	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-19 00:22:56,547	[INFO]	102	SUCCESS	+2.0	
2020-12-19 00:22:56,548	[DEBUG]	
2020-12-19 00:22:57,518	[INFO]	103	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:22:57,519	[INFO]	104	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:22:57,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:22:57,521	[INFO]	105	SUCCESS	+2.0	
2020-12-19 00:22:57,521	[DEBUG]	
2020-12-19 00:22:58,514	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:23:01,828	[INFO]	107	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:23:02,815	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:23:06,154	[INFO]	109	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:23:06,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:06,156	[INFO]	110	SUCCESS	+2.0	
2020-12-19 00:23:06,157	[DEBUG]	
2020-12-19 00:23:07,104	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:23:10,432	[INFO]	112	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:23:10,433	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:23:11,378	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:23:12,386	[INFO]	114	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:23:15,614	[INFO]	115	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:23:15,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:15,617	[INFO]	116	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:23:15,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:15,619	[INFO]	117	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:23:15,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:15,621	[INFO]	118	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:23:15,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:15,623	[INFO]	119	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:23:15,624	[DEBUG]	
2020-12-19 00:23:16,603	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:23:16,605	[INFO]	121	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:23:16,605	[DEBUG]	
2020-12-19 00:23:19,936	[INFO]	122	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:23:19,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-19 00:23:19,938	[INFO]	123	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:23:19,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-19 00:23:19,940	[INFO]	124	SUCCESS	+2.0	
2020-12-19 00:23:19,940	[DEBUG]	
2020-12-19 00:23:23,177	[INFO]	125	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:23:23,179	[INFO]	126	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:23:23,179	[DEBUG]	
2020-12-19 00:23:23,180	[INFO]	127	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:23:23,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:23:24,155	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:23:25,148	[INFO]	129	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:23:26,148	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:23:27,150	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:23:27,154	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:23:27,155	[DEBUG]	
2020-12-19 00:23:27,157	[INFO]	133	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:23:27,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:23:27,160	[INFO]	134	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:23:27,161	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:23:27,163	[INFO]	135	SUCCESS	+2.0	
2020-12-19 00:23:27,163	[DEBUG]	
2020-12-19 00:23:28,146	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:23:29,187	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:23:29,189	[INFO]	138	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:23:29,189	[DEBUG]	
2020-12-19 00:23:30,230	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:23:30,233	[INFO]	140	SUCCESS	+2.0	
2020-12-19 00:23:30,234	[DEBUG]	
2020-12-19 00:23:33,593	[INFO]	141	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:23:34,569	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:23:35,563	[INFO]	143	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:23:36,601	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:23:39,884	[INFO]	145	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:23:39,885	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:23:40,882	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:23:40,883	[INFO]	147	SUCCESS	+2.0	
2020-12-19 00:23:40,883	[DEBUG]	
2020-12-19 00:23:41,875	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:23:42,863	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:23:43,902	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:23:47,145	[INFO]	151	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:23:47,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:23:47,147	[INFO]	152	SUCCESS	+2.0	
2020-12-19 00:23:47,147	[DEBUG]	
2020-12-19 00:23:47,148	[INFO]	153	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:23:47,148	[DEBUG]	
2020-12-19 00:23:47,149	[INFO]	154	SUCCESS	+2.0	
2020-12-19 00:23:47,149	[DEBUG]	
2020-12-19 00:23:48,140	[INFO]	155	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:23:49,170	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:23:49,174	[INFO]	157	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:23:50,178	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:23:50,179	[INFO]	159	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:23:50,180	[DEBUG]	
2020-12-19 00:23:50,180	[INFO]	160	SUCCESS	+2.0	
2020-12-19 00:23:50,181	[DEBUG]	
2020-12-19 00:23:53,502	[INFO]	161	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:23:56,884	[INFO]	162	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:23:56,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-19 00:23:56,887	[INFO]	163	SUCCESS	+2.0	
2020-12-19 00:23:56,888	[DEBUG]	
2020-12-19 00:24:00,329	[INFO]	164	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:24:03,832	[INFO]	165	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:24:03,833	[INFO]	166	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:24:03,834	[DEBUG]	
2020-12-19 00:24:07,273	[INFO]	167	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:24:07,274	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:24:08,255	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:24:08,256	[INFO]	169	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:24:08,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:24:08,257	[INFO]	170	SUCCESS	+2.0	
2020-12-19 00:24:08,257	[DEBUG]	
2020-12-19 00:24:09,234	[INFO]	171	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:24:10,223	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:24:13,473	[INFO]	173	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:24:16,789	[INFO]	174	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:24:17,762	[INFO]	175	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:24:18,751	[INFO]	176	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:24:19,760	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:24:20,764	[INFO]	178	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:24:21,761	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:24:22,763	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:24:22,765	[INFO]	181	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:24:25,983	[INFO]	182	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:24:25,984	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 00:24:26,971	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:24:30,246	[INFO]	184	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:24:30,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 00:24:30,248	[INFO]	185	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:24:30,248	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 00:24:30,249	[INFO]	186	SUCCESS	+2.0	
2020-12-19 00:24:30,249	[DEBUG]	
2020-12-19 00:24:31,221	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:24:32,153	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:24:35,493	[INFO]	189	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:24:35,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:24:35,495	[INFO]	190	SUCCESS	+2.0	
2020-12-19 00:24:35,495	[DEBUG]	
2020-12-19 00:24:36,507	[INFO]	191	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:24:39,765	[INFO]	192	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:24:40,797	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:24:44,061	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:24:44,062	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:24:44,063	[INFO]	195	SUCCESS	+2.0	
2020-12-19 00:24:44,064	[DEBUG]	
2020-12-19 00:24:45,055	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:24:46,032	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:24:46,033	[INFO]	198	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:24:46,034	[INFO]	199	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:24:46,034	[DEBUG]	
2020-12-19 00:24:46,035	[INFO]	200	SUCCESS	+2.0	
2020-12-19 00:24:46,035	[DEBUG]	
2020-12-19 00:24:47,146	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:24:48,150	[INFO]	202	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:24:48,151	[INFO]	203	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:24:48,152	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:24:49,134	[INFO]	205	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:24:49,136	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:24:52,342	[INFO]	207	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:24:52,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:24:52,345	[INFO]	208	SUCCESS	+2.0	
2020-12-19 00:24:52,345	[DEBUG]	
2020-12-19 00:24:55,665	[INFO]	209	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:24:55,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:24:56,676	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:24:56,679	[INFO]	211	SUCCESS	+2.0	
2020-12-19 00:24:56,680	[DEBUG]	
2020-12-19 00:24:57,687	[INFO]	212	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:25:00,983	[INFO]	213	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:25:00,984	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 00:25:00,985	[INFO]	214	SUCCESS	+2.0	
2020-12-19 00:25:00,985	[DEBUG]	
2020-12-19 00:25:04,292	[INFO]	215	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:25:05,276	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:25:06,269	[INFO]	217	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:25:09,536	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:25:09,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:25:09,538	[INFO]	219	SUCCESS	+2.0	
2020-12-19 00:25:09,538	[DEBUG]	
2020-12-19 00:25:10,475	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:25:11,467	[INFO]	221	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:25:11,471	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:25:14,856	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:25:14,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-19 00:25:15,770	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:25:18,939	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:25:18,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:25:18,941	[INFO]	226	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:25:18,941	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:25:18,942	[INFO]	227	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:25:18,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:25:18,944	[INFO]	228	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:25:18,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:25:19,945	[INFO]	229	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:25:19,946	[INFO]	230	SUCCESS	+2.0	
2020-12-19 00:25:19,946	[DEBUG]	
2020-12-19 00:25:35,004	[INFO]	231	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:25:36,083	[INFO]	232	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:25:37,211	[INFO]	233	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:25:41,064	[INFO]	234	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:25:41,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:25:41,067	[INFO]	235	SUCCESS	+2.0	
2020-12-19 00:25:41,067	[DEBUG]	
2020-12-19 00:25:45,195	[INFO]	236	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:25:45,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:25:45,197	[INFO]	237	SUCCESS	+2.0	
2020-12-19 00:25:45,198	[DEBUG]	
2020-12-19 00:25:49,000	[INFO]	238	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:25:49,001	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:25:49,984	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:25:51,024	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:25:52,042	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:25:52,043	[INFO]	242	SUCCESS	+2.0	
2020-12-19 00:25:52,044	[DEBUG]	
2020-12-19 00:25:52,045	[INFO]	243	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:25:52,045	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:25:52,046	[INFO]	244	SUCCESS	+2.0	
2020-12-19 00:25:52,047	[DEBUG]	
2020-12-19 00:25:52,048	[INFO]	245	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:25:52,048	[DEBUG]	
2020-12-19 00:25:53,052	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:25:53,053	[INFO]	247	SUCCESS	+2.0	
2020-12-19 00:25:53,053	[DEBUG]	
2020-12-19 00:25:54,042	[INFO]	248	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:25:54,043	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:25:55,057	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:25:58,446	[INFO]	251	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:25:58,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:26:01,654	[INFO]	252	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:26:01,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:26:02,662	[INFO]	253	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:26:05,940	[INFO]	254	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:26:05,942	[INFO]	255	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:26:05,942	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:26:05,943	[INFO]	256	SUCCESS	+2.0	
2020-12-19 00:26:05,943	[DEBUG]	
2020-12-19 00:26:06,958	[INFO]	257	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:26:06,960	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:26:06,960	[INFO]	259	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:26:06,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:26:07,953	[INFO]	260	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:26:07,954	[INFO]	261	SUCCESS	+2.0	
2020-12-19 00:26:07,954	[DEBUG]	
2020-12-19 00:26:08,948	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:26:09,933	[INFO]	263	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:26:13,346	[INFO]	264	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:26:14,317	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:26:15,307	[INFO]	266	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:26:16,308	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:26:19,692	[INFO]	268	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:26:19,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:26:19,694	[INFO]	269	SUCCESS	+2.0	
2020-12-19 00:26:19,694	[DEBUG]	
2020-12-19 00:26:22,914	[INFO]	270	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:26:22,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:26:26,280	[INFO]	271	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:26:26,281	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:26:27,247	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:26:30,601	[INFO]	273	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:26:30,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:26:33,822	[INFO]	274	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:26:33,823	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 32,38 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:26:33,825	[INFO]	275	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:33,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 32,38 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:26:34,824	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:26:38,147	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:38,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:26:41,470	[INFO]	278	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:26:41,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:26:41,472	[INFO]	279	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:41,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:26:44,736	[INFO]	280	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:26:44,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-19 00:26:47,906	[INFO]	281	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:26:47,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:26:47,909	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:26:47,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,42 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 20,33 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:26:47,910	[INFO]	283	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:47,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:26:47,912	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:26:47,913	[INFO]	285	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:47,913	[DEBUG]	
2020-12-19 00:26:47,914	[INFO]	286	SUCCESS	+2.0	
2020-12-19 00:26:47,914	[DEBUG]	
2020-12-19 00:26:48,915	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:26:49,903	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:26:49,906	[INFO]	289	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:26:49,906	[DEBUG]	
2020-12-19 00:26:49,907	[INFO]	290	SUCCESS	+2.0	
2020-12-19 00:26:49,908	[DEBUG]	
2020-12-19 00:26:50,924	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:26:51,926	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:26:52,921	[INFO]	293	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:26:53,930	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:26:57,157	[INFO]	295	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:26:57,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:26:58,168	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:26:59,180	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:27:00,142	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:27:00,143	[INFO]	299	SUCCESS	+2.0	
2020-12-19 00:27:00,143	[DEBUG]	
2020-12-19 00:27:01,146	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:27:04,407	[INFO]	301	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:27:07,651	[INFO]	302	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:27:07,652	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:27:07,653	[INFO]	303	SUCCESS	+2.0	
2020-12-19 00:27:07,653	[DEBUG]	
2020-12-19 00:27:08,682	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:27:08,686	[INFO]	305	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:27:08,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:27:08,689	[INFO]	306	SUCCESS	+2.0	
2020-12-19 00:27:08,690	[DEBUG]	
2020-12-19 00:27:09,674	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:27:13,014	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:27:13,015	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:27:13,016	[INFO]	309	SUCCESS	+2.0	
2020-12-19 00:27:13,016	[DEBUG]	
2020-12-19 00:27:13,018	[INFO]	310	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:27:13,018	[DEBUG]	
2020-12-19 00:27:13,989	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:27:13,990	[INFO]	312	SUCCESS	+2.0	
2020-12-19 00:27:13,990	[DEBUG]	
2020-12-19 00:27:17,244	[INFO]	313	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:27:17,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:27:17,246	[INFO]	314	SUCCESS	+2.0	
2020-12-19 00:27:17,247	[DEBUG]	
2020-12-19 00:27:18,182	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:27:21,520	[INFO]	316	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:27:21,522	[INFO]	317	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:27:21,522	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:27:21,523	[INFO]	318	SUCCESS	+2.0	
2020-12-19 00:27:21,523	[DEBUG]	
2020-12-19 00:27:22,481	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:27:25,754	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:27:25,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 00:27:25,758	[INFO]	321	SUCCESS	+2.0	
2020-12-19 00:27:25,759	[DEBUG]	
2020-12-19 00:27:26,732	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:27:29,982	[INFO]	323	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:27:29,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:27:29,984	[INFO]	324	SUCCESS	+2.0	
2020-12-19 00:27:29,984	[DEBUG]	
2020-12-19 00:27:30,946	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:27:34,300	[INFO]	326	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:27:34,301	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:27:37,503	[INFO]	327	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:27:37,504	[INFO]	328	SUCCESS	+2.0	
2020-12-19 00:27:37,504	[DEBUG]	
2020-12-19 00:27:37,506	[INFO]	329	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:27:37,506	[DEBUG]	
2020-12-19 00:27:37,507	[INFO]	330	SUCCESS	+2.0	
2020-12-19 00:27:37,507	[DEBUG]	
2020-12-19 00:27:38,498	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:27:41,688	[INFO]	332	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:27:41,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:27:41,690	[INFO]	333	SUCCESS	+2.0	
2020-12-19 00:27:41,690	[DEBUG]	
2020-12-19 00:27:45,037	[INFO]	334	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:27:46,021	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:27:47,064	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:27:48,046	[INFO]	337	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:27:49,052	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:27:50,062	[INFO]	339	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:27:51,022	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:27:52,020	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:27:52,022	[INFO]	342	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:27:52,023	[DEBUG]	
2020-12-19 00:27:53,018	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:27:53,020	[INFO]	344	SUCCESS	+2.0	
2020-12-19 00:27:53,021	[DEBUG]	
2020-12-19 00:27:56,323	[INFO]	345	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:27:56,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:28:11,383	[INFO]	346	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:28:12,333	[INFO]	347	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:28:12,335	[INFO]	348	SUCCESS	+2.0	
2020-12-19 00:28:12,335	[DEBUG]	
2020-12-19 00:28:13,229	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:28:14,093	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:28:14,985	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:28:15,842	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:28:15,843	[INFO]	353	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:28:15,844	[DEBUG]	
2020-12-19 00:28:15,844	[INFO]	354	SUCCESS	+2.0	
2020-12-19 00:28:15,844	[DEBUG]	
2020-12-19 00:28:15,845	[INFO]	355	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:28:15,845	[DEBUG]	
2020-12-19 00:28:15,846	[INFO]	356	SUCCESS	+2.0	
2020-12-19 00:28:15,846	[DEBUG]	
2020-12-19 00:28:16,723	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:28:16,724	[INFO]	358	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:28:16,725	[DEBUG]	
2020-12-19 00:28:16,726	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:28:19,916	[INFO]	360	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:28:19,917	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:28:20,913	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:28:24,243	[INFO]	362	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:28:24,244	[INFO]	363	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:28:24,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:28:24,245	[INFO]	364	SUCCESS	+2.0	
2020-12-19 00:28:24,246	[DEBUG]	
2020-12-19 00:28:27,573	[INFO]	365	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:28:28,524	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:28:29,532	[INFO]	367	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:28:30,580	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:28:34,001	[INFO]	369	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:28:34,003	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 00:28:34,004	[INFO]	370	SUCCESS	+2.0	
2020-12-19 00:28:34,005	[DEBUG]	
2020-12-19 00:28:37,252	[INFO]	371	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:28:38,258	[INFO]	372	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:28:39,301	[INFO]	373	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:28:40,323	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:28:41,329	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:28:41,330	[INFO]	376	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:28:44,681	[INFO]	377	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:28:44,682	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:28:45,741	[INFO]	379	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:28:46,752	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:28:47,820	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:28:48,826	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:28:52,188	[INFO]	383	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:28:52,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:28:52,189	[INFO]	384	SUCCESS	+2.0	
2020-12-19 00:28:52,190	[DEBUG]	
2020-12-19 00:28:55,382	[INFO]	385	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:28:58,666	[INFO]	386	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:28:58,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:28:58,668	[INFO]	387	SUCCESS	+2.0	
2020-12-19 00:28:58,668	[DEBUG]	
2020-12-19 00:29:01,953	[INFO]	388	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:29:01,954	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     Node minNode = null;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:29:01,955	[INFO]	389	SUCCESS	+2.0	
2020-12-19 00:29:01,955	[DEBUG]	
2020-12-19 00:29:02,970	[INFO]	390	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:29:03,979	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:29:04,997	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:29:08,242	[INFO]	393	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:29:08,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:29:08,243	[INFO]	394	SUCCESS	+2.0	
2020-12-19 00:29:08,244	[DEBUG]	
2020-12-19 00:29:11,533	[INFO]	395	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:29:11,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 00:29:11,535	[INFO]	396	SUCCESS	+2.0	
2020-12-19 00:29:11,536	[DEBUG]	
2020-12-19 00:29:26,611	[INFO]	397	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:29:26,612	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:29:27,485	[INFO]	399	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:29:28,368	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:29:29,264	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:29:30,211	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:29:33,179	[INFO]	403	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:29:33,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:29:36,309	[INFO]	404	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:29:37,225	[INFO]	405	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:29:38,135	[INFO]	406	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:29:41,293	[INFO]	407	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:29:41,294	[INFO]	408	SUCCESS	+2.0	
2020-12-19 00:29:41,295	[DEBUG]	
2020-12-19 00:29:44,549	[INFO]	409	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:29:45,570	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:29:46,546	[INFO]	411	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:29:47,567	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:29:48,593	[INFO]	413	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:29:51,903	[INFO]	414	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:29:51,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:29:52,820	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:29:56,021	[INFO]	416	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:29:56,023	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,41 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:29:59,195	[INFO]	417	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:29:59,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,41 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:30:02,434	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:30:02,435	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,41 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     visitedNodes.add(node);
!                     
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:30:03,440	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:30:06,867	[INFO]	420	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:30:06,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,41 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
!                     
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:30:07,776	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:30:10,928	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:30:10,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 00:30:11,880	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:30:15,227	[INFO]	424	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:30:15,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:30:15,229	[INFO]	425	SUCCESS	+2.0	
2020-12-19 00:30:15,229	[DEBUG]	
2020-12-19 00:30:18,565	[INFO]	426	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:30:18,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:30:19,479	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:30:22,736	[INFO]	428	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:30:22,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,37 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:30:22,738	[INFO]	429	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:30:22,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:30:26,037	[INFO]	430	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:30:26,038	[INFO]	431	SUCCESS	+2.0	
2020-12-19 00:30:26,039	[DEBUG]	
2020-12-19 00:30:26,990	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:30:28,004	[INFO]	433	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:30:29,016	[INFO]	434	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:30:32,302	[INFO]	435	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:30:33,249	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:30:33,252	[INFO]	437	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:30:33,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:30:33,254	[INFO]	438	SUCCESS	+2.0	
2020-12-19 00:30:33,254	[DEBUG]	
2020-12-19 00:30:34,261	[INFO]	439	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:30:35,339	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:30:36,511	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:30:36,513	[INFO]	442	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:30:36,514	[INFO]	443	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:30:40,244	[INFO]	444	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:30:40,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:30:40,246	[INFO]	445	SUCCESS	+2.0	
2020-12-19 00:30:40,247	[DEBUG]	
2020-12-19 00:30:41,415	[INFO]	446	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:30:42,563	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:30:47,391	[INFO]	448	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:30:48,825	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:30:53,032	[INFO]	450	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:30:54,014	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:30:54,986	[INFO]	452	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:30:54,987	[INFO]	453	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:30:54,988	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:30:54,988	[DEBUG]	
2020-12-19 00:30:55,962	[INFO]	455	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:30:55,964	[INFO]	456	SUCCESS	+2.0	
2020-12-19 00:30:55,965	[DEBUG]	
2020-12-19 00:30:57,033	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:31:00,365	[INFO]	458	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:31:01,366	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:31:02,342	[INFO]	460	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:31:05,631	[INFO]	461	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:31:05,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 00:31:05,633	[INFO]	462	SUCCESS	+2.0	
2020-12-19 00:31:05,633	[DEBUG]	
2020-12-19 00:31:09,011	[INFO]	463	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:31:09,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:31:09,944	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:31:09,945	[INFO]	465	SUCCESS	+2.0	
2020-12-19 00:31:09,946	[DEBUG]	
2020-12-19 00:31:13,333	[INFO]	466	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:31:13,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:31:13,335	[INFO]	467	SUCCESS	+2.0	
2020-12-19 00:31:13,335	[DEBUG]	
2020-12-19 00:31:14,324	[INFO]	468	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:31:15,339	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:31:16,335	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:31:16,337	[INFO]	471	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:31:16,337	[INFO]	472	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:31:17,403	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:31:18,403	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:31:21,792	[INFO]	475	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:31:21,795	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:31:21,797	[DEBUG]	
2020-12-19 00:31:21,799	[INFO]	477	SUCCESS	+2.0	
2020-12-19 00:31:21,800	[DEBUG]	
2020-12-19 00:31:22,798	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:31:26,121	[INFO]	479	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:31:26,122	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:26,123	[INFO]	480	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:31:26,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:26,987	[INFO]	481	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:31:26,989	[INFO]	482	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:31:26,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:30,312	[INFO]	483	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:31:30,313	[INFO]	484	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:30,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:31,260	[INFO]	485	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:31,262	[INFO]	486	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:31:31,263	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:31,264	[INFO]	487	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:31,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:32,276	[INFO]	488	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:31:32,280	[INFO]	489	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:32,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:35,781	[INFO]	490	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:31:36,767	[INFO]	491	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:36,768	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:36,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:37,767	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:31:38,703	[INFO]	494	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:31:38,704	[INFO]	495	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:31:38,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:38,706	[INFO]	496	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:31:38,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:39,647	[INFO]	497	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:31:39,649	[INFO]	498	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:31:39,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:31:39,650	[INFO]	499	SUCCESS	+2.0	
2020-12-19 00:31:39,651	[DEBUG]	
2020-12-19 00:31:43,010	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:31:43,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:31:43,012	[INFO]	==== END ====
2020-12-19 00:31:43,012	[INFO]	Reason: step budget
2020-12-19 00:31:43,013	[INFO]	
2020-12-19 00:31:43,013	[INFO]	========== EPOCH 3 ==========
2020-12-19 00:31:43,013	[INFO]	==== WARMUP ====
2020-12-19 00:31:46,347	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:31:46,347	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:31:49,738	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:31:49,738	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:31:53,093	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:31:53,093	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:31:56,302	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 00:31:56,303	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:31:56,303	[INFO]	==== START ====
2020-12-19 00:31:59,644	[INFO]	1	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:32:02,868	[INFO]	2	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:32:03,858	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:32:04,802	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:32:05,799	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:32:09,071	[INFO]	6	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:32:09,072	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:32:09,073	[INFO]	7	SUCCESS	+2.0	
2020-12-19 00:32:09,074	[DEBUG]	
2020-12-19 00:32:12,346	[INFO]	8	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:32:15,619	[INFO]	9	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:32:15,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:32:15,620	[INFO]	10	SUCCESS	+2.0	
2020-12-19 00:32:15,621	[DEBUG]	
2020-12-19 00:32:15,622	[INFO]	11	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:32:15,622	[DEBUG]	
2020-12-19 00:32:16,611	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:32:17,631	[INFO]	13	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:32:18,606	[INFO]	14	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:32:21,906	[INFO]	15	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:32:21,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:32:25,119	[INFO]	16	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:32:25,120	[INFO]	17	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:32:25,120	[DEBUG]	
2020-12-19 00:32:26,160	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:32:29,463	[INFO]	19	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:32:29,464	[INFO]	20	SUCCESS	+2.0	
2020-12-19 00:32:29,465	[DEBUG]	
2020-12-19 00:32:30,467	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:32:31,454	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:32:34,792	[INFO]	23	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:32:34,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 00:32:34,794	[INFO]	24	SUCCESS	+2.0	
2020-12-19 00:32:34,794	[DEBUG]	
2020-12-19 00:32:35,771	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:32:35,773	[INFO]	26	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:32:36,775	[INFO]	27	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:32:37,801	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:32:41,094	[INFO]	29	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:32:42,063	[INFO]	30	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:32:45,475	[INFO]	31	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:32:46,431	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:32:47,456	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:32:50,754	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:32:50,755	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:32:50,755	[INFO]	35	SUCCESS	+2.0	
2020-12-19 00:32:50,756	[DEBUG]	
2020-12-19 00:32:54,026	[INFO]	36	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:32:55,017	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:32:56,005	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:32:59,193	[INFO]	39	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:32:59,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-19 00:33:00,144	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:33:00,145	[INFO]	41	SUCCESS	+2.0	
2020-12-19 00:33:00,145	[DEBUG]	
2020-12-19 00:33:03,385	[INFO]	42	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:33:06,702	[INFO]	43	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:33:06,704	[INFO]	44	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:33:07,628	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:08,627	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:33:12,004	[INFO]	47	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:33:12,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:33:12,006	[INFO]	48	SUCCESS	+2.0	
2020-12-19 00:33:12,006	[DEBUG]	
2020-12-19 00:33:13,000	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:33:13,983	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:33:17,266	[INFO]	51	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:33:17,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:33:18,283	[INFO]	52	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:33:18,285	[INFO]	53	SUCCESS	+2.0	
2020-12-19 00:33:18,285	[DEBUG]	
2020-12-19 00:33:19,277	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:33:20,276	[INFO]	55	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:21,263	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:33:22,198	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:33:23,233	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:33:24,257	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:33:24,260	[INFO]	60	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:33:24,260	[DEBUG]	
2020-12-19 00:33:27,565	[INFO]	61	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:27,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:33:28,570	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:33:29,571	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:33:30,579	[INFO]	64	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:33:31,580	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:33:34,917	[INFO]	66	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:33:34,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:33:34,919	[INFO]	67	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:34,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:33:34,920	[INFO]	68	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:34,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:33:34,921	[INFO]	69	SUCCESS	+2.0	
2020-12-19 00:33:34,922	[DEBUG]	
2020-12-19 00:33:35,923	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:33:36,965	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:33:36,968	[INFO]	72	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:33:36,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:33:37,978	[INFO]	73	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:33:37,981	[INFO]	74	SUCCESS	+2.0	
2020-12-19 00:33:37,981	[DEBUG]	
2020-12-19 00:33:37,986	[INFO]	75	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:33:37,989	[DEBUG]	
2020-12-19 00:33:37,997	[INFO]	76	SUCCESS	+2.0	
2020-12-19 00:33:38,000	[DEBUG]	
2020-12-19 00:33:38,930	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:33:39,938	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:33:40,936	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:33:44,373	[INFO]	80	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:33:44,374	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:33:44,375	[INFO]	81	SUCCESS	+2.0	
2020-12-19 00:33:44,376	[DEBUG]	
2020-12-19 00:33:47,614	[INFO]	82	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:33:47,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:47,617	[INFO]	83	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:33:47,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:47,619	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:33:47,620	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:47,621	[INFO]	85	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:33:47,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:50,898	[INFO]	86	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:33:50,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:51,884	[INFO]	87	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:33:52,894	[INFO]	88	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:33:52,896	[INFO]	89	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:33:52,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:33:52,897	[INFO]	90	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:33:52,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:34:07,956	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:34:10,901	[INFO]	92	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:34:10,902	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:34:13,786	[INFO]	93	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:34:16,962	[INFO]	94	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:34:16,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:34:16,963	[INFO]	95	SUCCESS	+2.0	
2020-12-19 00:34:16,964	[DEBUG]	
2020-12-19 00:34:17,978	[INFO]	96	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:34:18,994	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:34:18,995	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:34:19,946	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:34:23,264	[INFO]	100	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:34:26,527	[INFO]	101	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:34:26,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:34:26,529	[INFO]	102	SUCCESS	+2.0	
2020-12-19 00:34:26,529	[DEBUG]	
2020-12-19 00:34:29,718	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:34:29,719	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-19 00:34:29,720	[INFO]	104	SUCCESS	+2.0	
2020-12-19 00:34:29,721	[DEBUG]	
2020-12-19 00:34:29,722	[INFO]	105	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:34:29,722	[DEBUG]	
2020-12-19 00:34:33,031	[INFO]	106	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:34:33,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:34:36,382	[INFO]	107	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:34:36,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:34:39,644	[INFO]	108	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:34:39,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:34:39,646	[INFO]	109	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:34:39,647	[DEBUG]	
2020-12-19 00:34:40,615	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:34:40,620	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:34:40,623	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:34:40,625	[INFO]	113	SUCCESS	+2.0	
2020-12-19 00:34:40,625	[DEBUG]	
2020-12-19 00:34:41,634	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:34:41,638	[INFO]	115	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:34:41,640	[DEBUG]	
2020-12-19 00:34:44,948	[INFO]	116	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:34:44,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:34:48,307	[INFO]	117	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:34:48,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:34:48,309	[INFO]	118	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:34:48,310	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:34:49,275	[INFO]	119	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:34:49,277	[INFO]	120	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:34:49,278	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:34:50,315	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:34:50,316	[INFO]	122	SUCCESS	+2.0	
2020-12-19 00:34:50,317	[DEBUG]	
2020-12-19 00:34:51,338	[INFO]	123	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:34:54,635	[INFO]	124	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:34:54,636	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 00:34:54,637	[INFO]	125	SUCCESS	+2.0	
2020-12-19 00:34:54,637	[DEBUG]	
2020-12-19 00:34:55,641	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:34:55,643	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:34:56,647	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:34:57,645	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:34:57,646	[INFO]	130	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:34:57,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:34:58,721	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:34:59,702	[INFO]	132	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:35:03,274	[INFO]	133	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:35:03,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:35:04,232	[INFO]	134	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:35:05,253	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:35:05,257	[INFO]	136	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:35:05,258	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:35:06,248	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:35:09,525	[INFO]	138	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:35:09,526	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,54 ****
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 43,55 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:35:10,506	[INFO]	139	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:35:10,508	[INFO]	140	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:35:10,509	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:35:10,510	[INFO]	141	SUCCESS	+2.0	
2020-12-19 00:35:10,511	[DEBUG]	
2020-12-19 00:35:10,512	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:35:10,513	[INFO]	143	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:35:10,514	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:35:10,515	[INFO]	144	SUCCESS	+2.0	
2020-12-19 00:35:10,516	[DEBUG]	
2020-12-19 00:35:13,772	[INFO]	145	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:35:13,773	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:35:14,730	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:35:14,731	[INFO]	147	SUCCESS	+2.0	
2020-12-19 00:35:14,732	[DEBUG]	
2020-12-19 00:35:18,051	[INFO]	148	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:35:18,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     Node minNode = null;
                      continue;
                  }
  

2020-12-19 00:35:18,053	[INFO]	149	SUCCESS	+2.0	
2020-12-19 00:35:18,053	[DEBUG]	
2020-12-19 00:35:19,017	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:35:19,019	[INFO]	151	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:35:19,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:35:19,020	[INFO]	152	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:35:19,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:35:20,020	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:35:20,021	[INFO]	154	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:35:20,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:35:20,022	[INFO]	155	SUCCESS	+2.0	
2020-12-19 00:35:20,022	[DEBUG]	
2020-12-19 00:35:20,023	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:35:21,056	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:35:24,328	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:35:24,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:35:24,330	[INFO]	159	SUCCESS	+2.0	
2020-12-19 00:35:24,330	[DEBUG]	
2020-12-19 00:35:25,314	[INFO]	160	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:35:28,645	[INFO]	161	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:35:29,635	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:35:29,640	[INFO]	163	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:35:29,641	[DEBUG]	
2020-12-19 00:35:29,644	[INFO]	164	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:35:29,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:35:30,651	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:35:33,871	[INFO]	166	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:35:33,873	[INFO]	167	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:35:33,874	[DEBUG]	
2020-12-19 00:35:33,875	[INFO]	168	SUCCESS	+2.0	
2020-12-19 00:35:33,875	[DEBUG]	
2020-12-19 00:35:34,837	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:35:35,981	[INFO]	170	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:35:37,002	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:35:38,019	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:35:41,326	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:35:41,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 00:35:41,329	[INFO]	174	SUCCESS	+2.0	
2020-12-19 00:35:41,329	[DEBUG]	
2020-12-19 00:35:42,293	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:35:42,294	[INFO]	176	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:35:43,342	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:35:43,347	[INFO]	178	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:35:43,349	[DEBUG]	
2020-12-19 00:35:44,378	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:35:45,391	[INFO]	180	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:35:45,393	[INFO]	181	SUCCESS	+2.0	
2020-12-19 00:35:45,394	[DEBUG]	
2020-12-19 00:35:45,397	[INFO]	182	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:35:45,400	[INFO]	183	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:35:45,401	[INFO]	184	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:35:45,402	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:35:48,655	[INFO]	185	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:35:48,656	[INFO]	186	SUCCESS	+2.0	
2020-12-19 00:35:48,656	[DEBUG]	
2020-12-19 00:35:51,954	[INFO]	187	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:35:55,338	[INFO]	188	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:35:55,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 00:35:56,340	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:35:57,354	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:36:00,625	[INFO]	191	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:36:01,609	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:36:01,610	[INFO]	193	SUCCESS	+2.0	
2020-12-19 00:36:01,611	[DEBUG]	
2020-12-19 00:36:01,612	[INFO]	194	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:36:02,592	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:36:03,598	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:36:03,599	[INFO]	197	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:36:04,591	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:36:05,586	[INFO]	199	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:36:06,553	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:36:09,906	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:36:09,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:36:09,908	[INFO]	202	SUCCESS	+2.0	
2020-12-19 00:36:09,908	[DEBUG]	
2020-12-19 00:36:09,909	[INFO]	203	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:36:10,808	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:36:14,248	[INFO]	205	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:36:14,249	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:36:17,518	[INFO]	206	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:36:17,519	[INFO]	207	SUCCESS	+2.0	
2020-12-19 00:36:17,519	[DEBUG]	
2020-12-19 00:36:20,725	[INFO]	208	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:36:20,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:36:20,729	[INFO]	209	SUCCESS	+2.0	
2020-12-19 00:36:20,729	[DEBUG]	
2020-12-19 00:36:20,731	[INFO]	210	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:36:21,719	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:36:22,730	[INFO]	212	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:36:23,750	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:36:27,098	[INFO]	214	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:36:27,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:36:27,101	[INFO]	215	SUCCESS	+2.0	
2020-12-19 00:36:27,101	[DEBUG]	
2020-12-19 00:36:28,110	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:36:29,084	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:36:32,414	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:36:32,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:36:32,415	[INFO]	219	SUCCESS	+2.0	
2020-12-19 00:36:32,416	[DEBUG]	
2020-12-19 00:36:35,693	[INFO]	220	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:36:35,695	[INFO]	221	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:36:36,689	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:36:40,063	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:36:40,064	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 00:36:40,065	[INFO]	224	SUCCESS	+2.0	
2020-12-19 00:36:40,065	[DEBUG]	
2020-12-19 00:36:43,342	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:36:43,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 00:36:46,625	[INFO]	226	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:36:46,626	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:36:49,850	[INFO]	227	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:36:49,851	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:36:49,852	[INFO]	228	SUCCESS	+2.0	
2020-12-19 00:36:49,852	[DEBUG]	
2020-12-19 00:36:50,842	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:36:51,835	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:36:55,148	[INFO]	231	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:36:56,138	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:36:59,416	[INFO]	233	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:36:59,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:36:59,418	[INFO]	234	SUCCESS	+2.0	
2020-12-19 00:36:59,418	[DEBUG]	
2020-12-19 00:37:00,403	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:37:03,694	[INFO]	236	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:37:03,695	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:37:03,696	[INFO]	237	SUCCESS	+2.0	
2020-12-19 00:37:03,696	[DEBUG]	
2020-12-19 00:37:03,697	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:37:03,698	[INFO]	239	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:37:04,654	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:37:04,656	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:37:05,657	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:37:06,632	[INFO]	243	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:37:09,903	[INFO]	244	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:37:09,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:37:10,891	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:37:10,894	[INFO]	246	SUCCESS	+2.0	
2020-12-19 00:37:10,896	[DEBUG]	
2020-12-19 00:37:11,955	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:37:12,913	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:37:12,914	[INFO]	249	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:37:12,915	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 00:37:12,916	[INFO]	250	SUCCESS	+2.0	
2020-12-19 00:37:12,916	[DEBUG]	
2020-12-19 00:37:13,886	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:37:14,937	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:37:15,875	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:37:15,881	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:37:19,144	[INFO]	255	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:37:19,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:37:20,137	[INFO]	256	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:37:23,465	[INFO]	257	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:37:23,466	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,29 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 20,42 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:37:24,465	[INFO]	258	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:37:24,466	[INFO]	259	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:37:24,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:37:24,468	[INFO]	260	SUCCESS	+2.0	
2020-12-19 00:37:24,468	[DEBUG]	
2020-12-19 00:37:25,461	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:37:28,827	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:37:28,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 00:37:28,829	[INFO]	263	SUCCESS	+2.0	
2020-12-19 00:37:28,830	[DEBUG]	
2020-12-19 00:37:29,794	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:37:30,804	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:37:31,810	[INFO]	266	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:37:32,822	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:37:36,177	[INFO]	268	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:37:51,231	[INFO]	269	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:37:54,233	[INFO]	270	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:37:55,140	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:37:55,144	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:37:55,147	[INFO]	273	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:37:56,113	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:37:57,025	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:37:57,027	[INFO]	276	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:37:57,944	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:37:57,945	[INFO]	278	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:37:58,934	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:37:59,921	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:38:00,936	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:38:04,433	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:38:04,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         unvisitedNodes.put(startnode, 0);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 00:38:04,436	[INFO]	283	SUCCESS	+2.0	
2020-12-19 00:38:04,436	[DEBUG]	
2020-12-19 00:38:05,414	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:38:06,398	[INFO]	285	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:38:06,400	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:38:09,735	[INFO]	287	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:38:09,738	[INFO]	288	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:38:09,739	[DEBUG]	
2020-12-19 00:38:09,741	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:38:09,742	[INFO]	290	SUCCESS	+2.0	
2020-12-19 00:38:09,743	[DEBUG]	
2020-12-19 00:38:09,745	[INFO]	291	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:38:13,163	[INFO]	292	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:38:13,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 00:38:13,165	[INFO]	293	SUCCESS	+2.0	
2020-12-19 00:38:13,166	[DEBUG]	
2020-12-19 00:38:14,103	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:38:15,119	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:38:18,346	[INFO]	296	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:38:18,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:38:18,348	[INFO]	297	SUCCESS	+2.0	
2020-12-19 00:38:18,348	[DEBUG]	
2020-12-19 00:38:33,423	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:38:33,425	[INFO]	299	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:38:36,423	[INFO]	300	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:38:36,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:38:39,416	[INFO]	301	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:38:40,429	[INFO]	302	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:38:40,431	[INFO]	303	SUCCESS	+2.0	
2020-12-19 00:38:40,432	[DEBUG]	
2020-12-19 00:38:41,435	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:38:42,470	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:38:45,751	[INFO]	306	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:38:45,753	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:38:46,739	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:38:46,740	[INFO]	308	SUCCESS	+2.0	
2020-12-19 00:38:46,741	[DEBUG]	
2020-12-19 00:38:47,750	[INFO]	309	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:38:47,754	[INFO]	310	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:38:48,774	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:38:49,834	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:38:53,181	[INFO]	313	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:38:56,423	[INFO]	314	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:38:56,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:38:56,424	[INFO]	315	SUCCESS	+2.0	
2020-12-19 00:38:56,425	[DEBUG]	
2020-12-19 00:38:59,664	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:38:59,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:39:00,672	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:39:00,673	[INFO]	318	SUCCESS	+2.0	
2020-12-19 00:39:00,673	[DEBUG]	
2020-12-19 00:39:01,687	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:39:02,720	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:39:03,720	[INFO]	321	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:39:07,020	[INFO]	322	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:39:07,021	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 00:39:08,003	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:39:08,007	[INFO]	324	SUCCESS	+2.0	
2020-12-19 00:39:08,008	[DEBUG]	
2020-12-19 00:39:11,268	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:39:11,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 00:39:11,271	[INFO]	326	SUCCESS	+2.0	
2020-12-19 00:39:11,271	[DEBUG]	
2020-12-19 00:39:14,558	[INFO]	327	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:39:14,559	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:39:14,560	[INFO]	328	SUCCESS	+2.0	
2020-12-19 00:39:14,561	[DEBUG]	
2020-12-19 00:39:15,522	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:39:16,525	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:39:17,535	[INFO]	331	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:39:18,578	[INFO]	332	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:39:33,670	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:39:33,672	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:39:36,719	[INFO]	335	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:39:39,815	[INFO]	336	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:39:39,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:39:42,867	[INFO]	337	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:39:42,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:39:43,884	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:39:47,302	[INFO]	339	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:39:48,259	[INFO]	340	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:39:48,260	[INFO]	341	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:39:48,261	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:39:48,261	[INFO]	342	SUCCESS	+2.0	
2020-12-19 00:39:48,262	[DEBUG]	
2020-12-19 00:39:51,512	[INFO]	343	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:39:51,513	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:39:51,514	[INFO]	344	SUCCESS	+2.0	
2020-12-19 00:39:51,514	[DEBUG]	
2020-12-19 00:39:52,482	[INFO]	345	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:39:53,474	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:39:54,474	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:39:55,447	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:39:56,466	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:39:57,467	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:39:58,472	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:39:58,474	[INFO]	352	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:39:59,446	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:40:02,806	[INFO]	354	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:40:03,800	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:40:04,800	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:40:05,816	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:40:05,820	[INFO]	358	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:40:05,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:40:05,824	[INFO]	359	SUCCESS	+2.0	
2020-12-19 00:40:05,825	[DEBUG]	
2020-12-19 00:40:09,040	[INFO]	360	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:40:09,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:40:09,041	[INFO]	361	SUCCESS	+2.0	
2020-12-19 00:40:09,042	[DEBUG]	
2020-12-19 00:40:10,054	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:40:13,380	[INFO]	363	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:40:14,371	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:40:17,544	[INFO]	365	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:40:20,820	[INFO]	366	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:40:20,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:40:21,771	[INFO]	367	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:40:21,772	[INFO]	368	SUCCESS	+2.0	
2020-12-19 00:40:21,773	[DEBUG]	
2020-12-19 00:40:22,792	[INFO]	369	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:40:22,795	[INFO]	370	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:40:22,798	[INFO]	371	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:40:23,804	[INFO]	372	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:40:27,133	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:40:27,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 00:40:28,112	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:40:28,114	[INFO]	375	SUCCESS	+2.0	
2020-12-19 00:40:28,114	[DEBUG]	
2020-12-19 00:40:29,090	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:40:29,092	[INFO]	377	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:40:30,089	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:40:31,013	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:40:32,043	[INFO]	380	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:40:32,047	[INFO]	381	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:40:33,134	[INFO]	382	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:40:34,125	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:40:34,127	[INFO]	384	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:40:34,127	[DEBUG]	
2020-12-19 00:40:34,128	[INFO]	385	SUCCESS	+2.0	
2020-12-19 00:40:34,128	[DEBUG]	
2020-12-19 00:40:38,018	[INFO]	386	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:40:39,202	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:40:40,369	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:40:41,402	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:40:42,424	[INFO]	390	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:40:42,427	[INFO]	391	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:40:42,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:40:43,565	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:40:43,566	[INFO]	393	SUCCESS	+2.0	
2020-12-19 00:40:43,567	[DEBUG]	
2020-12-19 00:40:46,950	[INFO]	394	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:40:47,890	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:40:51,947	[INFO]	396	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:40:51,948	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:40:51,949	[INFO]	397	SUCCESS	+2.0	
2020-12-19 00:40:51,949	[DEBUG]	
2020-12-19 00:40:51,950	[INFO]	398	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:40:51,950	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:40:51,951	[INFO]	399	SUCCESS	+2.0	
2020-12-19 00:40:51,951	[DEBUG]	
2020-12-19 00:40:51,952	[INFO]	400	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:40:51,953	[DEBUG]	
2020-12-19 00:40:53,147	[INFO]	401	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:40:53,148	[INFO]	402	SUCCESS	+2.0	
2020-12-19 00:40:53,149	[DEBUG]	
2020-12-19 00:40:54,310	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:40:54,312	[INFO]	404	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:40:55,364	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:40:56,707	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:40:57,828	[INFO]	407	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:41:01,641	[INFO]	408	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:41:01,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 00:41:01,644	[INFO]	409	SUCCESS	+2.0	
2020-12-19 00:41:01,644	[DEBUG]	
2020-12-19 00:41:02,716	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:41:06,124	[INFO]	411	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:41:07,125	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:41:10,444	[INFO]	413	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:41:10,446	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 00:41:11,391	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:41:11,393	[INFO]	415	SUCCESS	+2.0	
2020-12-19 00:41:11,393	[DEBUG]	
2020-12-19 00:41:14,609	[INFO]	416	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:41:14,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:41:14,610	[INFO]	417	SUCCESS	+2.0	
2020-12-19 00:41:14,611	[DEBUG]	
2020-12-19 00:41:14,613	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:41:17,915	[INFO]	419	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:41:17,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:41:17,917	[INFO]	420	SUCCESS	+2.0	
2020-12-19 00:41:17,917	[DEBUG]	
2020-12-19 00:41:18,894	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:41:22,221	[INFO]	422	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:41:22,221	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:41:25,499	[INFO]	423	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:41:25,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:41:26,500	[INFO]	424	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:41:26,501	[INFO]	425	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:41:26,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:41:29,900	[INFO]	426	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:41:33,145	[INFO]	427	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:41:33,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:41:34,067	[INFO]	428	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:41:37,443	[INFO]	429	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:41:37,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:41:37,446	[INFO]	430	SUCCESS	+2.0	
2020-12-19 00:41:37,447	[DEBUG]	
2020-12-19 00:41:40,803	[INFO]	431	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:41:40,804	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:41:41,796	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:41:41,800	[INFO]	433	SUCCESS	+2.0	
2020-12-19 00:41:41,801	[DEBUG]	
2020-12-19 00:41:42,830	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:41:43,904	[INFO]	435	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:41:44,916	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:41:45,935	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:41:47,035	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:41:48,046	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:41:49,026	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:41:50,051	[INFO]	441	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:41:50,988	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:41:54,224	[INFO]	443	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:41:54,226	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:41:54,227	[INFO]	444	SUCCESS	+2.0	
2020-12-19 00:41:54,227	[DEBUG]	
2020-12-19 00:41:55,207	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:41:55,209	[INFO]	446	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:41:55,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:41:56,224	[INFO]	447	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:41:59,555	[INFO]	448	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:41:59,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:42:00,545	[INFO]	449	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:42:01,540	[INFO]	450	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:42:04,812	[INFO]	451	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:42:04,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
!                 
                  minNode = node;
              }
          }

2020-12-19 00:42:05,787	[INFO]	452	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:42:05,789	[INFO]	453	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:42:05,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:42:05,791	[INFO]	454	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:42:05,791	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:42:06,789	[INFO]	455	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:42:07,778	[INFO]	456	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:42:07,779	[INFO]	457	SUCCESS	+2.0	
2020-12-19 00:42:07,779	[DEBUG]	
2020-12-19 00:42:08,795	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:42:09,760	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:42:13,057	[INFO]	460	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:42:13,058	[INFO]	461	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:42:13,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:42:13,059	[INFO]	462	SUCCESS	+2.0	
2020-12-19 00:42:13,059	[DEBUG]	
2020-12-19 00:42:28,121	[INFO]	463	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:42:29,019	[INFO]	464	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:42:29,933	[INFO]	465	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:42:33,023	[INFO]	466	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:42:33,896	[INFO]	467	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:42:37,017	[INFO]	468	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:42:37,997	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:42:38,985	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:42:42,307	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:42:42,308	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:42:45,733	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:42:45,734	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:42:48,974	[INFO]	473	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:42:48,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 int minDistance = Integer.MAX_VALUE;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 00:42:49,964	[INFO]	474	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:42:49,966	[INFO]	475	SUCCESS	+2.0	
2020-12-19 00:42:49,966	[DEBUG]	
2020-12-19 00:42:53,206	[INFO]	476	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:42:53,207	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:42:54,178	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:42:54,179	[INFO]	478	SUCCESS	+2.0	
2020-12-19 00:42:54,179	[DEBUG]	
2020-12-19 00:42:55,162	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:42:58,359	[INFO]	480	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:42:58,360	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:42:58,361	[INFO]	481	SUCCESS	+2.0	
2020-12-19 00:42:58,361	[DEBUG]	
2020-12-19 00:43:01,653	[INFO]	482	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:43:01,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:43:01,655	[INFO]	483	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:43:01,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:43:01,656	[INFO]	484	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:43:01,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:43:01,657	[INFO]	485	SUCCESS	+2.0	
2020-12-19 00:43:01,658	[DEBUG]	
2020-12-19 00:43:01,658	[INFO]	486	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:43:01,659	[DEBUG]	
2020-12-19 00:43:01,659	[INFO]	487	SUCCESS	+2.0	
2020-12-19 00:43:01,660	[DEBUG]	
2020-12-19 00:43:02,660	[INFO]	488	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:43:05,950	[INFO]	489	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:43:05,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:43:05,953	[INFO]	490	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:43:05,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:43:09,213	[INFO]	491	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:43:09,215	[INFO]	492	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:43:09,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:43:12,516	[INFO]	493	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:43:12,518	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:43:13,531	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:43:16,760	[INFO]	495	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:43:20,140	[INFO]	496	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:43:20,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:43:20,142	[INFO]	497	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:43:20,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:43:20,144	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:43:20,144	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:43:20,145	[INFO]	499	SUCCESS	+2.0	
2020-12-19 00:43:20,145	[DEBUG]	
2020-12-19 00:43:23,416	[INFO]	500	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:43:23,416	[INFO]	==== END ====
2020-12-19 00:43:23,416	[INFO]	Reason: step budget
2020-12-19 00:43:23,417	[INFO]	
2020-12-19 00:43:23,417	[INFO]	========== EPOCH 4 ==========
2020-12-19 00:43:23,418	[INFO]	==== WARMUP ====
2020-12-19 00:43:26,633	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:43:26,634	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:43:29,930	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:43:29,930	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:43:33,155	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:43:33,155	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:43:36,449	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 00:43:36,449	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:43:36,449	[INFO]	==== START ====
2020-12-19 00:43:37,447	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:43:38,478	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:43:39,473	[INFO]	3	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:43:42,737	[INFO]	4	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:43:42,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-19 00:43:43,708	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:43:43,710	[INFO]	6	SUCCESS	+2.0	
2020-12-19 00:43:43,711	[DEBUG]	
2020-12-19 00:43:44,748	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:43:44,751	[INFO]	8	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:43:44,752	[DEBUG]	
2020-12-19 00:43:48,032	[INFO]	9	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:43:48,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:43:48,965	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:43:48,967	[INFO]	11	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:43:48,967	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:43:48,968	[INFO]	12	SUCCESS	+2.0	
2020-12-19 00:43:48,968	[DEBUG]	
2020-12-19 00:43:49,942	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:43:53,194	[INFO]	14	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:43:54,175	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:43:57,470	[INFO]	16	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:43:57,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:43:57,471	[INFO]	17	SUCCESS	+2.0	
2020-12-19 00:43:57,472	[DEBUG]	
2020-12-19 00:43:57,473	[INFO]	18	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:43:57,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:43:58,450	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:43:58,451	[INFO]	20	SUCCESS	+2.0	
2020-12-19 00:43:58,451	[DEBUG]	
2020-12-19 00:43:59,436	[INFO]	21	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:44:00,414	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:44:01,420	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:44:04,692	[INFO]	24	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:44:04,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:44:05,669	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:44:09,039	[INFO]	26	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:44:09,040	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:44:12,382	[INFO]	27	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:44:12,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,34 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:44:15,676	[INFO]	28	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:44:15,677	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:44:16,665	[INFO]	29	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:44:16,667	[INFO]	30	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:44:16,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:44:17,650	[INFO]	31	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:44:18,667	[INFO]	32	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:44:19,702	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:44:19,703	[INFO]	34	SUCCESS	+2.0	
2020-12-19 00:44:19,704	[DEBUG]	
2020-12-19 00:44:20,656	[INFO]	35	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:44:23,952	[INFO]	36	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:44:24,945	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:44:25,952	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:44:26,952	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:44:27,978	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:44:29,011	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:44:29,999	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:44:30,001	[INFO]	43	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:44:30,002	[DEBUG]	
2020-12-19 00:44:30,002	[INFO]	44	SUCCESS	+2.0	
2020-12-19 00:44:30,003	[DEBUG]	
2020-12-19 00:44:33,238	[INFO]	45	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:44:34,221	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:44:34,222	[INFO]	47	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:44:34,223	[DEBUG]	
2020-12-19 00:44:34,223	[INFO]	48	SUCCESS	+2.0	
2020-12-19 00:44:34,224	[DEBUG]	
2020-12-19 00:44:37,479	[INFO]	49	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:44:38,463	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:44:39,497	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:44:40,540	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:44:43,898	[INFO]	53	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:44:43,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:44:43,900	[INFO]	54	SUCCESS	+2.0	
2020-12-19 00:44:43,900	[DEBUG]	
2020-12-19 00:44:44,868	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:44:45,802	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:44:46,782	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:44:50,159	[INFO]	58	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:44:51,119	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:45:06,188	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:45:09,145	[INFO]	61	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:45:10,032	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:45:10,973	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:11,930	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:45:15,186	[INFO]	65	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:45:15,188	[INFO]	66	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:45:15,188	[DEBUG]	
2020-12-19 00:45:18,528	[INFO]	67	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:45:18,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:18,530	[INFO]	68	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:45:18,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:19,469	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:19,471	[INFO]	70	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:45:19,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:22,682	[INFO]	71	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:45:23,631	[INFO]	72	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:45:26,825	[INFO]	73	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:45:26,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:27,779	[INFO]	74	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:45:27,781	[INFO]	75	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:45:27,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:28,712	[INFO]	76	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:45:29,728	[INFO]	77	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:45:29,730	[INFO]	78	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:29,730	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:29,732	[INFO]	79	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:29,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:30,706	[INFO]	80	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:30,709	[INFO]	81	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:30,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:30,712	[INFO]	82	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:45:30,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:31,693	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:45:32,863	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:45:32,867	[INFO]	85	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:45:32,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:32,871	[INFO]	86	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:45:32,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:33,906	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:45:33,911	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:45:33,914	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:45:37,313	[INFO]	89	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:45:37,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 33,39 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:40,608	[INFO]	90	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:45:40,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 33,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:44,115	[INFO]	91	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:45:44,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:45,301	[INFO]	92	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:45:45,303	[INFO]	93	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:45:45,303	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:46,347	[INFO]	94	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:45:47,376	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:45:48,327	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:45:51,499	[INFO]	97	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:45:51,501	[INFO]	98	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:45:51,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:51,505	[INFO]	99	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:45:51,506	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:54,931	[INFO]	100	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:45:58,313	[INFO]	101	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:45:58,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:45:59,298	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:46:02,585	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:46:02,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:46:02,588	[INFO]	104	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:46:02,589	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:46:03,586	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:46:03,588	[INFO]	106	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:46:03,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:46:03,589	[INFO]	107	SUCCESS	+2.0	
2020-12-19 00:46:03,589	[DEBUG]	
2020-12-19 00:46:06,902	[INFO]	108	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:46:06,903	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-19 00:46:06,904	[INFO]	109	SUCCESS	+2.0	
2020-12-19 00:46:06,905	[DEBUG]	
2020-12-19 00:46:07,881	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:46:08,918	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:46:12,331	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:46:12,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 00:46:13,420	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:46:13,422	[INFO]	114	SUCCESS	+2.0	
2020-12-19 00:46:13,422	[DEBUG]	
2020-12-19 00:46:14,578	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:46:18,066	[INFO]	116	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:46:19,059	[INFO]	117	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:46:22,442	[INFO]	118	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:46:22,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:46:23,468	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:46:24,474	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:46:25,633	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:46:25,634	[INFO]	122	SUCCESS	+2.0	
2020-12-19 00:46:25,635	[DEBUG]	
2020-12-19 00:46:25,636	[INFO]	123	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:46:26,942	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:46:30,993	[INFO]	125	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:46:30,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:46:30,996	[INFO]	126	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:46:30,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:46:30,998	[INFO]	127	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:46:30,999	[DEBUG]	
2020-12-19 00:46:34,248	[INFO]	128	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:46:34,250	[INFO]	129	SUCCESS	+2.0	
2020-12-19 00:46:34,250	[DEBUG]	
2020-12-19 00:46:35,270	[INFO]	130	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:46:36,326	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:46:37,332	[INFO]	132	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:46:38,374	[INFO]	133	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:46:41,692	[INFO]	134	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:46:42,699	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:46:42,702	[INFO]	136	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:46:43,756	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:46:44,787	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:46:45,759	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:46:46,803	[INFO]	140	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:46:50,118	[INFO]	141	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:46:50,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:46:50,119	[INFO]	142	SUCCESS	+2.0	
2020-12-19 00:46:50,120	[DEBUG]	
2020-12-19 00:46:50,121	[INFO]	143	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:46:53,487	[INFO]	144	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:46:53,489	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:46:56,742	[INFO]	145	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:46:57,707	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:46:58,729	[INFO]	147	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:46:59,726	[INFO]	148	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:47:00,699	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:47:01,715	[INFO]	150	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:47:02,727	[INFO]	151	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:47:02,728	[INFO]	152	SUCCESS	+2.0	
2020-12-19 00:47:02,728	[DEBUG]	
2020-12-19 00:47:02,729	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:47:03,711	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:47:04,745	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:47:05,757	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:47:06,783	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:47:07,820	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:47:11,120	[INFO]	159	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:47:11,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:47:12,104	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:47:13,103	[INFO]	161	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:47:13,106	[INFO]	162	SUCCESS	+2.0	
2020-12-19 00:47:13,106	[DEBUG]	
2020-12-19 00:47:16,512	[INFO]	163	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:47:16,513	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:47:16,514	[INFO]	164	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:47:16,515	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:47:19,788	[INFO]	165	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:47:19,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 28,33 ****
--- 28,34 ----
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
+                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:47:19,792	[INFO]	166	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:47:19,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:47:19,794	[INFO]	167	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:47:19,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:47:19,796	[INFO]	168	SUCCESS	+2.0	
2020-12-19 00:47:19,797	[DEBUG]	
2020-12-19 00:47:34,857	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:47:35,769	[INFO]	170	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:47:38,963	[INFO]	171	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:47:41,887	[INFO]	172	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:47:41,888	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:47:41,889	[INFO]	173	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:47:41,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:47:42,887	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:47:42,888	[INFO]	175	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:47:42,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:47:42,890	[INFO]	176	SUCCESS	+2.0	
2020-12-19 00:47:42,890	[DEBUG]	
2020-12-19 00:47:46,440	[INFO]	177	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:47:46,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:47:46,441	[INFO]	178	SUCCESS	+2.0	
2020-12-19 00:47:46,442	[DEBUG]	
2020-12-19 00:47:47,464	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:47:48,518	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:47:51,933	[INFO]	181	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:47:55,386	[INFO]	182	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:47:55,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:47:56,384	[INFO]	183	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:47:56,385	[INFO]	184	SUCCESS	+2.0	
2020-12-19 00:47:56,386	[DEBUG]	
2020-12-19 00:47:57,392	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:47:58,401	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:47:59,442	[INFO]	187	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:48:02,780	[INFO]	188	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:48:03,810	[INFO]	189	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:48:07,123	[INFO]	190	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:48:07,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:48:10,470	[INFO]	191	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:48:10,472	[INFO]	192	SUCCESS	+2.0	
2020-12-19 00:48:10,472	[DEBUG]	
2020-12-19 00:48:11,416	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:48:11,417	[INFO]	194	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:48:11,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:48:11,418	[INFO]	195	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:48:11,419	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:48:11,420	[INFO]	196	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:48:11,420	[DEBUG]	
2020-12-19 00:48:11,421	[INFO]	197	SUCCESS	+2.0	
2020-12-19 00:48:11,421	[DEBUG]	
2020-12-19 00:48:11,422	[INFO]	198	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:48:11,422	[DEBUG]	
2020-12-19 00:48:12,510	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:48:13,509	[INFO]	200	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:48:13,511	[INFO]	201	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:48:13,511	[DEBUG]	
2020-12-19 00:48:13,512	[INFO]	202	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:48:13,512	[DEBUG]	
2020-12-19 00:48:14,545	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:48:15,553	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:48:16,542	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:48:19,851	[INFO]	206	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:48:20,810	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:48:20,811	[INFO]	208	SUCCESS	+2.0	
2020-12-19 00:48:20,811	[DEBUG]	
2020-12-19 00:48:20,812	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:48:21,795	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:48:22,829	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:48:23,830	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:48:23,832	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:48:24,879	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:48:24,880	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:48:28,176	[INFO]	216	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:48:28,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:48:28,179	[INFO]	217	SUCCESS	+2.0	
2020-12-19 00:48:28,179	[DEBUG]	
2020-12-19 00:48:28,180	[INFO]	218	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:48:29,177	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:48:30,174	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:48:33,463	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:48:33,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 00:48:33,464	[INFO]	222	SUCCESS	+2.0	
2020-12-19 00:48:33,465	[DEBUG]	
2020-12-19 00:48:34,496	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:48:35,506	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:48:38,817	[INFO]	225	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:48:38,818	[INFO]	226	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:48:39,810	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:48:43,113	[INFO]	228	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:48:43,114	[INFO]	229	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:48:44,104	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:48:45,125	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:48:46,161	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:48:47,160	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:48:48,147	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:48:49,169	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:48:49,170	[INFO]	236	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:48:52,550	[INFO]	237	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:48:52,552	[INFO]	238	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:48:53,493	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 00:48:56,779	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:48:56,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 00:48:57,820	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:48:58,832	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:48:59,811	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:48:59,812	[INFO]	244	SUCCESS	+2.0	
2020-12-19 00:48:59,812	[DEBUG]	
2020-12-19 00:49:00,810	[INFO]	245	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:49:01,834	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:49:01,836	[INFO]	247	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:49:01,837	[DEBUG]	
2020-12-19 00:49:02,828	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:49:03,832	[INFO]	249	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:49:04,819	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:49:04,821	[INFO]	251	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:49:05,832	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:49:05,835	[INFO]	253	SUCCESS	+2.0	
2020-12-19 00:49:05,835	[DEBUG]	
2020-12-19 00:49:06,848	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:49:07,820	[INFO]	255	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:49:08,827	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:49:12,127	[INFO]	257	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:49:13,106	[INFO]	258	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:49:14,111	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:49:15,098	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:49:18,334	[INFO]	261	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:49:19,289	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:49:22,598	[INFO]	263	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:49:22,599	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:49:23,569	[INFO]	264	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:49:23,572	[INFO]	265	SUCCESS	+2.0	
2020-12-19 00:49:23,573	[DEBUG]	
2020-12-19 00:49:23,575	[INFO]	266	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:49:24,577	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:49:27,961	[INFO]	268	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:49:27,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 00:49:31,414	[INFO]	269	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:49:31,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,53 ****
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 44,54 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:49:31,421	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:49:31,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 00:49:32,480	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:49:35,980	[INFO]	272	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:49:37,037	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:49:37,038	[INFO]	274	SUCCESS	+2.0	
2020-12-19 00:49:37,038	[DEBUG]	
2020-12-19 00:49:38,040	[INFO]	275	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:49:41,360	[INFO]	276	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:49:42,328	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:49:43,384	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:49:43,387	[INFO]	279	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:49:43,387	[DEBUG]	
2020-12-19 00:49:44,400	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:49:47,719	[INFO]	281	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:49:47,720	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:49:47,721	[INFO]	282	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:49:47,721	[DEBUG]	
2020-12-19 00:49:48,700	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:49:49,689	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:49:50,692	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:49:51,708	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 00:49:52,727	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:49:52,729	[INFO]	288	SUCCESS	+2.0	
2020-12-19 00:49:52,730	[DEBUG]	
2020-12-19 00:49:53,741	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:49:57,162	[INFO]	290	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:49:58,110	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:50:01,449	[INFO]	292	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:50:02,441	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:50:02,443	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:50:06,318	[INFO]	295	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:50:06,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:50:07,621	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:50:07,623	[INFO]	297	SUCCESS	+2.0	
2020-12-19 00:50:07,623	[DEBUG]	
2020-12-19 00:50:08,952	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:50:10,315	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:50:14,679	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:50:14,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:50:16,031	[INFO]	301	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:50:20,519	[INFO]	302	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:50:20,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:50:20,521	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:50:20,522	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:50:20,523	[INFO]	304	SUCCESS	+2.0	
2020-12-19 00:50:20,523	[DEBUG]	
2020-12-19 00:50:21,905	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:50:26,296	[INFO]	306	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:50:26,297	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:50:30,607	[INFO]	307	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:50:30,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:50:31,933	[INFO]	308	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:50:31,934	[INFO]	309	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:50:31,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:50:31,936	[INFO]	310	SUCCESS	+2.0	
2020-12-19 00:50:31,936	[DEBUG]	
2020-12-19 00:50:36,004	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:50:36,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 00:50:37,386	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:50:41,108	[INFO]	313	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:50:42,058	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:50:43,056	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:50:44,079	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:50:45,091	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:50:46,124	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:50:49,492	[INFO]	319	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:50:49,493	[INFO]	320	SUCCESS	+2.0	
2020-12-19 00:50:49,493	[DEBUG]	
2020-12-19 00:50:49,494	[INFO]	321	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:50:49,494	[DEBUG]	
2020-12-19 00:50:50,482	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:50:51,476	[INFO]	323	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:50:51,478	[INFO]	324	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:50:51,479	[INFO]	325	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:50:52,458	[INFO]	326	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:50:52,460	[INFO]	327	SUCCESS	+2.0	
2020-12-19 00:50:52,460	[DEBUG]	
2020-12-19 00:50:55,825	[INFO]	328	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:50:55,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 00:50:55,827	[INFO]	329	SUCCESS	+2.0	
2020-12-19 00:50:55,827	[DEBUG]	
2020-12-19 00:50:56,758	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:50:59,998	[INFO]	331	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:50:59,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:51:03,220	[INFO]	332	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:51:03,221	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:51:04,156	[INFO]	333	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:51:07,435	[INFO]	334	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:51:07,436	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:51:07,437	[INFO]	335	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:51:07,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:51:07,438	[INFO]	336	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:51:07,438	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:51:08,329	[INFO]	337	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:51:09,320	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:51:12,648	[INFO]	339	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:51:15,923	[INFO]	340	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:51:15,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 00:51:15,925	[INFO]	341	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:51:15,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:51:15,926	[INFO]	342	SUCCESS	+2.0	
2020-12-19 00:51:15,926	[DEBUG]	
2020-12-19 00:51:19,184	[INFO]	343	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:51:19,185	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:51:20,127	[INFO]	344	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:51:20,129	[INFO]	345	SUCCESS	+2.0	
2020-12-19 00:51:20,129	[DEBUG]	
2020-12-19 00:51:21,137	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:51:22,146	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:51:23,141	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:51:26,446	[INFO]	349	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:51:29,741	[INFO]	350	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:51:29,742	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:51:29,743	[INFO]	351	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:51:29,743	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:51:30,731	[INFO]	352	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:51:31,733	[INFO]	353	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:51:32,766	[INFO]	354	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:51:33,812	[INFO]	355	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:51:33,815	[INFO]	356	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:51:33,816	[DEBUG]	
2020-12-19 00:51:33,817	[INFO]	357	SUCCESS	+2.0	
2020-12-19 00:51:33,818	[DEBUG]	
2020-12-19 00:51:34,824	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:51:35,776	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:51:36,783	[INFO]	360	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:51:37,797	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:51:38,784	[INFO]	362	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:51:39,784	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:51:40,824	[INFO]	364	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:51:41,848	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:51:42,922	[INFO]	366	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:51:46,489	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:51:46,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 00:51:49,772	[INFO]	368	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:51:49,773	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 00:51:49,775	[INFO]	369	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:51:49,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 00:51:49,776	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:51:49,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 00:51:50,747	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:51:51,737	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:51:51,738	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:51:51,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 00:51:52,767	[INFO]	374	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:51:53,810	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:51:53,811	[INFO]	376	SUCCESS	+2.0	
2020-12-19 00:51:53,811	[DEBUG]	
2020-12-19 00:51:53,812	[INFO]	377	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:51:53,812	[DEBUG]	
2020-12-19 00:51:54,822	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:51:54,823	[INFO]	379	SUCCESS	+2.0	
2020-12-19 00:51:54,824	[DEBUG]	
2020-12-19 00:51:58,125	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:51:58,127	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 00:51:59,105	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:51:59,108	[INFO]	382	SUCCESS	+2.0	
2020-12-19 00:51:59,108	[DEBUG]	
2020-12-19 00:52:00,113	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:52:03,314	[INFO]	384	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:52:03,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:52:04,228	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:52:04,229	[INFO]	386	SUCCESS	+2.0	
2020-12-19 00:52:04,230	[DEBUG]	
2020-12-19 00:52:05,210	[INFO]	387	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:52:06,216	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:52:07,234	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:52:08,248	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:52:09,278	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:52:10,315	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:52:10,318	[INFO]	393	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:52:10,319	[DEBUG]	
2020-12-19 00:52:10,321	[INFO]	394	SUCCESS	+2.0	
2020-12-19 00:52:10,321	[DEBUG]	
2020-12-19 00:52:11,388	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:52:11,394	[INFO]	396	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:52:11,395	[DEBUG]	
2020-12-19 00:52:11,397	[INFO]	397	SUCCESS	+2.0	
2020-12-19 00:52:11,398	[DEBUG]	
2020-12-19 00:52:12,359	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:52:13,371	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:52:14,389	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:52:29,453	[INFO]	401	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:52:30,370	[INFO]	402	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:52:31,263	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:52:32,172	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:52:35,168	[INFO]	405	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:52:35,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:52:36,123	[INFO]	406	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:52:37,106	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:52:37,107	[INFO]	408	SUCCESS	+2.0	
2020-12-19 00:52:37,107	[DEBUG]	
2020-12-19 00:52:40,405	[INFO]	409	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:52:40,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:52:43,756	[INFO]	410	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:52:43,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:52:43,758	[INFO]	411	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:52:43,758	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:52:43,759	[INFO]	412	SUCCESS	+2.0	
2020-12-19 00:52:43,759	[DEBUG]	
2020-12-19 00:52:46,973	[INFO]	413	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:52:50,221	[INFO]	414	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:52:50,222	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 00:52:50,223	[INFO]	415	SUCCESS	+2.0	
2020-12-19 00:52:50,223	[DEBUG]	
2020-12-19 00:52:51,183	[INFO]	416	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:52:52,187	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:52:55,537	[INFO]	418	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:52:55,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:52:55,539	[INFO]	419	SUCCESS	+2.0	
2020-12-19 00:52:55,540	[DEBUG]	
2020-12-19 00:52:56,515	[INFO]	420	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:52:57,526	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:52:58,545	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:52:59,579	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:52:59,581	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:52:59,581	[DEBUG]	
2020-12-19 00:52:59,582	[INFO]	425	SUCCESS	+2.0	
2020-12-19 00:52:59,582	[DEBUG]	
2020-12-19 00:52:59,583	[INFO]	426	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:52:59,583	[DEBUG]	
2020-12-19 00:53:00,573	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:53:03,916	[INFO]	428	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:53:03,917	[INFO]	429	SUCCESS	+2.0	
2020-12-19 00:53:03,918	[DEBUG]	
2020-12-19 00:53:07,211	[INFO]	430	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:53:07,212	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:53:08,161	[INFO]	431	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:53:08,163	[INFO]	432	SUCCESS	+2.0	
2020-12-19 00:53:08,164	[DEBUG]	
2020-12-19 00:53:09,155	[INFO]	433	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:53:12,554	[INFO]	434	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:53:15,721	[INFO]	435	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:53:15,722	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:53:19,022	[INFO]	436	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:53:19,023	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:53:19,967	[INFO]	437	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:53:20,929	[INFO]	438	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:53:24,355	[INFO]	439	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:53:24,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:53:25,272	[INFO]	440	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:53:25,273	[INFO]	441	SUCCESS	+2.0	
2020-12-19 00:53:25,273	[DEBUG]	
2020-12-19 00:53:28,584	[INFO]	442	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:53:28,584	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:53:31,908	[INFO]	443	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:53:31,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,38 ****
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 29,39 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:53:31,910	[INFO]	444	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:53:31,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:53:31,912	[INFO]	445	SUCCESS	+2.0	
2020-12-19 00:53:31,912	[DEBUG]	
2020-12-19 00:53:32,959	[INFO]	446	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:53:33,970	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:53:34,967	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:53:35,967	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:53:36,998	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:53:37,983	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:53:38,970	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:53:39,958	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:53:43,291	[INFO]	454	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:53:44,295	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:53:45,290	[INFO]	456	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:53:48,553	[INFO]	457	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:53:49,544	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:53:52,921	[INFO]	459	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:53:56,191	[INFO]	460	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:53:56,192	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:53:57,163	[INFO]	461	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:53:57,165	[INFO]	462	SUCCESS	+2.0	
2020-12-19 00:53:57,165	[DEBUG]	
2020-12-19 00:53:57,166	[INFO]	463	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:53:58,180	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:53:59,210	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:54:02,481	[INFO]	466	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:54:02,482	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 00:54:02,483	[INFO]	467	SUCCESS	+2.0	
2020-12-19 00:54:02,483	[DEBUG]	
2020-12-19 00:54:05,980	[INFO]	468	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:54:06,956	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:54:10,213	[INFO]	470	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:54:10,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:54:10,217	[INFO]	471	SUCCESS	+2.0	
2020-12-19 00:54:10,217	[DEBUG]	
2020-12-19 00:54:11,209	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:54:12,225	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:54:13,243	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 00:54:14,269	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:54:15,274	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:54:15,276	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:54:16,258	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:54:16,260	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:54:16,261	[DEBUG]	
2020-12-19 00:54:16,261	[INFO]	480	SUCCESS	+2.0	
2020-12-19 00:54:16,262	[DEBUG]	
2020-12-19 00:54:17,270	[INFO]	481	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:54:18,280	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:54:21,562	[INFO]	483	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:54:21,563	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:54:21,564	[INFO]	484	SUCCESS	+2.0	
2020-12-19 00:54:21,564	[DEBUG]	
2020-12-19 00:54:24,888	[INFO]	485	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:54:25,865	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:54:26,835	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:54:26,836	[INFO]	488	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:54:26,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:54:26,837	[INFO]	489	SUCCESS	+2.0	
2020-12-19 00:54:26,837	[DEBUG]	
2020-12-19 00:54:27,847	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 00:54:31,226	[INFO]	491	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:54:32,160	[INFO]	492	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:54:33,192	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:54:33,196	[INFO]	494	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:54:33,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:54:33,201	[INFO]	495	SUCCESS	+2.0	
2020-12-19 00:54:33,202	[DEBUG]	
2020-12-19 00:54:36,535	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 00:54:36,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 00:54:36,539	[INFO]	497	SUCCESS	+2.0	
2020-12-19 00:54:36,540	[DEBUG]	
2020-12-19 00:54:36,542	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:54:39,874	[INFO]	499	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:54:39,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:54:40,842	[INFO]	500	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:54:40,843	[INFO]	==== END ====
2020-12-19 00:54:40,843	[INFO]	Reason: step budget
2020-12-19 00:54:40,844	[INFO]	
2020-12-19 00:54:40,844	[INFO]	========== EPOCH 5 ==========
2020-12-19 00:54:40,844	[INFO]	==== WARMUP ====
2020-12-19 00:54:44,172	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:54:44,172	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:54:47,417	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:54:47,417	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:54:50,765	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 00:54:50,765	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:54:54,065	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 00:54:54,065	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 00:54:54,065	[INFO]	==== START ====
2020-12-19 00:54:55,063	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:54:56,017	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:54:59,268	[INFO]	3	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:54:59,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 00:54:59,269	[INFO]	4	SUCCESS	+2.0	
2020-12-19 00:54:59,270	[DEBUG]	
2020-12-19 00:55:00,289	[INFO]	5	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:55:01,292	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:55:02,305	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:55:03,248	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:55:04,277	[INFO]	9	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:55:07,565	[INFO]	10	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:55:07,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:55:07,567	[INFO]	11	SUCCESS	+2.0	
2020-12-19 00:55:07,567	[DEBUG]	
2020-12-19 00:55:08,551	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:55:08,552	[INFO]	13	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:55:09,571	[INFO]	14	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:55:10,606	[INFO]	15	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:55:11,615	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:55:12,638	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:55:16,029	[INFO]	18	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 00:55:16,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:55:16,030	[INFO]	19	SUCCESS	+2.0	
2020-12-19 00:55:16,031	[DEBUG]	
2020-12-19 00:55:19,255	[INFO]	20	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:55:19,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:19,258	[INFO]	21	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:55:19,258	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:20,242	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:55:20,244	[INFO]	23	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:55:20,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:23,400	[INFO]	24	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:55:23,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:24,341	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:55:25,333	[INFO]	26	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:55:25,337	[INFO]	27	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:55:25,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:26,335	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 00:55:27,249	[INFO]	29	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:55:27,251	[INFO]	30	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:27,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:28,202	[INFO]	31	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:55:28,207	[INFO]	32	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:28,208	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:29,232	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:29,233	[INFO]	34	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:29,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:29,235	[INFO]	35	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:55:29,235	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:30,232	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:55:33,538	[INFO]	37	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:55:33,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:34,483	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:55:35,527	[INFO]	39	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:55:36,666	[INFO]	40	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:55:36,670	[INFO]	41	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:55:36,671	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:37,657	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:55:37,659	[INFO]	43	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:55:37,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:37,660	[INFO]	44	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:55:37,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:38,616	[INFO]	45	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:55:39,579	[INFO]	46	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:55:39,580	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:55:40,534	[INFO]	48	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:55:40,535	[INFO]	49	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:55:40,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:40,537	[INFO]	50	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:55:40,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:55:40,538	[INFO]	51	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:40,539	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:40,540	[INFO]	52	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:55:41,495	[INFO]	53	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:55:44,756	[INFO]	54	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 00:55:45,678	[INFO]	55	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:55:45,680	[INFO]	56	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 00:55:45,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 00:55:45,681	[INFO]	57	SUCCESS	+2.0	
2020-12-19 00:55:45,681	[DEBUG]	
2020-12-19 00:55:46,698	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 00:55:47,698	[INFO]	59	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:55:51,007	[INFO]	60	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:55:52,014	[INFO]	61	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:55:55,315	[INFO]	62	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:55:55,316	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:55:55,317	[INFO]	63	SUCCESS	+2.0	
2020-12-19 00:55:55,317	[DEBUG]	
2020-12-19 00:55:56,311	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:55:57,309	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:55:58,327	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:56:01,674	[INFO]	67	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:56:02,590	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:56:03,629	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:56:04,659	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:56:05,682	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:56:06,716	[INFO]	72	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:56:09,997	[INFO]	73	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:56:10,992	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:56:14,415	[INFO]	75	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:56:14,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:56:14,417	[INFO]	76	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:56:14,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:56:14,418	[INFO]	77	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:56:14,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:56:14,419	[INFO]	78	SUCCESS	+2.0	
2020-12-19 00:56:14,419	[DEBUG]	
2020-12-19 00:56:15,409	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:56:16,395	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:56:19,747	[INFO]	81	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:56:19,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-19 00:56:19,748	[INFO]	82	SUCCESS	+2.0	
2020-12-19 00:56:19,749	[DEBUG]	
2020-12-19 00:56:20,725	[INFO]	83	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 00:56:20,726	[INFO]	84	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:56:21,719	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:56:24,987	[INFO]	86	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 00:56:28,205	[INFO]	87	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:56:29,264	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 00:56:32,568	[INFO]	89	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:56:32,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:56:32,570	[INFO]	90	SUCCESS	+2.0	
2020-12-19 00:56:32,571	[DEBUG]	
2020-12-19 00:56:35,854	[INFO]	91	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:56:35,856	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:39,244	[INFO]	92	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:56:39,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:40,249	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:56:43,633	[INFO]	94	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:56:43,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:47,030	[INFO]	95	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 00:56:47,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:50,316	[INFO]	96	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:56:50,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:53,569	[INFO]	97	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 00:56:56,885	[INFO]	98	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:56:56,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:56:57,874	[INFO]	99	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:57:01,153	[INFO]	100	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:57:01,155	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:57:04,542	[INFO]	101	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:57:04,544	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:57:07,799	[INFO]	102	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:57:11,085	[INFO]	103	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:57:11,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 int n = length_by_edge.size();
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:57:14,356	[INFO]	104	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:57:14,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:57:14,358	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:57:14,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:57:15,338	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 00:57:18,644	[INFO]	107	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:57:18,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:57:19,636	[INFO]	108	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:57:19,638	[INFO]	109	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:57:19,638	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:57:19,639	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:57:19,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:57:22,981	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 00:57:22,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 00:57:26,105	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:57:26,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:57:29,328	[INFO]	113	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 00:57:29,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 00:57:30,257	[INFO]	114	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 00:57:30,258	[INFO]	115	SUCCESS	+2.0	
2020-12-19 00:57:30,259	[DEBUG]	
2020-12-19 00:57:31,288	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:57:34,631	[INFO]	117	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:57:34,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 00:57:35,602	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:57:35,603	[INFO]	119	SUCCESS	+2.0	
2020-12-19 00:57:35,603	[DEBUG]	
2020-12-19 00:57:36,629	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:57:37,606	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:57:38,636	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:57:41,974	[INFO]	123	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:57:41,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:57:41,976	[INFO]	124	SUCCESS	+2.0	
2020-12-19 00:57:41,976	[DEBUG]	
2020-12-19 00:57:42,931	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:57:42,933	[INFO]	126	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:57:42,933	[DEBUG]	
2020-12-19 00:57:43,942	[INFO]	127	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:57:43,944	[INFO]	128	SUCCESS	+2.0	
2020-12-19 00:57:43,944	[DEBUG]	
2020-12-19 00:57:44,960	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:57:44,964	[INFO]	130	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:57:44,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:57:44,967	[INFO]	131	SUCCESS	+2.0	
2020-12-19 00:57:44,968	[DEBUG]	
2020-12-19 00:57:44,971	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:57:45,996	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:57:47,013	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:57:48,002	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:57:51,189	[INFO]	136	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:57:51,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:57:51,190	[INFO]	137	SUCCESS	+2.0	
2020-12-19 00:57:51,191	[DEBUG]	
2020-12-19 00:57:52,156	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:57:55,451	[INFO]	139	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:57:58,822	[INFO]	140	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:57:58,823	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:57:58,825	[INFO]	141	SUCCESS	+2.0	
2020-12-19 00:57:58,825	[DEBUG]	
2020-12-19 00:57:59,770	[INFO]	142	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:57:59,771	[INFO]	143	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:58:00,815	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:58:00,817	[INFO]	145	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:58:04,090	[INFO]	146	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:58:04,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:05,070	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:58:05,072	[INFO]	148	SUCCESS	+2.0	
2020-12-19 00:58:05,072	[DEBUG]	
2020-12-19 00:58:06,084	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:58:09,505	[INFO]	150	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:58:09,506	[INFO]	151	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:58:09,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:58:10,456	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:58:10,457	[INFO]	153	SUCCESS	+2.0	
2020-12-19 00:58:10,458	[DEBUG]	
2020-12-19 00:58:11,469	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 00:58:14,751	[INFO]	155	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 00:58:14,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:58:14,753	[INFO]	156	SUCCESS	+2.0	
2020-12-19 00:58:14,753	[DEBUG]	
2020-12-19 00:58:17,901	[INFO]	157	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:58:18,901	[INFO]	158	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:58:19,879	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 00:58:20,875	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:58:24,196	[INFO]	161	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 00:58:24,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 00:58:24,197	[INFO]	162	SUCCESS	+2.0	
2020-12-19 00:58:24,198	[DEBUG]	
2020-12-19 00:58:24,199	[INFO]	163	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 00:58:24,199	[DEBUG]	
2020-12-19 00:58:24,200	[INFO]	164	SUCCESS	+2.0	
2020-12-19 00:58:24,200	[DEBUG]	
2020-12-19 00:58:27,541	[INFO]	165	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:58:27,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:27,544	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:58:27,544	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:27,545	[INFO]	167	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:58:27,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:27,548	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:58:27,549	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:27,550	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:58:27,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:28,701	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 00:58:28,703	[INFO]	171	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:58:28,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:29,976	[INFO]	172	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 00:58:31,354	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 00:58:35,968	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:58:35,970	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,29 ****
--- 21,43 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,972	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 00:58:35,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,29 ****
--- 21,43 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,976	[INFO]	176	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:58:35,977	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,978	[INFO]	177	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:58:35,979	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,981	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:58:35,982	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,984	[INFO]	179	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 00:58:35,985	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:35,988	[INFO]	180	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:58:35,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:58:37,268	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:58:37,269	[INFO]	182	SUCCESS	+2.0	
2020-12-19 00:58:37,270	[DEBUG]	
2020-12-19 00:58:37,271	[INFO]	183	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 00:58:37,272	[DEBUG]	
2020-12-19 00:58:37,273	[INFO]	184	SUCCESS	+2.0	
2020-12-19 00:58:37,273	[DEBUG]	
2020-12-19 00:58:38,531	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:58:39,936	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:58:39,939	[INFO]	187	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:58:39,940	[DEBUG]	
2020-12-19 00:58:43,957	[INFO]	188	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 00:58:43,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-19 00:58:44,947	[INFO]	189	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:58:45,941	[INFO]	190	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:58:46,950	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 00:58:46,952	[INFO]	192	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 00:58:46,952	[DEBUG]	
2020-12-19 00:58:46,953	[INFO]	193	SUCCESS	+2.0	
2020-12-19 00:58:46,953	[DEBUG]	
2020-12-19 00:58:47,941	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 00:58:51,356	[INFO]	195	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 00:58:54,759	[INFO]	196	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:58:55,686	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 00:58:56,707	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:58:57,698	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 00:59:01,066	[INFO]	200	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:59:01,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:59:02,020	[INFO]	201	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 00:59:02,022	[INFO]	202	SUCCESS	+2.0	
2020-12-19 00:59:02,022	[DEBUG]	
2020-12-19 00:59:02,024	[INFO]	203	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:59:02,994	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 00:59:03,977	[INFO]	205	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:59:03,978	[INFO]	206	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 00:59:03,979	[DEBUG]	
2020-12-19 00:59:07,228	[INFO]	207	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:59:07,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:59:08,260	[INFO]	208	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 00:59:08,262	[INFO]	209	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 00:59:08,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 00:59:08,263	[INFO]	210	SUCCESS	+2.0	
2020-12-19 00:59:08,263	[DEBUG]	
2020-12-19 00:59:11,504	[INFO]	211	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:59:11,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:59:11,506	[INFO]	212	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:59:11,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:59:12,481	[INFO]	213	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 00:59:15,734	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:59:15,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 52,57 ****
--- 50,56 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-19 00:59:16,772	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:59:16,775	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:59:16,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 52,57 ****
--- 50,56 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-19 00:59:16,779	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 00:59:16,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 00:59:16,782	[INFO]	218	SUCCESS	+2.0	
2020-12-19 00:59:16,783	[DEBUG]	
2020-12-19 00:59:16,787	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:59:16,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:59:16,792	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:59:16,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:59:16,798	[INFO]	221	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:59:16,800	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:59:17,739	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 00:59:17,743	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 00:59:17,745	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:59:17,747	[INFO]	224	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 00:59:17,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 00:59:17,749	[INFO]	225	SUCCESS	+2.0	
2020-12-19 00:59:17,750	[DEBUG]	
2020-12-19 00:59:18,753	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 00:59:19,765	[INFO]	227	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 00:59:20,751	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:59:21,754	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:59:22,751	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 00:59:23,768	[INFO]	231	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 00:59:27,062	[INFO]	232	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 00:59:27,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 00:59:28,044	[INFO]	233	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 00:59:28,047	[INFO]	234	SUCCESS	+2.0	
2020-12-19 00:59:28,047	[DEBUG]	
2020-12-19 00:59:31,429	[INFO]	235	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 00:59:32,408	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:59:35,722	[INFO]	237	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 00:59:35,723	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 00:59:35,723	[INFO]	238	SUCCESS	+2.0	
2020-12-19 00:59:35,724	[DEBUG]	
2020-12-19 00:59:39,023	[INFO]	239	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 00:59:39,952	[INFO]	240	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 00:59:40,943	[INFO]	241	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 00:59:41,932	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 00:59:42,934	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 00:59:46,293	[INFO]	244	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 00:59:47,262	[INFO]	245	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 00:59:48,285	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 00:59:49,267	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:59:52,609	[INFO]	248	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 00:59:53,583	[INFO]	249	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 00:59:53,584	[INFO]	250	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 00:59:53,585	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 00:59:54,573	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 00:59:54,575	[INFO]	252	SUCCESS	+2.0	
2020-12-19 00:59:54,575	[DEBUG]	
2020-12-19 00:59:55,585	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 00:59:56,578	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 00:59:57,560	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 00:59:58,593	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:00:01,860	[INFO]	257	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:00:01,861	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:00:05,131	[INFO]	258	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:00:05,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:00:08,423	[INFO]	259	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:00:08,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:00:08,426	[INFO]	260	SUCCESS	+2.0	
2020-12-19 01:00:08,426	[DEBUG]	
2020-12-19 01:00:09,381	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:00:09,382	[INFO]	262	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:00:09,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:00:09,384	[INFO]	263	SUCCESS	+2.0	
2020-12-19 01:00:09,384	[DEBUG]	
2020-12-19 01:00:10,407	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:00:11,435	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:00:12,413	[INFO]	266	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:00:15,684	[INFO]	267	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:00:15,685	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:00:18,915	[INFO]	268	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:00:18,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:00:18,917	[INFO]	269	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:00:18,918	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:00:18,918	[INFO]	270	SUCCESS	+2.0	
2020-12-19 01:00:18,919	[DEBUG]	
2020-12-19 01:00:19,919	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:00:20,933	[INFO]	272	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:00:24,214	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:00:24,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 01:00:25,195	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:00:26,170	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:00:26,173	[INFO]	276	SUCCESS	+2.0	
2020-12-19 01:00:26,175	[DEBUG]	
2020-12-19 01:00:27,180	[INFO]	277	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:00:28,169	[INFO]	278	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:00:28,171	[INFO]	279	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:00:28,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:00:29,171	[INFO]	280	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:00:32,555	[INFO]	281	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:00:32,557	[INFO]	282	SUCCESS	+2.0	
2020-12-19 01:00:32,557	[DEBUG]	
2020-12-19 01:00:33,499	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:00:34,481	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:00:38,597	[INFO]	285	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:00:38,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:00:38,600	[INFO]	286	SUCCESS	+2.0	
2020-12-19 01:00:38,600	[DEBUG]	
2020-12-19 01:00:42,829	[INFO]	287	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:00:44,003	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:00:45,186	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:00:48,717	[INFO]	290	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:00:49,704	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:00:50,700	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:00:54,051	[INFO]	293	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:00:55,027	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:00:55,031	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:00:56,054	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:00:57,121	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:00:58,102	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:00:59,020	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:00:59,984	[INFO]	300	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:01:03,437	[INFO]	301	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:01:03,438	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 01:01:06,698	[INFO]	302	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:01:06,699	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 minNode = node;
              }
          }
  

2020-12-19 01:01:07,623	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:01:08,576	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:01:09,530	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:01:12,673	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:12,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:01:12,676	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:01:12,677	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:01:12,678	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:01:12,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:01:15,833	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:01:15,834	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 26,32 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:01:19,145	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:01:19,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  

2020-12-19 01:01:20,050	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:01:20,992	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:01:21,928	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:01:21,931	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:01:21,932	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  

2020-12-19 01:01:25,283	[INFO]	315	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:01:25,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 47,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:25,286	[INFO]	316	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:01:25,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 47,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:25,289	[INFO]	317	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:01:25,290	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 47,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:25,292	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:25,292	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,39 ----
                      continue;
                  }
  
!                 
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 47,56 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:26,193	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:01:29,395	[INFO]	320	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:29,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:32,726	[INFO]	321	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:32,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 minNode = node;
              }
          }
  
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:33,706	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:37,048	[INFO]	323	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:37,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 49,54 ****
--- 50,59 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:37,050	[INFO]	324	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:01:37,051	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 49,54 ****
--- 50,59 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:40,443	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:01:40,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 23,28 ****
--- 24,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 49,54 ****
--- 52,61 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:41,430	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:01:44,859	[INFO]	327	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:01:45,830	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:01:45,833	[INFO]	329	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:01:45,834	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 23,28 ****
--- 24,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 49,54 ****
--- 52,61 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:49,148	[INFO]	330	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:01:49,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 49,54 ****
--- 51,60 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:50,150	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:01:51,132	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:01:51,134	[INFO]	333	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:01:51,135	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 49,54 ****
--- 51,60 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:51,136	[INFO]	334	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:01:51,137	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 49,54 ****
--- 51,60 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:52,147	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:01:52,153	[INFO]	336	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:01:52,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 49,54 ****
--- 51,60 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:53,154	[INFO]	337	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:01:53,157	[INFO]	338	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:01:53,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 49,54 ****
--- 51,60 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:01:56,494	[INFO]	339	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:01:59,840	[INFO]	340	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:01:59,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:01:59,844	[INFO]	341	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:01:59,845	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:00,930	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:02:00,933	[INFO]	343	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:02:00,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:00,939	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:02:00,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:00,944	[INFO]	345	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:02:00,946	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:01,938	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:02:02,964	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:02:02,966	[INFO]	348	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:02:02,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:03,963	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:02:03,965	[INFO]	350	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:02:03,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:04,999	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:02:05,006	[INFO]	352	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:02:05,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:05,994	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:02:07,017	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:02:07,022	[INFO]	355	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:02:07,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:07,028	[INFO]	356	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:02:07,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:07,035	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:02:07,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:07,041	[INFO]	358	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:02:07,043	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:02:07,045	[INFO]	359	SUCCESS	+2.0	
2020-12-19 01:02:07,046	[DEBUG]	
2020-12-19 01:02:10,346	[INFO]	360	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:02:10,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:02:13,542	[INFO]	361	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:02:16,792	[INFO]	362	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:02:17,793	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:02:17,794	[INFO]	364	SUCCESS	+2.0	
2020-12-19 01:02:17,794	[DEBUG]	
2020-12-19 01:02:20,983	[INFO]	365	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:02:20,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:02:20,984	[INFO]	366	SUCCESS	+2.0	
2020-12-19 01:02:20,985	[DEBUG]	
2020-12-19 01:02:24,266	[INFO]	367	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:02:27,687	[INFO]	368	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:02:27,688	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:02:28,665	[INFO]	369	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:02:29,650	[INFO]	370	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:02:29,653	[INFO]	371	SUCCESS	+2.0	
2020-12-19 01:02:29,653	[DEBUG]	
2020-12-19 01:02:33,009	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:02:33,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 01:02:33,999	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:02:34,002	[INFO]	374	SUCCESS	+2.0	
2020-12-19 01:02:34,003	[DEBUG]	
2020-12-19 01:02:49,067	[INFO]	375	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:02:49,965	[INFO]	376	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:02:50,841	[INFO]	377	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:02:51,733	[INFO]	378	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:02:54,792	[INFO]	379	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:02:54,793	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:02:54,795	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:02:54,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:02:54,796	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:02:54,797	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:02:54,797	[INFO]	382	SUCCESS	+2.0	
2020-12-19 01:02:54,797	[DEBUG]	
2020-12-19 01:02:55,715	[INFO]	383	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:02:56,710	[INFO]	384	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:02:57,788	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:02:57,789	[INFO]	386	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:02:57,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:03:01,090	[INFO]	387	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:03:04,500	[INFO]	388	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:03:04,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:03:05,449	[INFO]	389	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:03:08,824	[INFO]	390	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:03:08,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:03:12,045	[INFO]	391	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:03:12,045	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:03:12,962	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:03:13,916	[INFO]	393	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:03:17,241	[INFO]	394	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:03:20,397	[INFO]	395	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:03:20,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:03:21,337	[INFO]	396	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:03:21,340	[INFO]	397	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:03:21,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:03:22,280	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:03:22,281	[INFO]	399	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:03:22,282	[DEBUG]	
2020-12-19 01:03:23,239	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:03:23,240	[INFO]	401	SUCCESS	+2.0	
2020-12-19 01:03:23,240	[DEBUG]	
2020-12-19 01:03:24,230	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:03:25,255	[INFO]	403	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:03:26,278	[INFO]	404	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:03:29,536	[INFO]	405	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:03:29,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:03:29,538	[INFO]	406	SUCCESS	+2.0	
2020-12-19 01:03:29,538	[DEBUG]	
2020-12-19 01:03:30,531	[INFO]	407	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:03:31,539	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:03:32,586	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:03:33,626	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:03:36,898	[INFO]	411	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:03:36,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:03:36,900	[INFO]	412	SUCCESS	+2.0	
2020-12-19 01:03:36,900	[DEBUG]	
2020-12-19 01:03:40,230	[INFO]	413	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:03:40,231	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:03:41,190	[INFO]	414	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:03:41,191	[INFO]	415	SUCCESS	+2.0	
2020-12-19 01:03:41,191	[DEBUG]	
2020-12-19 01:03:42,207	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:03:43,223	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:03:46,538	[INFO]	418	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:03:47,507	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:03:50,817	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:03:50,818	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:03:50,819	[INFO]	421	SUCCESS	+2.0	
2020-12-19 01:03:50,820	[DEBUG]	
2020-12-19 01:03:51,781	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:03:52,794	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:03:52,797	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:03:52,798	[DEBUG]	
2020-12-19 01:03:52,799	[INFO]	425	SUCCESS	+2.0	
2020-12-19 01:03:52,800	[DEBUG]	
2020-12-19 01:03:53,795	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:03:54,789	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:03:54,790	[INFO]	428	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:03:58,186	[INFO]	429	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:03:58,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:03:58,188	[INFO]	430	SUCCESS	+2.0	
2020-12-19 01:03:58,188	[DEBUG]	
2020-12-19 01:03:59,086	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:03:59,089	[INFO]	432	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:03:59,091	[INFO]	433	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:04:00,077	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:04:01,065	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:04:04,331	[INFO]	436	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:04:04,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:04:04,333	[INFO]	437	SUCCESS	+2.0	
2020-12-19 01:04:04,333	[DEBUG]	
2020-12-19 01:04:05,297	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:04:06,278	[INFO]	439	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:04:07,326	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:04:08,320	[INFO]	441	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:04:11,631	[INFO]	442	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:04:11,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:04:11,633	[INFO]	443	SUCCESS	+2.0	
2020-12-19 01:04:11,633	[DEBUG]	
2020-12-19 01:04:11,634	[INFO]	444	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:04:14,896	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:04:14,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 01:04:14,898	[INFO]	446	SUCCESS	+2.0	
2020-12-19 01:04:14,898	[DEBUG]	
2020-12-19 01:04:15,870	[INFO]	447	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:04:16,904	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:04:17,893	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:04:18,880	[INFO]	450	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:04:19,893	[INFO]	451	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:04:20,935	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:04:21,939	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:04:22,928	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:04:23,923	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:04:24,941	[INFO]	456	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:04:24,942	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:04:25,930	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:04:29,215	[INFO]	459	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:04:29,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:04:29,216	[INFO]	460	SUCCESS	+2.0	
2020-12-19 01:04:29,217	[DEBUG]	
2020-12-19 01:04:30,187	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:04:31,180	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:04:32,166	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:04:33,146	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:04:36,544	[INFO]	465	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:04:37,498	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:04:40,806	[INFO]	467	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:04:44,195	[INFO]	468	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:04:44,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 01:04:44,197	[INFO]	469	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:04:44,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 01:04:44,199	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:04:44,199	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,28 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 01:04:45,142	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:04:46,155	[INFO]	472	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:04:46,156	[INFO]	473	SUCCESS	+2.0	
2020-12-19 01:04:46,157	[DEBUG]	
2020-12-19 01:04:46,158	[INFO]	474	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:04:46,158	[DEBUG]	
2020-12-19 01:04:46,159	[INFO]	475	SUCCESS	+2.0	
2020-12-19 01:04:46,159	[DEBUG]	
2020-12-19 01:04:46,160	[INFO]	476	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:04:46,160	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:04:46,161	[INFO]	477	SUCCESS	+2.0	
2020-12-19 01:04:46,161	[DEBUG]	
2020-12-19 01:04:47,166	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:04:47,168	[INFO]	479	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:04:48,193	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:04:51,494	[INFO]	481	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:04:51,495	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:04:52,451	[INFO]	482	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:04:53,449	[INFO]	483	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:04:54,437	[INFO]	484	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:04:57,722	[INFO]	485	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:04:57,723	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:05:01,010	[INFO]	486	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:05:01,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:05:04,317	[INFO]	487	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:05:04,318	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:05:07,620	[INFO]	488	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:05:07,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:05:08,613	[INFO]	489	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:05:09,625	[INFO]	490	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:05:10,657	[INFO]	491	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:05:10,658	[INFO]	492	SUCCESS	+2.0	
2020-12-19 01:05:10,659	[DEBUG]	
2020-12-19 01:05:11,654	[INFO]	493	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:05:12,617	[INFO]	494	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:05:13,633	[INFO]	495	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:05:16,894	[INFO]	496	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:05:20,151	[INFO]	497	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:05:20,152	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:05:21,142	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:05:21,143	[INFO]	499	SUCCESS	+2.0	
2020-12-19 01:05:21,143	[DEBUG]	
2020-12-19 01:05:24,439	[INFO]	500	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:05:24,440	[INFO]	==== END ====
2020-12-19 01:05:24,440	[INFO]	Reason: step budget
2020-12-19 01:05:24,441	[INFO]	
2020-12-19 01:05:24,441	[INFO]	========== EPOCH 6 ==========
2020-12-19 01:05:24,441	[INFO]	==== WARMUP ====
2020-12-19 01:05:27,665	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:05:27,665	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:05:30,925	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:05:30,925	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:05:34,304	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:05:34,304	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:05:37,766	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 01:05:37,766	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:05:37,766	[INFO]	==== START ====
2020-12-19 01:05:38,755	[INFO]	1	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:05:39,775	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:05:40,791	[INFO]	3	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:05:44,072	[INFO]	4	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:05:45,054	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:05:48,336	[INFO]	6	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:05:48,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:05:51,569	[INFO]	7	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:05:51,570	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:05:54,836	[INFO]	8	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:05:54,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:05:54,837	[INFO]	9	SUCCESS	+2.0	
2020-12-19 01:05:54,838	[DEBUG]	
2020-12-19 01:05:58,122	[INFO]	10	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:05:58,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:05:58,124	[INFO]	11	SUCCESS	+2.0	
2020-12-19 01:05:58,124	[DEBUG]	
2020-12-19 01:05:58,125	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:05:59,101	[INFO]	13	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:06:00,099	[INFO]	14	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:06:01,108	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:06:16,180	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:06:16,182	[INFO]	17	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:06:16,183	[DEBUG]	
2020-12-19 01:06:19,135	[INFO]	18	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:06:19,136	[INFO]	19	SUCCESS	+2.0	
2020-12-19 01:06:19,136	[DEBUG]	
2020-12-19 01:06:20,031	[INFO]	20	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:06:20,941	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:06:24,158	[INFO]	22	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:06:25,203	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:06:28,580	[INFO]	24	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:06:43,644	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:06:46,571	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:06:46,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-19 01:06:47,469	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:06:47,471	[INFO]	28	SUCCESS	+2.0	
2020-12-19 01:06:47,471	[DEBUG]	
2020-12-19 01:06:48,363	[INFO]	29	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:06:49,336	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:06:50,353	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:06:51,318	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:06:54,728	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:06:54,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:06:55,709	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:06:56,708	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:06:56,710	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:06:56,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:06:57,745	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:06:57,752	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:06:57,755	[INFO]	39	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:06:57,756	[DEBUG]	
2020-12-19 01:06:57,758	[INFO]	40	SUCCESS	+2.0	
2020-12-19 01:06:57,759	[DEBUG]	
2020-12-19 01:07:00,998	[INFO]	41	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:07:00,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:07:16,058	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:07:18,980	[INFO]	43	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:07:18,981	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:07:19,843	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:07:19,844	[INFO]	45	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:07:19,844	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:07:19,845	[INFO]	46	SUCCESS	+2.0	
2020-12-19 01:07:19,845	[DEBUG]	
2020-12-19 01:07:20,772	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:07:20,777	[INFO]	48	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:07:20,778	[DEBUG]	
2020-12-19 01:07:23,917	[INFO]	49	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:07:23,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:07:23,921	[INFO]	50	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:07:23,922	[DEBUG]	
2020-12-19 01:07:23,924	[INFO]	51	SUCCESS	+2.0	
2020-12-19 01:07:23,925	[DEBUG]	
2020-12-19 01:07:24,897	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:07:24,898	[INFO]	53	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:07:24,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:07:24,900	[INFO]	54	SUCCESS	+2.0	
2020-12-19 01:07:24,900	[DEBUG]	
2020-12-19 01:07:24,901	[INFO]	55	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:07:28,230	[INFO]	56	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:07:31,548	[INFO]	57	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:07:31,549	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:07:32,551	[INFO]	58	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:07:32,553	[INFO]	59	SUCCESS	+2.0	
2020-12-19 01:07:32,554	[DEBUG]	
2020-12-19 01:07:33,572	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:07:36,868	[INFO]	61	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:07:36,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:07:36,870	[INFO]	62	SUCCESS	+2.0	
2020-12-19 01:07:36,870	[DEBUG]	
2020-12-19 01:07:40,101	[INFO]	63	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:07:40,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 01:07:41,103	[INFO]	64	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:07:42,100	[INFO]	65	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:07:42,101	[INFO]	66	SUCCESS	+2.0	
2020-12-19 01:07:42,102	[DEBUG]	
2020-12-19 01:07:45,465	[INFO]	67	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:07:45,466	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:07:48,706	[INFO]	68	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:07:48,707	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-19 01:07:51,987	[INFO]	69	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:07:51,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-19 01:07:52,948	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:07:53,962	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:07:53,965	[INFO]	72	SUCCESS	+2.0	
2020-12-19 01:07:53,967	[DEBUG]	
2020-12-19 01:07:53,969	[INFO]	73	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:07:53,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:07:53,973	[INFO]	74	SUCCESS	+2.0	
2020-12-19 01:07:53,975	[DEBUG]	
2020-12-19 01:07:57,227	[INFO]	75	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:07:57,228	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:07:57,229	[INFO]	76	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:07:57,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:07:58,266	[INFO]	77	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:07:59,298	[INFO]	78	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:08:00,277	[INFO]	79	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:08:00,279	[INFO]	80	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:08:00,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:08:00,280	[INFO]	81	SUCCESS	+2.0	
2020-12-19 01:08:00,280	[DEBUG]	
2020-12-19 01:08:01,290	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:08:04,578	[INFO]	83	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:08:05,604	[INFO]	84	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:08:06,630	[INFO]	85	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:08:07,642	[INFO]	86	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:08:08,672	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:08:09,708	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:08:10,697	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:08:14,025	[INFO]	90	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:08:14,992	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:08:15,979	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:08:17,008	[INFO]	93	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:08:18,028	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:08:19,035	[INFO]	95	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:08:20,059	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:08:21,055	[INFO]	97	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:08:22,043	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:08:23,065	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:08:23,069	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:08:24,128	[INFO]	101	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:08:25,130	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:08:28,394	[INFO]	103	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:08:28,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:08:31,639	[INFO]	104	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:08:32,592	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:08:33,551	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:08:36,849	[INFO]	107	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:08:36,850	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 48,53 ****
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:08:40,084	[INFO]	108	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:08:43,411	[INFO]	109	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:08:43,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:08:44,376	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:08:44,377	[INFO]	111	SUCCESS	+2.0	
2020-12-19 01:08:44,377	[DEBUG]	
2020-12-19 01:08:45,376	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:08:46,389	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:08:47,431	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:08:48,428	[INFO]	115	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:08:49,409	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:09:04,465	[INFO]	117	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:09:05,383	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:09:06,360	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:09:07,257	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:09:10,157	[INFO]	121	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:09:10,159	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:09:13,445	[INFO]	122	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:09:13,446	[INFO]	123	SUCCESS	+2.0	
2020-12-19 01:09:13,447	[DEBUG]	
2020-12-19 01:09:16,789	[INFO]	124	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:09:16,790	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:09:16,791	[INFO]	125	SUCCESS	+2.0	
2020-12-19 01:09:16,791	[DEBUG]	
2020-12-19 01:09:17,729	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:09:18,719	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:09:19,770	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:09:19,774	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:09:20,768	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:09:21,750	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:09:22,813	[INFO]	132	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:09:26,076	[INFO]	133	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:09:26,078	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:09:27,000	[INFO]	134	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:09:27,003	[INFO]	135	SUCCESS	+2.0	
2020-12-19 01:09:27,004	[DEBUG]	
2020-12-19 01:09:30,391	[INFO]	136	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:09:31,381	[INFO]	137	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:09:34,667	[INFO]	138	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:09:34,668	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:09:35,664	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:09:35,667	[INFO]	141	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:09:35,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:09:35,668	[INFO]	142	SUCCESS	+2.0	
2020-12-19 01:09:35,669	[DEBUG]	
2020-12-19 01:09:36,713	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:09:37,734	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:09:38,727	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:09:39,721	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:09:39,723	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:09:40,726	[INFO]	148	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:09:41,718	[INFO]	149	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:09:41,723	[INFO]	150	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:09:41,724	[DEBUG]	
2020-12-19 01:09:42,764	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:09:42,765	[INFO]	152	SUCCESS	+2.0	
2020-12-19 01:09:42,765	[DEBUG]	
2020-12-19 01:09:43,807	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:09:43,809	[INFO]	154	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:09:44,811	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:09:45,856	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:09:49,245	[INFO]	157	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:09:50,202	[INFO]	158	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:09:53,526	[INFO]	159	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:09:54,494	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:09:57,749	[INFO]	161	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:10:01,068	[INFO]	162	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:10:01,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:02,050	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:10:03,024	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:10:04,032	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:10:04,033	[INFO]	166	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:10:04,034	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:04,035	[INFO]	167	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:10:04,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:04,036	[INFO]	168	SUCCESS	+2.0	
2020-12-19 01:10:04,036	[DEBUG]	
2020-12-19 01:10:05,068	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:10:06,076	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:10:09,359	[INFO]	171	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:10:09,361	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:10:09,364	[INFO]	172	SUCCESS	+2.0	
2020-12-19 01:10:09,365	[DEBUG]	
2020-12-19 01:10:09,368	[INFO]	173	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:10:09,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:10:09,372	[INFO]	174	SUCCESS	+2.0	
2020-12-19 01:10:09,373	[DEBUG]	
2020-12-19 01:10:09,377	[INFO]	175	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:10:09,378	[DEBUG]	
2020-12-19 01:10:09,381	[INFO]	176	SUCCESS	+2.0	
2020-12-19 01:10:09,382	[DEBUG]	
2020-12-19 01:10:10,355	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:10:11,301	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:10:14,547	[INFO]	179	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:10:15,573	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:10:16,588	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:10:17,600	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:10:18,609	[INFO]	183	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:10:18,611	[INFO]	184	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:10:21,935	[INFO]	185	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:10:21,936	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:21,937	[INFO]	186	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:10:21,937	[INFO]	187	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:10:21,938	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:25,217	[INFO]	188	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:10:25,218	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:25,219	[INFO]	189	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:10:25,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:40,284	[INFO]	190	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:10:40,286	[INFO]	191	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:10:40,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:41,213	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:10:41,216	[INFO]	193	SUCCESS	+2.0	
2020-12-19 01:10:41,216	[DEBUG]	
2020-12-19 01:10:42,117	[INFO]	194	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:10:43,119	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:10:44,129	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:10:45,150	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:10:46,163	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:10:47,160	[INFO]	199	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:10:48,149	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:10:51,448	[INFO]	201	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:10:52,435	[INFO]	202	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:10:55,872	[INFO]	203	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:10:55,873	[INFO]	204	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:10:55,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:10:57,128	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:10:57,130	[INFO]	206	SUCCESS	+2.0	
2020-12-19 01:10:57,130	[DEBUG]	
2020-12-19 01:10:58,156	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:11:01,422	[INFO]	208	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:11:01,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:11:02,404	[INFO]	209	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:11:03,406	[INFO]	210	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:11:03,408	[INFO]	211	SUCCESS	+2.0	
2020-12-19 01:11:03,408	[DEBUG]	
2020-12-19 01:11:07,232	[INFO]	212	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:11:07,233	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:11:07,234	[INFO]	213	SUCCESS	+2.0	
2020-12-19 01:11:07,235	[DEBUG]	
2020-12-19 01:11:10,443	[INFO]	214	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:11:10,445	[INFO]	215	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:11:10,445	[DEBUG]	
2020-12-19 01:11:10,446	[INFO]	216	SUCCESS	+2.0	
2020-12-19 01:11:10,446	[DEBUG]	
2020-12-19 01:11:11,446	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:11:14,811	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:11:14,813	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:11:18,081	[INFO]	219	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:11:18,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:11:18,083	[INFO]	220	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:11:18,084	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:11:18,084	[INFO]	221	SUCCESS	+2.0	
2020-12-19 01:11:18,085	[DEBUG]	
2020-12-19 01:11:21,366	[INFO]	222	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:11:21,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:11:22,338	[INFO]	223	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:11:22,340	[INFO]	224	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:11:22,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:11:22,341	[INFO]	225	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:11:22,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:11:37,417	[INFO]	226	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:11:37,418	[INFO]	227	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:11:37,419	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:11:40,386	[INFO]	228	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:11:40,386	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:11:40,387	[INFO]	229	SUCCESS	+2.0	
2020-12-19 01:11:40,387	[DEBUG]	
2020-12-19 01:11:43,552	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:11:43,553	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:11:43,554	[INFO]	231	SUCCESS	+2.0	
2020-12-19 01:11:43,554	[DEBUG]	
2020-12-19 01:11:46,839	[INFO]	232	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:12:01,908	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:12:01,910	[INFO]	234	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:12:01,910	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:12:02,835	[INFO]	236	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:12:05,660	[INFO]	237	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:12:06,562	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:12:07,558	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:12:07,561	[INFO]	240	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:12:07,562	[DEBUG]	
2020-12-19 01:12:10,871	[INFO]	241	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:12:10,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:12:10,873	[INFO]	242	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:12:10,873	[DEBUG]	
2020-12-19 01:12:11,842	[INFO]	243	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:12:15,178	[INFO]	244	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:15,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:18,409	[INFO]	245	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:12:19,400	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:12:19,402	[INFO]	247	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:19,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:20,427	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:12:23,697	[INFO]	249	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:12:23,699	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.put(startnode, 0);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:23,700	[INFO]	250	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:23,701	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:24,695	[INFO]	251	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:12:24,699	[INFO]	252	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:24,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:24,702	[INFO]	253	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:24,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:25,702	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:12:25,706	[INFO]	255	SUCCESS	+2.0	
2020-12-19 01:12:25,707	[DEBUG]	
2020-12-19 01:12:29,015	[INFO]	256	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:12:29,016	[INFO]	257	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:12:29,016	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:12:30,028	[INFO]	258	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:12:31,025	[INFO]	259	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:12:32,061	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:12:32,063	[INFO]	261	SUCCESS	+2.0	
2020-12-19 01:12:32,064	[DEBUG]	
2020-12-19 01:12:32,065	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:12:32,066	[INFO]	263	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:12:32,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:12:33,080	[INFO]	264	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:12:36,420	[INFO]	265	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:12:36,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:12:36,422	[INFO]	266	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:12:36,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:12:36,424	[INFO]	267	SUCCESS	+2.0	
2020-12-19 01:12:36,424	[DEBUG]	
2020-12-19 01:12:36,426	[INFO]	268	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:12:36,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:12:37,381	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:12:38,406	[INFO]	270	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:12:38,408	[INFO]	271	SUCCESS	+2.0	
2020-12-19 01:12:38,409	[DEBUG]	
2020-12-19 01:12:39,403	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:12:42,859	[INFO]	273	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:12:42,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:12:42,861	[INFO]	274	SUCCESS	+2.0	
2020-12-19 01:12:42,861	[DEBUG]	
2020-12-19 01:12:43,805	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:12:44,826	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:12:48,079	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:12:48,080	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:12:48,081	[INFO]	278	SUCCESS	+2.0	
2020-12-19 01:12:48,082	[DEBUG]	
2020-12-19 01:12:49,095	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:12:50,106	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:12:51,092	[INFO]	281	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:12:54,417	[INFO]	282	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:12:54,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:12:55,406	[INFO]	283	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:12:56,402	[INFO]	284	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:12:56,404	[INFO]	285	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:12:56,404	[INFO]	286	SUCCESS	+2.0	
2020-12-19 01:12:56,405	[DEBUG]	
2020-12-19 01:12:57,399	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:12:58,421	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:12:58,422	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:13:01,684	[INFO]	290	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:13:02,700	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:13:03,664	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:13:03,666	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:13:03,667	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:13:06,970	[INFO]	295	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:13:06,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:13:07,973	[INFO]	296	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:13:07,976	[INFO]	297	SUCCESS	+2.0	
2020-12-19 01:13:07,976	[DEBUG]	
2020-12-19 01:13:07,978	[INFO]	298	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:13:07,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:13:07,981	[INFO]	299	SUCCESS	+2.0	
2020-12-19 01:13:07,982	[DEBUG]	
2020-12-19 01:13:08,994	[INFO]	300	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:13:09,985	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:13:09,987	[INFO]	302	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:13:09,987	[DEBUG]	
2020-12-19 01:13:09,988	[INFO]	303	SUCCESS	+2.0	
2020-12-19 01:13:09,988	[DEBUG]	
2020-12-19 01:13:11,022	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:13:12,023	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:13:13,055	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:13:13,059	[INFO]	307	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:13:13,061	[DEBUG]	
2020-12-19 01:13:13,063	[INFO]	308	SUCCESS	+2.0	
2020-12-19 01:13:13,064	[DEBUG]	
2020-12-19 01:13:14,076	[INFO]	309	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:13:15,058	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:13:18,439	[INFO]	311	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:13:18,440	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:13:18,441	[INFO]	312	SUCCESS	+2.0	
2020-12-19 01:13:18,441	[DEBUG]	
2020-12-19 01:13:18,443	[INFO]	313	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:13:18,443	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:13:18,444	[INFO]	314	SUCCESS	+2.0	
2020-12-19 01:13:18,445	[DEBUG]	
2020-12-19 01:13:19,383	[INFO]	315	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:13:22,667	[INFO]	316	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:13:22,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:13:23,639	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:13:24,666	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:13:25,673	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:13:25,675	[INFO]	320	SUCCESS	+2.0	
2020-12-19 01:13:25,676	[DEBUG]	
2020-12-19 01:13:28,982	[INFO]	321	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:13:32,255	[INFO]	322	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:13:32,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 01:13:35,549	[INFO]	323	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:13:35,551	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 52,57 ****
--- 53,59 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-19 01:13:35,552	[INFO]	324	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:13:35,552	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 01:13:36,570	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:13:39,861	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:13:39,863	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:13:43,180	[INFO]	327	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:13:43,181	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:13:44,171	[INFO]	328	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:13:44,173	[INFO]	329	SUCCESS	+2.0	
2020-12-19 01:13:44,174	[DEBUG]	
2020-12-19 01:13:45,213	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:13:46,199	[INFO]	331	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:13:47,194	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:13:47,196	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:13:47,197	[INFO]	334	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:13:47,197	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:13:47,198	[INFO]	335	SUCCESS	+2.0	
2020-12-19 01:13:47,198	[DEBUG]	
2020-12-19 01:13:48,221	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:13:49,255	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:13:50,251	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:13:50,253	[INFO]	339	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:13:50,254	[INFO]	340	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:13:50,254	[DEBUG]	
2020-12-19 01:13:53,565	[INFO]	341	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:13:53,567	[INFO]	342	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:13:53,567	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:13:53,569	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:13:53,569	[DEBUG]	
2020-12-19 01:13:54,555	[INFO]	344	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:13:54,556	[INFO]	345	SUCCESS	+2.0	
2020-12-19 01:13:54,557	[DEBUG]	
2020-12-19 01:13:54,558	[INFO]	346	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:13:54,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:13:54,559	[INFO]	347	SUCCESS	+2.0	
2020-12-19 01:13:54,559	[DEBUG]	
2020-12-19 01:13:55,573	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:13:56,581	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:13:57,563	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:13:58,616	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:14:01,920	[INFO]	352	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:14:02,914	[INFO]	353	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:14:03,899	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:14:04,889	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:14:04,891	[INFO]	356	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:14:04,891	[DEBUG]	
2020-12-19 01:14:04,892	[INFO]	357	SUCCESS	+2.0	
2020-12-19 01:14:04,892	[DEBUG]	
2020-12-19 01:14:05,890	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:14:06,894	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:14:07,866	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:14:08,868	[INFO]	361	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:14:08,870	[INFO]	362	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:14:08,870	[DEBUG]	
2020-12-19 01:14:08,871	[INFO]	363	SUCCESS	+2.0	
2020-12-19 01:14:08,871	[DEBUG]	
2020-12-19 01:14:12,249	[INFO]	364	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:14:12,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:14:13,181	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:14:14,148	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:14:14,149	[INFO]	367	SUCCESS	+2.0	
2020-12-19 01:14:14,149	[DEBUG]	
2020-12-19 01:14:17,500	[INFO]	368	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:14:18,438	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:14:21,802	[INFO]	370	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:14:22,741	[INFO]	371	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:14:23,758	[INFO]	372	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:14:27,109	[INFO]	373	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:14:28,074	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:14:31,397	[INFO]	375	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:14:32,380	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:14:32,383	[INFO]	377	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:14:32,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:14:33,419	[INFO]	378	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:14:33,421	[INFO]	379	SUCCESS	+2.0	
2020-12-19 01:14:33,421	[DEBUG]	
2020-12-19 01:14:33,422	[INFO]	380	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:14:33,423	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:14:33,424	[INFO]	381	SUCCESS	+2.0	
2020-12-19 01:14:33,425	[DEBUG]	
2020-12-19 01:14:34,438	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:14:35,446	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:14:36,497	[INFO]	384	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:14:37,493	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:14:38,508	[INFO]	386	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:14:53,573	[INFO]	387	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:14:54,473	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:14:54,476	[INFO]	389	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:14:54,478	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:14:54,479	[INFO]	390	SUCCESS	+2.0	
2020-12-19 01:14:54,480	[DEBUG]	
2020-12-19 01:14:55,387	[INFO]	391	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:14:56,318	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:14:57,176	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:14:58,067	[INFO]	394	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:14:58,973	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:15:02,036	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:15:02,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-19 01:15:02,038	[INFO]	397	SUCCESS	+2.0	
2020-12-19 01:15:02,038	[DEBUG]	
2020-12-19 01:15:05,328	[INFO]	398	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:15:05,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:15:05,330	[INFO]	399	SUCCESS	+2.0	
2020-12-19 01:15:05,331	[DEBUG]	
2020-12-19 01:15:06,305	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:15:09,555	[INFO]	401	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:15:10,540	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:15:11,532	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:15:12,519	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:15:15,751	[INFO]	405	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:15:15,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:15:15,752	[INFO]	406	SUCCESS	+2.0	
2020-12-19 01:15:15,753	[DEBUG]	
2020-12-19 01:15:19,130	[INFO]	407	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:15:19,131	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:15:22,429	[INFO]	408	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:15:22,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:15:22,432	[INFO]	409	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:15:22,432	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:15:25,710	[INFO]	410	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:15:25,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:15:25,712	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:15:25,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:15:25,713	[INFO]	412	SUCCESS	+2.0	
2020-12-19 01:15:25,713	[DEBUG]	
2020-12-19 01:15:28,939	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:15:29,918	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:15:30,945	[INFO]	415	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:15:31,965	[INFO]	416	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:15:33,014	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:15:34,079	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:15:34,083	[INFO]	419	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:15:34,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:15:34,087	[INFO]	420	SUCCESS	+2.0	
2020-12-19 01:15:34,088	[DEBUG]	
2020-12-19 01:15:37,532	[INFO]	421	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:15:38,535	[INFO]	422	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:15:41,907	[INFO]	423	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:15:41,908	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 01:15:41,909	[INFO]	424	SUCCESS	+2.0	
2020-12-19 01:15:41,909	[DEBUG]	
2020-12-19 01:15:42,851	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:15:43,861	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:15:44,862	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:15:45,868	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:15:45,870	[INFO]	429	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:15:45,871	[INFO]	430	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:15:45,871	[DEBUG]	
2020-12-19 01:15:45,872	[INFO]	431	SUCCESS	+2.0	
2020-12-19 01:15:45,873	[DEBUG]	
2020-12-19 01:15:45,874	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:15:49,383	[INFO]	433	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:15:49,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 01:15:49,385	[INFO]	434	SUCCESS	+2.0	
2020-12-19 01:15:49,385	[DEBUG]	
2020-12-19 01:15:50,332	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:15:51,318	[INFO]	436	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:15:52,314	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:15:53,312	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:15:56,600	[INFO]	439	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:15:56,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 01:15:56,602	[INFO]	440	SUCCESS	+2.0	
2020-12-19 01:15:56,602	[DEBUG]	
2020-12-19 01:15:57,609	[INFO]	441	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:15:58,606	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:16:01,935	[INFO]	443	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:16:02,908	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:16:03,895	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:16:07,238	[INFO]	446	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:16:08,258	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:16:09,296	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:16:09,300	[INFO]	449	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:16:10,295	[INFO]	450	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:16:10,297	[INFO]	451	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:16:11,336	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:16:11,337	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:16:26,399	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:16:29,299	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:16:29,300	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 01:16:29,301	[INFO]	456	SUCCESS	+2.0	
2020-12-19 01:16:29,301	[DEBUG]	
2020-12-19 01:16:30,193	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:16:31,094	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:16:32,017	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:16:33,007	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:16:34,026	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:16:35,011	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:16:38,354	[INFO]	463	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:16:38,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:16:39,354	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:16:39,356	[INFO]	465	SUCCESS	+2.0	
2020-12-19 01:16:39,356	[DEBUG]	
2020-12-19 01:16:42,599	[INFO]	466	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:16:42,603	[INFO]	467	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:16:42,603	[DEBUG]	
2020-12-19 01:16:43,648	[INFO]	468	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:16:43,649	[INFO]	469	SUCCESS	+2.0	
2020-12-19 01:16:43,649	[DEBUG]	
2020-12-19 01:16:43,650	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:16:43,651	[DEBUG]	
2020-12-19 01:16:46,954	[INFO]	471	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:16:46,955	[INFO]	472	SUCCESS	+2.0	
2020-12-19 01:16:46,955	[DEBUG]	
2020-12-19 01:16:46,956	[INFO]	473	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:16:46,957	[DEBUG]	
2020-12-19 01:16:50,245	[INFO]	474	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:16:50,246	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:16:50,247	[INFO]	475	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:16:50,247	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:16:50,248	[INFO]	476	SUCCESS	+2.0	
2020-12-19 01:16:50,248	[DEBUG]	
2020-12-19 01:16:51,209	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:16:51,211	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:16:52,226	[INFO]	479	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:16:52,230	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:16:53,223	[INFO]	481	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:16:54,261	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:16:55,271	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:16:56,252	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:16:57,243	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:17:12,321	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:17:15,309	[INFO]	487	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:17:16,193	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:17:19,345	[INFO]	489	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:17:19,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:17:19,347	[INFO]	490	SUCCESS	+2.0	
2020-12-19 01:17:19,347	[DEBUG]	
2020-12-19 01:17:20,361	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:17:23,650	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:17:23,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:17:26,864	[INFO]	493	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:17:26,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:17:27,899	[INFO]	494	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:17:31,190	[INFO]	495	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:17:31,191	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:17:32,164	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:17:33,169	[INFO]	497	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:17:34,212	[INFO]	498	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:17:34,213	[INFO]	499	SUCCESS	+2.0	
2020-12-19 01:17:34,214	[DEBUG]	
2020-12-19 01:17:35,191	[INFO]	500	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:17:35,192	[INFO]	==== END ====
2020-12-19 01:17:35,192	[INFO]	Reason: step budget
2020-12-19 01:17:35,193	[INFO]	
2020-12-19 01:17:35,193	[INFO]	========== EPOCH 7 ==========
2020-12-19 01:17:35,193	[INFO]	==== WARMUP ====
2020-12-19 01:17:38,505	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:17:38,505	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:17:41,912	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:17:41,912	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:17:45,098	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:17:45,098	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:17:48,393	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 01:17:48,393	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:17:48,393	[INFO]	==== START ====
2020-12-19 01:17:48,394	[INFO]	1	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:17:48,394	[DEBUG]	
2020-12-19 01:17:51,684	[INFO]	2	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:17:51,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:17:51,687	[INFO]	3	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:17:51,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:17:51,688	[INFO]	4	SUCCESS	+2.0	
2020-12-19 01:17:51,688	[DEBUG]	
2020-12-19 01:17:52,669	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:18:07,741	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:18:08,614	[INFO]	7	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:18:09,498	[INFO]	8	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:18:10,392	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:18:13,443	[INFO]	10	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:18:16,630	[INFO]	11	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:18:17,608	[INFO]	12	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:18:18,662	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:18:21,913	[INFO]	14	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:18:21,914	[INFO]	15	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:18:21,914	[DEBUG]	
2020-12-19 01:18:22,905	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:18:26,226	[INFO]	17	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:18:26,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:18:26,228	[INFO]	18	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:18:26,228	[DEBUG]	
2020-12-19 01:18:26,229	[INFO]	19	SUCCESS	+2.0	
2020-12-19 01:18:26,229	[DEBUG]	
2020-12-19 01:18:27,240	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:18:28,250	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:18:31,582	[INFO]	22	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:18:31,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:18:32,600	[INFO]	23	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:18:32,601	[INFO]	24	SUCCESS	+2.0	
2020-12-19 01:18:32,602	[DEBUG]	
2020-12-19 01:18:33,600	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:18:34,585	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:18:35,601	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:18:36,600	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:18:37,599	[INFO]	29	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:18:38,601	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:18:39,576	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:18:42,871	[INFO]	32	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:18:42,872	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:18:43,886	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:18:43,888	[INFO]	34	SUCCESS	+2.0	
2020-12-19 01:18:43,888	[DEBUG]	
2020-12-19 01:18:43,889	[INFO]	35	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:18:44,911	[INFO]	36	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:18:48,275	[INFO]	37	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:18:48,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:18:48,276	[INFO]	38	SUCCESS	+2.0	
2020-12-19 01:18:48,277	[DEBUG]	
2020-12-19 01:18:51,547	[INFO]	39	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:18:51,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:18:54,811	[INFO]	40	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:18:54,813	[INFO]	41	SUCCESS	+2.0	
2020-12-19 01:18:54,813	[DEBUG]	
2020-12-19 01:18:55,788	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:18:59,040	[INFO]	43	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:18:59,042	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 01:18:59,042	[INFO]	44	SUCCESS	+2.0	
2020-12-19 01:18:59,043	[DEBUG]	
2020-12-19 01:19:02,315	[INFO]	45	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:19:02,317	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 01:19:03,345	[INFO]	46	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:19:04,389	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:19:05,412	[INFO]	48	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:19:05,415	[INFO]	49	SUCCESS	+2.0	
2020-12-19 01:19:05,417	[DEBUG]	
2020-12-19 01:19:06,480	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:19:07,492	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:19:08,479	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:19:09,487	[INFO]	53	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:19:10,472	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:19:11,493	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:19:12,516	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:19:15,898	[INFO]	57	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:19:15,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:19:19,239	[INFO]	58	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:19:19,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:19:20,217	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:19:20,219	[INFO]	60	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:19:20,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:19:23,503	[INFO]	61	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:19:23,504	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
! 
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:19:26,777	[INFO]	62	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:19:30,060	[INFO]	63	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:19:30,061	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:19:30,062	[INFO]	64	SUCCESS	+2.0	
2020-12-19 01:19:30,062	[DEBUG]	
2020-12-19 01:19:31,034	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:19:34,406	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:19:34,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 01:19:34,408	[INFO]	67	SUCCESS	+2.0	
2020-12-19 01:19:34,408	[DEBUG]	
2020-12-19 01:19:35,315	[INFO]	68	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:19:35,316	[INFO]	69	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:19:38,665	[INFO]	70	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:19:38,666	[INFO]	71	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:19:39,619	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:19:40,600	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:19:41,641	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:19:42,673	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:19:46,036	[INFO]	76	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:19:46,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:19:49,325	[INFO]	77	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:19:49,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:19:52,542	[INFO]	78	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:19:52,543	[INFO]	79	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:19:52,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:19:53,531	[INFO]	80	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:19:53,533	[INFO]	81	SUCCESS	+2.0	
2020-12-19 01:19:53,534	[DEBUG]	
2020-12-19 01:19:56,788	[INFO]	82	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:19:56,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:20:00,123	[INFO]	83	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:20:00,124	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 01:20:00,125	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:20:00,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:20:01,120	[INFO]	85	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:20:01,124	[INFO]	86	SUCCESS	+2.0	
2020-12-19 01:20:01,125	[DEBUG]	
2020-12-19 01:20:01,128	[INFO]	87	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:20:01,129	[DEBUG]	
2020-12-19 01:20:04,551	[INFO]	88	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:20:05,509	[INFO]	89	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:20:05,511	[INFO]	90	SUCCESS	+2.0	
2020-12-19 01:20:05,511	[DEBUG]	
2020-12-19 01:20:06,515	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:20:07,498	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:20:07,500	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:20:08,509	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:20:09,518	[INFO]	95	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:20:12,793	[INFO]	96	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:20:13,775	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:20:13,779	[INFO]	98	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:20:17,066	[INFO]	99	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:20:17,067	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:20:17,068	[INFO]	100	SUCCESS	+2.0	
2020-12-19 01:20:17,068	[DEBUG]	
2020-12-19 01:20:32,129	[INFO]	101	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:20:33,051	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:20:33,973	[INFO]	103	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:20:34,906	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:20:38,893	[INFO]	105	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:20:43,159	[INFO]	106	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:20:47,180	[INFO]	107	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:20:48,196	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:20:49,218	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:20:52,549	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:20:52,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 01:20:55,826	[INFO]	111	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:20:55,827	[INFO]	112	SUCCESS	+2.0	
2020-12-19 01:20:55,827	[DEBUG]	
2020-12-19 01:20:56,818	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:21:00,168	[INFO]	114	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:21:00,170	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:21:00,173	[INFO]	115	SUCCESS	+2.0	
2020-12-19 01:21:00,174	[DEBUG]	
2020-12-19 01:21:01,164	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:21:02,202	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:21:03,213	[INFO]	118	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:21:04,217	[INFO]	119	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:21:04,219	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:21:05,233	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:21:05,235	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:21:06,222	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:21:07,259	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:21:08,265	[INFO]	125	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:21:11,628	[INFO]	126	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:21:11,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:21:14,918	[INFO]	127	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:21:14,921	[INFO]	128	SUCCESS	+2.0	
2020-12-19 01:21:14,922	[DEBUG]	
2020-12-19 01:21:15,907	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:21:15,910	[INFO]	130	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:21:15,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:21:15,913	[INFO]	131	SUCCESS	+2.0	
2020-12-19 01:21:15,914	[DEBUG]	
2020-12-19 01:21:16,902	[INFO]	132	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:21:17,905	[INFO]	133	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:21:18,908	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:21:18,910	[INFO]	135	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:21:18,910	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:21:33,968	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:21:36,874	[INFO]	137	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:21:36,875	[INFO]	138	SUCCESS	+2.0	
2020-12-19 01:21:36,876	[DEBUG]	
2020-12-19 01:21:36,876	[INFO]	139	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:21:39,910	[INFO]	140	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:21:39,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:21:40,870	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:21:40,871	[INFO]	142	SUCCESS	+2.0	
2020-12-19 01:21:40,871	[DEBUG]	
2020-12-19 01:21:44,274	[INFO]	143	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:21:45,255	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:21:46,289	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:21:47,336	[INFO]	146	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:21:48,359	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:21:51,660	[INFO]	148	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:21:52,660	[INFO]	149	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:21:52,663	[INFO]	150	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:21:52,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:21:52,665	[INFO]	151	SUCCESS	+2.0	
2020-12-19 01:21:52,666	[DEBUG]	
2020-12-19 01:21:55,933	[INFO]	152	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:21:55,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:21:55,935	[INFO]	153	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:21:55,936	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:21:59,099	[INFO]	154	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:22:02,388	[INFO]	155	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:22:02,388	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:02,390	[INFO]	156	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:22:02,390	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:02,391	[INFO]	157	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:22:02,392	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:02,393	[INFO]	158	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:22:02,393	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:03,321	[INFO]	159	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:22:03,323	[INFO]	160	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:22:03,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:03,325	[INFO]	161	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:22:03,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:03,327	[INFO]	162	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:22:03,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:03,330	[INFO]	163	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:22:03,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:04,262	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:22:07,557	[INFO]	165	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:22:07,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:08,533	[INFO]	166	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:22:09,531	[INFO]	167	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:22:09,533	[INFO]	168	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:22:09,534	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:10,561	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:22:13,941	[INFO]	170	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:22:17,219	[INFO]	171	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:22:17,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:22:20,511	[INFO]	172	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:22:20,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:22:21,543	[INFO]	173	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:22:22,547	[INFO]	174	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:22:22,548	[INFO]	175	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:22:22,549	[DEBUG]	
2020-12-19 01:22:23,561	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:22:23,563	[INFO]	177	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:22:23,563	[DEBUG]	
2020-12-19 01:22:23,564	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:22:23,564	[DEBUG]	
2020-12-19 01:22:24,540	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:22:24,541	[INFO]	180	SUCCESS	+2.0	
2020-12-19 01:22:24,541	[DEBUG]	
2020-12-19 01:22:25,526	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:22:26,554	[INFO]	182	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:22:26,558	[INFO]	183	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:22:27,542	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:22:28,575	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:22:29,580	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:22:29,582	[INFO]	187	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:22:29,582	[DEBUG]	
2020-12-19 01:22:30,635	[INFO]	188	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:22:30,638	[INFO]	189	SUCCESS	+2.0	
2020-12-19 01:22:30,638	[DEBUG]	
2020-12-19 01:22:31,648	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:22:35,032	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:22:35,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:22:38,317	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:22:38,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 29,34 ****
--- 29,36 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:22:41,617	[INFO]	193	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:22:41,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:22:42,633	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:22:43,651	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:22:44,634	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:22:44,635	[INFO]	197	SUCCESS	+2.0	
2020-12-19 01:22:44,635	[DEBUG]	
2020-12-19 01:22:44,637	[INFO]	198	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:22:44,637	[DEBUG]	
2020-12-19 01:22:44,638	[INFO]	199	SUCCESS	+2.0	
2020-12-19 01:22:44,638	[DEBUG]	
2020-12-19 01:22:47,986	[INFO]	200	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:23:03,054	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:23:03,982	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:23:04,929	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:23:07,929	[INFO]	204	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:23:07,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:23:08,859	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:23:08,860	[INFO]	206	SUCCESS	+2.0	
2020-12-19 01:23:08,861	[DEBUG]	
2020-12-19 01:23:09,884	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:23:13,209	[INFO]	208	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:23:13,210	[INFO]	209	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:23:13,211	[DEBUG]	
2020-12-19 01:23:14,235	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:23:14,240	[INFO]	211	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:23:14,242	[DEBUG]	
2020-12-19 01:23:14,244	[INFO]	212	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:23:14,246	[DEBUG]	
2020-12-19 01:23:14,248	[INFO]	213	SUCCESS	+2.0	
2020-12-19 01:23:14,250	[DEBUG]	
2020-12-19 01:23:15,259	[INFO]	214	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:23:16,244	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:23:17,257	[INFO]	216	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:23:18,253	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:23:19,256	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:23:20,280	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:23:23,590	[INFO]	220	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:23:23,591	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:23:23,591	[INFO]	221	SUCCESS	+2.0	
2020-12-19 01:23:23,592	[DEBUG]	
2020-12-19 01:23:23,593	[INFO]	222	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:23:23,593	[DEBUG]	
2020-12-19 01:23:23,594	[INFO]	223	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:23:23,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:23:23,595	[INFO]	224	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:23:23,596	[DEBUG]	
2020-12-19 01:23:24,618	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:23:24,620	[INFO]	226	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:23:24,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:23:25,571	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:23:26,548	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:23:26,551	[INFO]	229	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:23:26,552	[DEBUG]	
2020-12-19 01:23:26,554	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:23:26,556	[DEBUG]	
2020-12-19 01:23:27,543	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:23:30,858	[INFO]	232	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:23:30,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 01:23:31,800	[INFO]	233	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:23:35,132	[INFO]	234	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:23:35,133	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 01:23:36,143	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:23:37,140	[INFO]	236	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:23:38,144	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:23:38,145	[INFO]	238	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:23:38,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 01:23:39,156	[INFO]	239	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:23:39,158	[INFO]	240	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:23:39,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 01:23:39,159	[INFO]	241	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:23:39,160	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 01:23:40,170	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:23:41,172	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:23:41,173	[INFO]	244	SUCCESS	+2.0	
2020-12-19 01:23:41,173	[DEBUG]	
2020-12-19 01:23:44,533	[INFO]	245	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:23:45,504	[INFO]	246	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:23:46,562	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:23:49,880	[INFO]	248	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:23:50,866	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:23:51,849	[INFO]	250	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:23:52,859	[INFO]	251	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:23:52,862	[INFO]	252	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:23:53,861	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:23:54,890	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:23:55,886	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:23:59,162	[INFO]	256	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:24:00,147	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:24:01,145	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:24:02,147	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:24:03,075	[INFO]	260	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:24:04,079	[INFO]	261	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:24:05,098	[INFO]	262	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:24:20,174	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:24:23,163	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:24:23,164	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:24:24,097	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:24:24,098	[INFO]	266	SUCCESS	+2.0	
2020-12-19 01:24:24,099	[DEBUG]	
2020-12-19 01:24:27,215	[INFO]	267	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:24:28,149	[INFO]	268	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:24:31,444	[INFO]	269	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:24:31,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:24:34,768	[INFO]	270	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:24:34,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 01:24:34,770	[INFO]	271	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:24:34,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:24:34,771	[INFO]	272	SUCCESS	+2.0	
2020-12-19 01:24:34,771	[DEBUG]	
2020-12-19 01:24:35,770	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:24:36,755	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:24:37,764	[INFO]	275	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:24:37,769	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:24:41,180	[INFO]	277	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:24:41,181	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:24:42,141	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:24:43,160	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:24:44,163	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:24:47,401	[INFO]	281	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:24:47,402	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:24:47,404	[INFO]	282	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:24:47,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:24:48,397	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:24:48,400	[INFO]	284	SUCCESS	+2.0	
2020-12-19 01:24:48,401	[DEBUG]	
2020-12-19 01:24:49,313	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:24:50,317	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:24:53,576	[INFO]	287	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:24:53,577	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:24:53,578	[INFO]	288	SUCCESS	+2.0	
2020-12-19 01:24:53,578	[DEBUG]	
2020-12-19 01:24:54,558	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:24:55,574	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:24:58,910	[INFO]	291	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:24:58,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:24:58,912	[INFO]	292	SUCCESS	+2.0	
2020-12-19 01:24:58,913	[DEBUG]	
2020-12-19 01:24:59,899	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:25:03,267	[INFO]	294	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:25:06,569	[INFO]	295	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:25:07,506	[INFO]	296	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:25:10,736	[INFO]	297	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:25:10,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:25:11,751	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:25:11,758	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:25:11,761	[INFO]	300	SUCCESS	+2.0	
2020-12-19 01:25:11,762	[DEBUG]	
2020-12-19 01:25:15,016	[INFO]	301	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:25:18,309	[INFO]	302	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:25:18,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:25:21,554	[INFO]	303	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:25:21,555	[INFO]	304	SUCCESS	+2.0	
2020-12-19 01:25:21,555	[DEBUG]	
2020-12-19 01:25:24,897	[INFO]	305	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:25:24,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:25:24,900	[INFO]	306	SUCCESS	+2.0	
2020-12-19 01:25:24,901	[DEBUG]	
2020-12-19 01:25:25,879	[INFO]	307	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:25:26,905	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:25:27,922	[INFO]	309	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:25:31,267	[INFO]	310	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:25:34,617	[INFO]	311	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:25:34,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:25:35,696	[INFO]	312	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:25:36,706	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:25:36,707	[INFO]	314	SUCCESS	+2.0	
2020-12-19 01:25:36,708	[DEBUG]	
2020-12-19 01:25:40,034	[INFO]	315	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:25:40,034	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:25:41,030	[INFO]	316	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:25:41,031	[INFO]	317	SUCCESS	+2.0	
2020-12-19 01:25:41,032	[DEBUG]	
2020-12-19 01:25:42,038	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:25:43,013	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:25:43,014	[INFO]	320	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:25:44,035	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:25:45,067	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:25:45,068	[INFO]	323	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:25:45,069	[INFO]	324	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:25:45,070	[DEBUG]	
2020-12-19 01:25:45,070	[INFO]	325	SUCCESS	+2.0	
2020-12-19 01:25:45,071	[DEBUG]	
2020-12-19 01:25:45,072	[INFO]	326	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:25:45,072	[DEBUG]	
2020-12-19 01:25:45,073	[INFO]	327	SUCCESS	+2.0	
2020-12-19 01:25:45,074	[DEBUG]	
2020-12-19 01:25:45,075	[INFO]	328	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:25:45,076	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:25:45,078	[INFO]	329	SUCCESS	+2.0	
2020-12-19 01:25:45,078	[DEBUG]	
2020-12-19 01:25:46,177	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:25:47,186	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:25:50,542	[INFO]	332	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:25:53,832	[INFO]	333	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:25:53,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:25:57,125	[INFO]	334	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:25:57,126	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:26:00,482	[INFO]	335	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:26:00,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:26:00,484	[INFO]	336	SUCCESS	+2.0	
2020-12-19 01:26:00,485	[DEBUG]	
2020-12-19 01:26:01,450	[INFO]	337	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:26:02,454	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:26:05,834	[INFO]	339	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:26:05,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:26:05,838	[INFO]	340	SUCCESS	+2.0	
2020-12-19 01:26:05,839	[DEBUG]	
2020-12-19 01:26:09,177	[INFO]	341	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:26:12,354	[INFO]	342	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:26:12,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:26:12,356	[INFO]	343	SUCCESS	+2.0	
2020-12-19 01:26:12,357	[DEBUG]	
2020-12-19 01:26:15,644	[INFO]	344	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:26:15,645	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:26:18,928	[INFO]	345	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:26:18,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:26:22,188	[INFO]	346	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:26:22,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:26:22,190	[INFO]	347	SUCCESS	+2.0	
2020-12-19 01:26:22,190	[DEBUG]	
2020-12-19 01:26:23,190	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:26:24,179	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:26:27,436	[INFO]	350	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:26:27,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:26:27,438	[INFO]	351	SUCCESS	+2.0	
2020-12-19 01:26:27,438	[DEBUG]	
2020-12-19 01:26:28,436	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:26:28,437	[INFO]	353	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:26:28,437	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:26:31,785	[INFO]	354	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:26:32,766	[INFO]	355	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:26:36,071	[INFO]	356	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:26:36,071	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:26:37,096	[INFO]	357	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:26:40,478	[INFO]	358	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:26:40,479	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:26:43,640	[INFO]	359	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:26:43,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:26:43,642	[INFO]	360	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:26:43,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:26:46,974	[INFO]	361	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:26:46,976	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:26:47,928	[INFO]	362	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:26:51,195	[INFO]	363	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:26:51,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:26:52,194	[INFO]	364	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:26:55,469	[INFO]	365	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:26:55,470	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:26:56,488	[INFO]	366	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:26:59,699	[INFO]	367	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:26:59,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:02,985	[INFO]	368	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:27:02,986	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:06,245	[INFO]	369	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:27:06,246	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:06,249	[INFO]	370	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:27:06,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:06,250	[INFO]	371	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:27:06,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:06,253	[INFO]	372	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:27:06,254	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:07,230	[INFO]	373	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:27:10,620	[INFO]	374	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:27:10,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:27:10,621	[INFO]	375	SUCCESS	+2.0	
2020-12-19 01:27:10,622	[DEBUG]	
2020-12-19 01:27:10,623	[INFO]	376	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:27:10,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:27:10,624	[INFO]	377	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:27:10,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:27:13,912	[INFO]	378	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:27:13,913	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:27:17,125	[INFO]	379	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:27:17,126	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:27:20,319	[INFO]	380	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:27:20,321	[INFO]	381	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:27:20,321	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:27:20,322	[INFO]	382	SUCCESS	+2.0	
2020-12-19 01:27:20,322	[DEBUG]	
2020-12-19 01:27:21,299	[INFO]	383	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:27:24,505	[INFO]	384	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:27:25,515	[INFO]	385	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:27:26,535	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:27:27,580	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:27:28,606	[INFO]	388	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:27:29,591	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:27:30,615	[INFO]	390	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:27:31,632	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:27:32,673	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:27:33,676	[INFO]	393	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:27:34,670	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:27:35,640	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:27:36,676	[INFO]	396	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:27:36,678	[INFO]	397	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:27:37,675	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:27:38,672	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:27:39,684	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:27:40,693	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:27:44,082	[INFO]	402	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:27:44,082	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:27:44,083	[INFO]	403	SUCCESS	+2.0	
2020-12-19 01:27:44,084	[DEBUG]	
2020-12-19 01:27:47,324	[INFO]	404	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:27:47,325	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 01:27:47,326	[INFO]	405	SUCCESS	+2.0	
2020-12-19 01:27:47,326	[DEBUG]	
2020-12-19 01:27:50,606	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:27:50,606	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:27:51,600	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:27:51,603	[INFO]	408	SUCCESS	+2.0	
2020-12-19 01:27:51,604	[DEBUG]	
2020-12-19 01:27:52,605	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:27:53,606	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:27:54,610	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:27:55,594	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:27:56,591	[INFO]	413	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:27:56,592	[INFO]	414	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:27:57,699	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:27:58,756	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:27:59,766	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:28:00,768	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:28:04,062	[INFO]	419	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:28:04,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:04,064	[INFO]	420	SUCCESS	+2.0	
2020-12-19 01:28:04,064	[DEBUG]	
2020-12-19 01:28:19,122	[INFO]	421	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:28:19,123	[INFO]	422	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:28:19,124	[DEBUG]	
2020-12-19 01:28:19,124	[INFO]	423	SUCCESS	+2.0	
2020-12-19 01:28:19,125	[DEBUG]	
2020-12-19 01:28:20,016	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:28:23,073	[INFO]	425	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:28:23,074	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:28:23,963	[INFO]	427	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:28:24,849	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:28:27,938	[INFO]	429	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:28:27,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          return minNode;
      }
  }

2020-12-19 01:28:27,940	[INFO]	430	SUCCESS	+2.0	
2020-12-19 01:28:27,940	[DEBUG]	
2020-12-19 01:28:28,926	[INFO]	431	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:28:29,925	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:28:30,905	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:28:31,930	[INFO]	434	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:28:32,973	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:28:33,965	[INFO]	436	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:28:33,967	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:28:33,968	[INFO]	438	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:28:33,969	[INFO]	439	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:28:33,972	[INFO]	440	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:28:33,972	[DEBUG]	
2020-12-19 01:28:33,973	[INFO]	441	SUCCESS	+2.0	
2020-12-19 01:28:33,974	[DEBUG]	
2020-12-19 01:28:33,975	[INFO]	442	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:28:35,026	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:28:35,029	[INFO]	444	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:28:35,030	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:35,032	[INFO]	445	SUCCESS	+2.0	
2020-12-19 01:28:35,033	[DEBUG]	
2020-12-19 01:28:35,036	[INFO]	446	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:28:35,037	[DEBUG]	
2020-12-19 01:28:36,061	[INFO]	447	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:28:37,056	[INFO]	448	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:28:37,057	[INFO]	449	SUCCESS	+2.0	
2020-12-19 01:28:37,058	[DEBUG]	
2020-12-19 01:28:40,323	[INFO]	450	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:28:40,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:43,658	[INFO]	451	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:28:43,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:43,660	[INFO]	452	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:28:43,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Set<Node> visitedNodes = new HashSet<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:44,636	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:28:44,637	[INFO]	454	SUCCESS	+2.0	
2020-12-19 01:28:44,638	[DEBUG]	
2020-12-19 01:28:44,639	[INFO]	455	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:28:47,930	[INFO]	456	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:28:47,931	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:28:51,174	[INFO]	457	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:28:54,493	[INFO]	458	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:28:54,494	[INFO]	459	SUCCESS	+2.0	
2020-12-19 01:28:54,494	[DEBUG]	
2020-12-19 01:28:55,458	[INFO]	460	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:28:55,460	[INFO]	461	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:28:55,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:55,462	[INFO]	462	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:28:55,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:55,463	[INFO]	463	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:28:55,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:55,465	[INFO]	464	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:28:55,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:55,466	[INFO]	465	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:28:55,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:28:56,471	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:28:59,756	[INFO]	467	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:28:59,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:02,986	[INFO]	468	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:29:03,994	[INFO]	469	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:29:03,998	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:29:04,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:07,346	[INFO]	471	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:29:07,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:08,327	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:29:08,331	[INFO]	473	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:29:08,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:23,440	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:29:23,441	[INFO]	475	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:29:23,442	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:24,338	[INFO]	476	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:29:24,339	[INFO]	477	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:29:24,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:29:24,340	[INFO]	478	SUCCESS	+2.0	
2020-12-19 01:29:24,340	[DEBUG]	
2020-12-19 01:29:24,341	[INFO]	479	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:29:24,342	[DEBUG]	
2020-12-19 01:29:24,342	[INFO]	480	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:29:24,343	[INFO]	481	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:29:24,343	[DEBUG]	
2020-12-19 01:29:25,253	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:29:25,255	[INFO]	483	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:29:25,255	[DEBUG]	
2020-12-19 01:29:26,198	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:29:26,201	[INFO]	485	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:29:26,202	[DEBUG]	
2020-12-19 01:29:26,203	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:29:26,203	[DEBUG]	
2020-12-19 01:29:26,204	[INFO]	487	SUCCESS	+2.0	
2020-12-19 01:29:26,205	[DEBUG]	
2020-12-19 01:29:27,099	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:29:30,560	[INFO]	489	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:29:30,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:29:30,561	[INFO]	490	SUCCESS	+2.0	
2020-12-19 01:29:30,562	[DEBUG]	
2020-12-19 01:29:31,597	[INFO]	491	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:29:31,600	[INFO]	492	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:29:32,602	[INFO]	493	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:29:35,881	[INFO]	494	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:29:35,882	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:29:35,883	[INFO]	495	SUCCESS	+2.0	
2020-12-19 01:29:35,883	[DEBUG]	
2020-12-19 01:29:39,250	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:29:39,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 01:29:40,209	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:29:43,618	[INFO]	498	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:29:43,619	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 43,48 ****
--- 41,47 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 01:29:43,620	[INFO]	499	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:29:43,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 01:29:43,622	[INFO]	500	SUCCESS	+2.0	
2020-12-19 01:29:43,622	[DEBUG]	
2020-12-19 01:29:43,622	[INFO]	==== END ====
2020-12-19 01:29:43,622	[INFO]	Reason: step budget
2020-12-19 01:29:43,623	[INFO]	
2020-12-19 01:29:43,623	[INFO]	========== EPOCH 8 ==========
2020-12-19 01:29:43,623	[INFO]	==== WARMUP ====
2020-12-19 01:29:46,835	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:29:46,835	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:29:50,062	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:29:50,062	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:29:53,502	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:29:53,503	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:29:56,697	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 01:29:56,697	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:29:56,697	[INFO]	==== START ====
2020-12-19 01:29:57,626	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:30:00,953	[INFO]	2	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:30:04,208	[INFO]	3	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:30:04,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:30:04,210	[INFO]	4	SUCCESS	+2.0	
2020-12-19 01:30:04,210	[DEBUG]	
2020-12-19 01:30:07,538	[INFO]	5	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:30:07,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:30:08,517	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:30:09,519	[INFO]	7	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:30:09,522	[INFO]	8	SUCCESS	+2.0	
2020-12-19 01:30:09,523	[DEBUG]	
2020-12-19 01:30:10,527	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:30:13,910	[INFO]	10	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:30:13,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:30:14,843	[INFO]	11	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:30:15,845	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:30:19,145	[INFO]	13	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:30:19,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:30:22,430	[INFO]	14	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:30:22,431	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:30:22,432	[INFO]	15	SUCCESS	+2.0	
2020-12-19 01:30:22,433	[DEBUG]	
2020-12-19 01:30:23,402	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:30:23,404	[INFO]	17	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:30:26,676	[INFO]	18	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:30:29,907	[INFO]	19	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:30:29,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:33,264	[INFO]	20	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:30:33,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:37,127	[INFO]	21	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:30:37,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:38,326	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:30:38,327	[INFO]	23	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:30:38,328	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:41,899	[INFO]	24	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:30:41,900	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:30:42,862	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:30:43,880	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:30:43,882	[INFO]	27	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:30:43,882	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:43,883	[INFO]	28	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:30:43,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:30:43,884	[INFO]	29	SUCCESS	+2.0	
2020-12-19 01:30:43,885	[DEBUG]	
2020-12-19 01:30:47,134	[INFO]	30	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:30:50,263	[INFO]	31	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:30:50,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:30:50,265	[INFO]	32	SUCCESS	+2.0	
2020-12-19 01:30:50,265	[DEBUG]	
2020-12-19 01:30:51,260	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:30:52,287	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:30:53,292	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:30:56,557	[INFO]	36	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:30:57,518	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:30:58,508	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:30:58,509	[INFO]	39	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:30:58,510	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:30:58,511	[INFO]	40	SUCCESS	+2.0	
2020-12-19 01:30:58,511	[DEBUG]	
2020-12-19 01:30:59,508	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:30:59,510	[INFO]	42	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:30:59,510	[DEBUG]	
2020-12-19 01:31:00,500	[INFO]	43	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:31:00,503	[INFO]	44	SUCCESS	+2.0	
2020-12-19 01:31:00,504	[DEBUG]	
2020-12-19 01:31:03,834	[INFO]	45	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:31:03,834	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:31:03,835	[INFO]	46	SUCCESS	+2.0	
2020-12-19 01:31:03,836	[DEBUG]	
2020-12-19 01:31:07,067	[INFO]	47	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:31:07,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:31:08,030	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:31:09,034	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:31:12,399	[INFO]	50	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:31:15,697	[INFO]	51	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:31:15,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
--- 46,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:31:16,710	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:31:17,692	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:31:18,696	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:31:18,697	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:31:18,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:31:19,725	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:31:20,746	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:31:20,747	[INFO]	58	SUCCESS	+2.0	
2020-12-19 01:31:20,748	[DEBUG]	
2020-12-19 01:31:24,250	[INFO]	59	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:31:24,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 01:31:24,252	[INFO]	60	SUCCESS	+2.0	
2020-12-19 01:31:24,252	[DEBUG]	
2020-12-19 01:31:27,543	[INFO]	61	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:31:28,492	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:31:29,488	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:31:32,847	[INFO]	64	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:31:32,848	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:31:32,850	[INFO]	65	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:31:32,850	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:31:33,871	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:31:33,875	[INFO]	67	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:31:33,877	[DEBUG]	
2020-12-19 01:31:37,110	[INFO]	68	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:31:37,113	[INFO]	69	SUCCESS	+2.0	
2020-12-19 01:31:37,113	[DEBUG]	
2020-12-19 01:31:38,141	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:31:41,421	[INFO]	71	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:31:41,422	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:31:41,423	[INFO]	72	SUCCESS	+2.0	
2020-12-19 01:31:41,423	[DEBUG]	
2020-12-19 01:31:42,428	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:31:43,555	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:31:46,899	[INFO]	75	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:31:46,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:31:47,900	[INFO]	76	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:31:47,903	[INFO]	77	SUCCESS	+2.0	
2020-12-19 01:31:47,905	[DEBUG]	
2020-12-19 01:31:47,908	[INFO]	78	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:31:47,909	[DEBUG]	
2020-12-19 01:31:47,911	[INFO]	79	SUCCESS	+2.0	
2020-12-19 01:31:47,913	[DEBUG]	
2020-12-19 01:31:51,243	[INFO]	80	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:31:51,244	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:31:51,245	[INFO]	81	SUCCESS	+2.0	
2020-12-19 01:31:51,245	[DEBUG]	
2020-12-19 01:31:54,573	[INFO]	82	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:31:55,542	[INFO]	83	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:31:55,543	[INFO]	84	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:31:55,544	[DEBUG]	
2020-12-19 01:31:56,545	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:31:57,506	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:31:58,564	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:31:58,565	[INFO]	88	SUCCESS	+2.0	
2020-12-19 01:31:58,565	[DEBUG]	
2020-12-19 01:31:59,625	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:32:14,684	[INFO]	90	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:32:14,685	[INFO]	91	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:32:14,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:32:15,542	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:32:16,400	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:32:17,281	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:32:17,282	[INFO]	95	SUCCESS	+2.0	
2020-12-19 01:32:17,282	[DEBUG]	
2020-12-19 01:32:17,284	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:32:18,241	[INFO]	97	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:32:18,242	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:32:19,142	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:32:22,175	[INFO]	100	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:32:22,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              }
          }
  

2020-12-19 01:32:22,176	[INFO]	101	SUCCESS	+2.0	
2020-12-19 01:32:22,177	[DEBUG]	
2020-12-19 01:32:23,197	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:32:23,200	[INFO]	103	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:32:23,201	[DEBUG]	
2020-12-19 01:32:26,521	[INFO]	104	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:32:26,522	[INFO]	105	SUCCESS	+2.0	
2020-12-19 01:32:26,522	[DEBUG]	
2020-12-19 01:32:29,877	[INFO]	106	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:32:29,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:32:29,878	[INFO]	107	SUCCESS	+2.0	
2020-12-19 01:32:29,879	[DEBUG]	
2020-12-19 01:32:30,858	[INFO]	108	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:32:31,863	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:32:31,867	[INFO]	110	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:32:31,868	[DEBUG]	
2020-12-19 01:32:31,869	[INFO]	111	SUCCESS	+2.0	
2020-12-19 01:32:31,870	[DEBUG]	
2020-12-19 01:32:32,912	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:32:36,110	[INFO]	113	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:32:36,111	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:32:36,113	[INFO]	114	SUCCESS	+2.0	
2020-12-19 01:32:36,114	[DEBUG]	
2020-12-19 01:32:39,346	[INFO]	115	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:32:40,352	[INFO]	116	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:32:41,360	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:32:42,356	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:32:42,358	[INFO]	119	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:32:42,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:32:42,359	[INFO]	120	SUCCESS	+2.0	
2020-12-19 01:32:42,359	[DEBUG]	
2020-12-19 01:32:45,669	[INFO]	121	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:32:46,654	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:32:50,051	[INFO]	123	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:32:50,052	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-19 01:32:51,060	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:32:51,063	[INFO]	125	SUCCESS	+2.0	
2020-12-19 01:32:51,063	[DEBUG]	
2020-12-19 01:32:52,058	[INFO]	126	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:32:55,407	[INFO]	127	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:32:55,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:32:55,410	[INFO]	128	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:32:55,410	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:32:56,352	[INFO]	129	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:32:57,347	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:32:58,382	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:32:58,385	[INFO]	132	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:32:58,387	[DEBUG]	
2020-12-19 01:32:58,389	[INFO]	133	SUCCESS	+2.0	
2020-12-19 01:32:58,390	[DEBUG]	
2020-12-19 01:32:59,369	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:33:02,601	[INFO]	135	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:33:03,618	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:33:07,002	[INFO]	137	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:33:07,958	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:33:08,973	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:33:09,991	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:33:13,259	[INFO]	141	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:33:13,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:33:13,260	[INFO]	142	SUCCESS	+2.0	
2020-12-19 01:33:13,261	[DEBUG]	
2020-12-19 01:33:16,531	[INFO]	143	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:33:16,532	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:33:19,861	[INFO]	144	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:33:20,819	[INFO]	145	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:33:21,881	[INFO]	146	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:33:21,883	[INFO]	147	SUCCESS	+2.0	
2020-12-19 01:33:21,883	[DEBUG]	
2020-12-19 01:33:21,886	[INFO]	148	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:33:21,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:33:21,887	[INFO]	149	SUCCESS	+2.0	
2020-12-19 01:33:21,888	[DEBUG]	
2020-12-19 01:33:25,214	[INFO]	150	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:33:26,199	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:33:27,183	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:33:28,180	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:33:31,571	[INFO]	154	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:33:31,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:33:34,779	[INFO]	155	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:33:34,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:33:34,782	[INFO]	156	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:33:34,783	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:33:34,784	[INFO]	157	SUCCESS	+2.0	
2020-12-19 01:33:34,784	[DEBUG]	
2020-12-19 01:33:38,124	[INFO]	158	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:33:38,126	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  

2020-12-19 01:33:38,129	[INFO]	159	SUCCESS	+2.0	
2020-12-19 01:33:38,130	[DEBUG]	
2020-12-19 01:33:39,105	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:33:40,081	[INFO]	161	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:33:41,081	[INFO]	162	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:33:44,370	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:33:44,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:33:44,372	[INFO]	164	SUCCESS	+2.0	
2020-12-19 01:33:44,372	[DEBUG]	
2020-12-19 01:33:47,660	[INFO]	165	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:33:50,918	[INFO]	166	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:33:50,919	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 01:33:50,920	[INFO]	167	SUCCESS	+2.0	
2020-12-19 01:33:50,920	[DEBUG]	
2020-12-19 01:33:51,937	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:33:52,924	[INFO]	169	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:33:53,957	[INFO]	170	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:33:54,918	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:34:09,976	[INFO]	172	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:34:12,965	[INFO]	173	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:34:12,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:34:12,967	[INFO]	174	SUCCESS	+2.0	
2020-12-19 01:34:12,967	[DEBUG]	
2020-12-19 01:34:13,872	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:34:14,776	[INFO]	176	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:34:15,698	[INFO]	177	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:34:18,926	[INFO]	178	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:34:18,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:34:18,928	[INFO]	179	SUCCESS	+2.0	
2020-12-19 01:34:18,929	[DEBUG]	
2020-12-19 01:34:19,946	[INFO]	180	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:34:20,907	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:34:20,911	[INFO]	182	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:34:21,913	[INFO]	183	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:34:21,916	[INFO]	184	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:34:25,194	[INFO]	185	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:34:26,237	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:34:29,574	[INFO]	187	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:34:29,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:34:32,787	[INFO]	188	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:34:32,788	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:34:33,732	[INFO]	189	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:34:33,733	[INFO]	190	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:34:33,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:34:33,734	[INFO]	191	SUCCESS	+2.0	
2020-12-19 01:34:33,734	[DEBUG]	
2020-12-19 01:34:34,730	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:34:38,101	[INFO]	193	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:34:38,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:34:41,364	[INFO]	194	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:34:41,365	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:34:42,319	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:34:45,607	[INFO]	196	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:34:45,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,38 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:34:45,609	[INFO]	197	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:34:45,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,38 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:34:48,895	[INFO]	198	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:34:48,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:34:52,186	[INFO]	199	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:34:52,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 31,36 ****
--- 33,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.remove(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:34:52,189	[INFO]	200	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:34:52,189	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:34:53,162	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:34:53,165	[INFO]	202	SUCCESS	+2.0	
2020-12-19 01:34:53,166	[DEBUG]	
2020-12-19 01:34:56,455	[INFO]	203	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:34:56,456	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:34:57,462	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:34:58,483	[INFO]	205	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:34:59,465	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:35:02,777	[INFO]	207	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:35:02,779	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:35:02,783	[INFO]	208	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:35:02,785	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:35:03,788	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:35:04,795	[INFO]	210	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:35:04,798	[INFO]	211	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:35:04,799	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:35:05,805	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:35:09,146	[INFO]	213	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:35:09,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:35:09,148	[INFO]	214	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:35:09,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:35:10,074	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:35:10,075	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:35:10,075	[DEBUG]	
2020-12-19 01:35:11,063	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:35:14,282	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:35:14,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:35:14,284	[INFO]	219	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:35:14,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:35:17,580	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:35:17,582	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:35:17,583	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:35:17,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:35:18,559	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:35:21,836	[INFO]	223	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:35:25,090	[INFO]	224	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:35:25,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:35:28,433	[INFO]	225	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:35:28,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-19 01:35:31,655	[INFO]	226	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:35:31,659	[INFO]	227	SUCCESS	+2.0	
2020-12-19 01:35:31,660	[DEBUG]	
2020-12-19 01:35:32,696	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:35:33,711	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:35:34,712	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:35:35,918	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:35:37,028	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:35:40,437	[INFO]	233	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:35:41,437	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:35:42,415	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:35:45,896	[INFO]	236	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:35:45,897	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:35:45,897	[INFO]	237	SUCCESS	+2.0	
2020-12-19 01:35:45,898	[DEBUG]	
2020-12-19 01:35:46,844	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:35:47,812	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:35:48,823	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:35:52,071	[INFO]	241	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:35:52,073	[INFO]	242	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:35:52,073	[DEBUG]	
2020-12-19 01:35:52,074	[INFO]	243	SUCCESS	+2.0	
2020-12-19 01:35:52,074	[DEBUG]	
2020-12-19 01:35:53,024	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:35:56,321	[INFO]	245	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:35:56,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:35:56,323	[INFO]	246	SUCCESS	+2.0	
2020-12-19 01:35:56,323	[DEBUG]	
2020-12-19 01:35:59,633	[INFO]	247	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:35:59,635	[INFO]	248	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:35:59,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:36:00,624	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:36:01,639	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:36:01,643	[INFO]	251	SUCCESS	+2.0	
2020-12-19 01:36:01,644	[DEBUG]	
2020-12-19 01:36:02,646	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:36:06,031	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:36:06,032	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:36:06,033	[INFO]	254	SUCCESS	+2.0	
2020-12-19 01:36:06,033	[DEBUG]	
2020-12-19 01:36:07,025	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:36:08,020	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:36:11,363	[INFO]	257	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:36:11,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-19 01:36:12,319	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:36:13,302	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:36:14,321	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:36:14,323	[INFO]	261	SUCCESS	+2.0	
2020-12-19 01:36:14,324	[DEBUG]	
2020-12-19 01:36:17,660	[INFO]	262	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:36:18,629	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:36:22,013	[INFO]	264	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:36:22,954	[INFO]	265	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:36:23,957	[INFO]	266	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:36:24,951	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:36:26,165	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:36:27,171	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:36:30,508	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:36:30,509	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:36:31,449	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:36:34,854	[INFO]	272	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:36:34,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,28 ****
--- 21,31 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:36:38,093	[INFO]	273	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:36:38,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:36:39,100	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:36:39,101	[INFO]	275	SUCCESS	+2.0	
2020-12-19 01:36:39,102	[DEBUG]	
2020-12-19 01:36:39,103	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:36:42,420	[INFO]	277	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:36:42,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:36:42,421	[INFO]	278	SUCCESS	+2.0	
2020-12-19 01:36:42,422	[DEBUG]	
2020-12-19 01:36:43,470	[INFO]	279	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:36:44,474	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:36:45,482	[INFO]	281	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:36:48,809	[INFO]	282	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:36:49,775	[INFO]	283	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:36:50,793	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:36:54,091	[INFO]	285	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:36:54,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:36:54,094	[INFO]	286	SUCCESS	+2.0	
2020-12-19 01:36:54,095	[DEBUG]	
2020-12-19 01:36:57,354	[INFO]	287	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:36:58,334	[INFO]	288	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:36:59,330	[INFO]	289	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:37:00,333	[INFO]	290	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:37:01,321	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:37:02,338	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:37:05,634	[INFO]	293	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:37:05,635	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:37:06,638	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:37:06,641	[INFO]	295	SUCCESS	+2.0	
2020-12-19 01:37:06,642	[DEBUG]	
2020-12-19 01:37:09,919	[INFO]	296	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:37:10,920	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:37:11,893	[INFO]	298	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:37:15,183	[INFO]	299	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:37:18,439	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:37:18,440	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:37:21,580	[INFO]	301	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:37:21,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:37:22,505	[INFO]	302	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:37:23,450	[INFO]	303	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:37:26,705	[INFO]	304	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:37:26,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:37:29,893	[INFO]	305	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:37:29,894	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:37:33,172	[INFO]	306	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:37:33,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:37:36,521	[INFO]	307	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:37:36,521	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 01:37:36,522	[INFO]	308	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:37:36,523	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
              }
          }
  

2020-12-19 01:37:36,523	[INFO]	309	SUCCESS	+2.0	
2020-12-19 01:37:36,524	[DEBUG]	
2020-12-19 01:37:36,525	[INFO]	310	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:37:39,802	[INFO]	311	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:37:39,803	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:37:43,096	[INFO]	312	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:37:46,429	[INFO]	313	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:37:46,430	[INFO]	314	SUCCESS	+2.0	
2020-12-19 01:37:46,430	[DEBUG]	
2020-12-19 01:37:47,394	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:37:50,689	[INFO]	316	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:37:50,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:37:51,710	[INFO]	317	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:37:52,696	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:37:52,697	[INFO]	319	SUCCESS	+2.0	
2020-12-19 01:37:52,698	[DEBUG]	
2020-12-19 01:37:53,719	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:37:56,923	[INFO]	321	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:37:57,958	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:37:58,985	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:38:00,055	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:38:03,501	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:38:03,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:38:04,465	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:38:04,468	[INFO]	327	SUCCESS	+2.0	
2020-12-19 01:38:04,470	[DEBUG]	
2020-12-19 01:38:05,443	[INFO]	328	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:38:06,489	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:38:09,834	[INFO]	330	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:38:09,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:38:10,869	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:38:11,901	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:38:12,944	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:38:16,167	[INFO]	334	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:38:17,170	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:38:17,171	[INFO]	336	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:38:17,172	[INFO]	337	SUCCESS	+2.0	
2020-12-19 01:38:17,172	[DEBUG]	
2020-12-19 01:38:18,194	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:38:19,212	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:38:20,191	[INFO]	340	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:38:20,192	[INFO]	341	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:38:20,193	[DEBUG]	
2020-12-19 01:38:21,191	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:38:24,506	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:38:24,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:38:24,509	[INFO]	344	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:38:24,510	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:38:24,510	[INFO]	345	SUCCESS	+2.0	
2020-12-19 01:38:24,511	[DEBUG]	
2020-12-19 01:38:25,494	[INFO]	346	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:38:26,512	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:38:27,519	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:38:27,520	[INFO]	349	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:38:28,505	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:38:29,510	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:38:32,968	[INFO]	352	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:38:32,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:38:32,970	[INFO]	353	SUCCESS	+2.0	
2020-12-19 01:38:32,970	[DEBUG]	
2020-12-19 01:38:33,925	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:38:34,953	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:38:38,273	[INFO]	356	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:38:39,262	[INFO]	357	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:38:40,274	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:38:41,262	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:38:44,708	[INFO]	360	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:38:44,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:38:45,689	[INFO]	361	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:38:48,942	[INFO]	362	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:38:48,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,38 ****
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 24,37 ----
                  return distance;
              }
              visitedNodes.add(node);
+             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:38:52,226	[INFO]	363	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:38:55,515	[INFO]	364	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:38:55,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,38 ****
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 24,37 ----
                  return distance;
              }
              visitedNodes.add(node);
+             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:38:58,808	[INFO]	365	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:38:58,810	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:38:59,818	[INFO]	366	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:38:59,820	[INFO]	367	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:38:59,821	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:39:03,047	[INFO]	368	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:39:04,024	[INFO]	369	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:39:07,346	[INFO]	370	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:39:07,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:39:07,348	[INFO]	371	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:39:07,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:39:10,725	[INFO]	372	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:39:10,727	[INFO]	373	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:39:10,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:39:14,084	[INFO]	374	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:39:14,086	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 33,38 ****
--- 33,40 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:39:15,048	[INFO]	375	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:39:16,051	[INFO]	376	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:39:19,383	[INFO]	377	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:39:19,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:39:20,378	[INFO]	378	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:39:21,364	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:39:21,365	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:39:21,366	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:39:21,367	[INFO]	381	SUCCESS	+2.0	
2020-12-19 01:39:21,367	[DEBUG]	
2020-12-19 01:39:24,629	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:39:24,630	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:39:27,890	[INFO]	383	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:39:31,214	[INFO]	384	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:39:32,188	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:39:35,589	[INFO]	386	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:39:36,516	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:39:36,517	[INFO]	388	SUCCESS	+2.0	
2020-12-19 01:39:36,517	[DEBUG]	
2020-12-19 01:39:37,590	[INFO]	389	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:39:37,595	[INFO]	390	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:39:40,989	[INFO]	391	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:39:40,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:39:41,951	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:39:42,907	[INFO]	393	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:39:42,908	[INFO]	394	SUCCESS	+2.0	
2020-12-19 01:39:42,908	[DEBUG]	
2020-12-19 01:39:46,264	[INFO]	395	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:39:46,265	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:39:46,266	[INFO]	396	SUCCESS	+2.0	
2020-12-19 01:39:46,266	[DEBUG]	
2020-12-19 01:39:47,268	[INFO]	397	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:39:50,648	[INFO]	398	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:39:51,553	[INFO]	399	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:39:51,555	[INFO]	400	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:39:51,555	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:39:51,556	[INFO]	401	SUCCESS	+2.0	
2020-12-19 01:39:51,556	[DEBUG]	
2020-12-19 01:39:52,530	[INFO]	402	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:39:52,532	[INFO]	403	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:39:52,532	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:39:53,541	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:39:53,543	[INFO]	405	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:39:53,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:39:53,544	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:39:53,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:40:08,602	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:40:08,604	[INFO]	408	SUCCESS	+2.0	
2020-12-19 01:40:08,604	[DEBUG]	
2020-12-19 01:40:08,606	[INFO]	409	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:40:09,505	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:40:10,380	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:40:11,291	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:40:12,152	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:40:15,170	[INFO]	414	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:40:15,172	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:40:15,173	[INFO]	415	SUCCESS	+2.0	
2020-12-19 01:40:15,174	[DEBUG]	
2020-12-19 01:40:16,170	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:40:19,402	[INFO]	417	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:40:22,711	[INFO]	418	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:40:22,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:40:22,713	[INFO]	419	SUCCESS	+2.0	
2020-12-19 01:40:22,713	[DEBUG]	
2020-12-19 01:40:26,094	[INFO]	420	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:40:26,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:40:29,319	[INFO]	421	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:40:30,339	[INFO]	422	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:40:30,340	[INFO]	423	SUCCESS	+2.0	
2020-12-19 01:40:30,340	[DEBUG]	
2020-12-19 01:40:30,341	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:40:30,341	[DEBUG]	
2020-12-19 01:40:30,342	[INFO]	425	SUCCESS	+2.0	
2020-12-19 01:40:30,342	[DEBUG]	
2020-12-19 01:40:31,332	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:40:32,282	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:40:33,363	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:40:37,291	[INFO]	429	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:40:38,449	[INFO]	430	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:40:42,770	[INFO]	431	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:40:43,975	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:40:43,976	[INFO]	433	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:40:43,977	[DEBUG]	
2020-12-19 01:40:43,977	[INFO]	434	SUCCESS	+2.0	
2020-12-19 01:40:43,978	[DEBUG]	
2020-12-19 01:40:47,621	[INFO]	435	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:40:48,599	[INFO]	436	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:40:49,606	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:40:50,559	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:40:50,561	[INFO]	439	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:40:51,552	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:40:52,547	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:40:53,549	[INFO]	442	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:40:54,555	[INFO]	443	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:40:55,565	[INFO]	444	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:40:58,875	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:40:58,876	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 01:40:58,877	[INFO]	446	SUCCESS	+2.0	
2020-12-19 01:40:58,877	[DEBUG]	
2020-12-19 01:40:59,847	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:41:03,106	[INFO]	448	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:41:03,107	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:41:06,416	[INFO]	449	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:41:06,417	[INFO]	450	SUCCESS	+2.0	
2020-12-19 01:41:06,417	[DEBUG]	
2020-12-19 01:41:09,782	[INFO]	451	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:41:13,085	[INFO]	452	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:41:14,066	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:41:17,417	[INFO]	454	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:41:17,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:17,420	[INFO]	455	SUCCESS	+2.0	
2020-12-19 01:41:17,420	[DEBUG]	
2020-12-19 01:41:20,671	[INFO]	456	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:41:24,006	[INFO]	457	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:41:24,007	[INFO]	458	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:41:24,991	[INFO]	459	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:41:24,993	[INFO]	460	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:41:24,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:41:24,994	[INFO]	461	SUCCESS	+2.0	
2020-12-19 01:41:24,995	[DEBUG]	
2020-12-19 01:41:25,983	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:41:27,017	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:41:30,336	[INFO]	464	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:41:30,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:41:30,337	[INFO]	465	SUCCESS	+2.0	
2020-12-19 01:41:30,338	[DEBUG]	
2020-12-19 01:41:31,301	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:41:34,606	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:41:34,606	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:37,737	[INFO]	468	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:41:37,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:41:37,739	[INFO]	469	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:41:37,739	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:37,740	[INFO]	470	SUCCESS	+2.0	
2020-12-19 01:41:37,740	[DEBUG]	
2020-12-19 01:41:41,056	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:41:41,057	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:41,059	[INFO]	472	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:41:41,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:42,056	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:41:43,027	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:41:43,029	[INFO]	475	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:41:43,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:44,017	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:41:44,018	[INFO]	477	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:41:44,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:44,020	[INFO]	478	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:41:44,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:44,021	[INFO]	479	SUCCESS	+2.0	
2020-12-19 01:41:44,021	[DEBUG]	
2020-12-19 01:41:45,019	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:41:46,071	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:41:47,103	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:41:50,345	[INFO]	483	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:41:51,325	[INFO]	484	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:41:54,586	[INFO]	485	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:41:57,780	[INFO]	486	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:41:58,796	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:41:58,801	[INFO]	488	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:41:58,802	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:58,806	[INFO]	489	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:41:58,807	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:41:58,810	[INFO]	490	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:41:58,812	[DEBUG]	
2020-12-19 01:41:58,815	[INFO]	491	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:41:58,816	[DEBUG]	
2020-12-19 01:41:58,819	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:41:58,821	[INFO]	493	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:41:58,822	[DEBUG]	
2020-12-19 01:41:58,824	[INFO]	494	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:41:58,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:42:02,061	[INFO]	495	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:42:02,982	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:42:02,984	[INFO]	497	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:42:02,984	[DEBUG]	
2020-12-19 01:42:02,985	[INFO]	498	SUCCESS	+2.0	
2020-12-19 01:42:02,985	[DEBUG]	
2020-12-19 01:42:04,012	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:42:04,980	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:42:04,980	[INFO]	==== END ====
2020-12-19 01:42:04,980	[INFO]	Reason: step budget
2020-12-19 01:42:04,981	[INFO]	
2020-12-19 01:42:04,981	[INFO]	========== EPOCH 9 ==========
2020-12-19 01:42:04,981	[INFO]	==== WARMUP ====
2020-12-19 01:42:08,241	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:42:08,242	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:42:11,516	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:42:11,517	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:42:14,785	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:42:14,785	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:42:17,933	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 01:42:17,933	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:42:17,933	[INFO]	==== START ====
2020-12-19 01:42:18,923	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:42:19,903	[INFO]	2	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:42:23,275	[INFO]	3	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:42:26,555	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:42:26,556	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:42:26,556	[INFO]	5	SUCCESS	+2.0	
2020-12-19 01:42:26,557	[DEBUG]	
2020-12-19 01:42:27,552	[INFO]	6	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:42:30,950	[INFO]	7	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:42:30,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:42:31,904	[INFO]	8	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:42:31,906	[INFO]	9	SUCCESS	+2.0	
2020-12-19 01:42:31,906	[DEBUG]	
2020-12-19 01:42:32,918	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:42:33,878	[INFO]	11	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:42:34,862	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:42:38,216	[INFO]	13	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:42:38,218	[INFO]	14	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:42:41,506	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:42:41,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-19 01:42:41,508	[INFO]	16	SUCCESS	+2.0	
2020-12-19 01:42:41,508	[DEBUG]	
2020-12-19 01:42:56,576	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:42:57,465	[INFO]	18	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:42:58,362	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:42:58,364	[INFO]	20	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:42:58,364	[DEBUG]	
2020-12-19 01:42:59,236	[INFO]	21	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:42:59,237	[INFO]	22	SUCCESS	+2.0	
2020-12-19 01:42:59,237	[DEBUG]	
2020-12-19 01:42:59,238	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:43:00,152	[INFO]	24	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:43:03,240	[INFO]	25	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:43:03,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 01:43:03,242	[INFO]	26	SUCCESS	+2.0	
2020-12-19 01:43:03,243	[DEBUG]	
2020-12-19 01:43:04,247	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:43:07,588	[INFO]	28	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:43:07,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:10,874	[INFO]	29	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:43:10,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:11,882	[INFO]	30	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:43:11,883	[INFO]	31	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:43:11,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:11,885	[INFO]	32	SUCCESS	+2.0	
2020-12-19 01:43:11,885	[DEBUG]	
2020-12-19 01:43:12,870	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:43:13,872	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:43:17,170	[INFO]	35	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:43:17,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:18,150	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:43:18,151	[INFO]	37	SUCCESS	+2.0	
2020-12-19 01:43:18,152	[DEBUG]	
2020-12-19 01:43:19,147	[INFO]	38	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:43:19,149	[INFO]	39	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:43:19,149	[DEBUG]	
2020-12-19 01:43:22,401	[INFO]	40	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:43:23,385	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:43:23,387	[INFO]	42	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:43:23,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:43:26,802	[INFO]	43	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:43:27,758	[INFO]	44	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:43:31,025	[INFO]	45	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:43:31,026	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:43:31,027	[INFO]	46	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:43:31,028	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:43:34,340	[INFO]	47	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:43:34,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 45,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:43:37,647	[INFO]	48	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:43:37,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:43:37,649	[INFO]	49	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:43:37,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:38,657	[INFO]	50	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:43:38,660	[INFO]	51	SUCCESS	+2.0	
2020-12-19 01:43:38,660	[DEBUG]	
2020-12-19 01:43:39,725	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:43:39,726	[INFO]	53	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:43:40,746	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:43:40,748	[INFO]	55	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:43:41,734	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:43:45,047	[INFO]	57	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:43:45,996	[INFO]	58	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:43:45,997	[INFO]	59	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:43:45,998	[DEBUG]	
2020-12-19 01:43:45,998	[INFO]	60	SUCCESS	+2.0	
2020-12-19 01:43:45,999	[DEBUG]	
2020-12-19 01:43:47,002	[INFO]	61	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:43:47,997	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:43:49,017	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:43:52,259	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:43:52,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:43:52,260	[INFO]	65	SUCCESS	+2.0	
2020-12-19 01:43:52,261	[DEBUG]	
2020-12-19 01:43:52,262	[INFO]	66	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:43:55,593	[INFO]	67	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:43:55,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:56,580	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:43:57,599	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:43:58,596	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:43:58,597	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:43:58,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:43:59,637	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:44:00,655	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:44:03,909	[INFO]	74	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:44:04,893	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:44:05,896	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:44:06,928	[INFO]	77	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:44:10,188	[INFO]	78	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:44:10,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 48,53 ****
--- 49,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:10,191	[INFO]	79	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:44:10,192	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 48,53 ****
--- 49,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:10,193	[INFO]	80	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:44:10,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 48,53 ****
--- 49,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:11,194	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:44:11,196	[INFO]	82	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:44:11,197	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 48,53 ****
--- 49,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:11,198	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:44:11,198	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:11,199	[INFO]	84	SUCCESS	+2.0	
2020-12-19 01:44:11,199	[DEBUG]	
2020-12-19 01:44:12,186	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:44:12,187	[INFO]	86	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:44:12,188	[DEBUG]	
2020-12-19 01:44:15,521	[INFO]	87	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:44:15,523	[INFO]	88	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:44:18,740	[INFO]	89	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:44:18,741	[INFO]	90	SUCCESS	+2.0	
2020-12-19 01:44:18,742	[DEBUG]	
2020-12-19 01:44:18,743	[INFO]	91	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:44:18,743	[DEBUG]	
2020-12-19 01:44:18,743	[INFO]	92	SUCCESS	+2.0	
2020-12-19 01:44:18,744	[DEBUG]	
2020-12-19 01:44:19,690	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:44:20,684	[INFO]	94	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:44:23,993	[INFO]	95	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:44:27,295	[INFO]	96	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:44:27,296	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:44:27,297	[INFO]	97	SUCCESS	+2.0	
2020-12-19 01:44:27,297	[DEBUG]	
2020-12-19 01:44:30,489	[INFO]	98	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:44:30,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:44:31,394	[INFO]	99	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:44:31,395	[INFO]	100	SUCCESS	+2.0	
2020-12-19 01:44:31,395	[DEBUG]	
2020-12-19 01:44:31,397	[INFO]	101	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:44:31,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:44:31,398	[INFO]	102	SUCCESS	+2.0	
2020-12-19 01:44:31,398	[DEBUG]	
2020-12-19 01:44:46,457	[INFO]	103	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:44:47,387	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:44:50,526	[INFO]	105	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:44:50,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:44:51,392	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:44:51,393	[INFO]	107	SUCCESS	+2.0	
2020-12-19 01:44:51,393	[DEBUG]	
2020-12-19 01:44:52,289	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:44:52,290	[INFO]	109	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:44:53,200	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:44:54,063	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:44:55,027	[INFO]	112	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:44:56,021	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:44:59,376	[INFO]	114	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:44:59,377	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:44:59,377	[INFO]	115	SUCCESS	+2.0	
2020-12-19 01:44:59,378	[DEBUG]	
2020-12-19 01:44:59,379	[INFO]	116	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:44:59,379	[DEBUG]	
2020-12-19 01:44:59,380	[INFO]	117	SUCCESS	+2.0	
2020-12-19 01:44:59,380	[DEBUG]	
2020-12-19 01:45:00,348	[INFO]	118	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:45:03,665	[INFO]	119	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:45:03,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 01:45:04,663	[INFO]	120	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:45:04,664	[INFO]	121	SUCCESS	+2.0	
2020-12-19 01:45:04,664	[DEBUG]	
2020-12-19 01:45:07,976	[INFO]	122	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:45:08,970	[INFO]	123	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:45:09,936	[INFO]	124	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:45:10,949	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 01:45:26,033	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:45:26,034	[INFO]	127	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:45:26,906	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:45:29,898	[INFO]	129	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:45:29,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:45:29,899	[INFO]	130	SUCCESS	+2.0	
2020-12-19 01:45:29,900	[DEBUG]	
2020-12-19 01:45:29,900	[INFO]	131	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:45:30,777	[INFO]	132	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:45:31,652	[INFO]	133	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:45:32,553	[INFO]	134	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:45:33,548	[INFO]	135	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:45:34,572	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:45:35,647	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:45:35,650	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:45:36,696	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:45:36,698	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:45:39,893	[INFO]	141	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:45:43,182	[INFO]	142	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:45:46,481	[INFO]	143	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:45:46,482	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 01:45:47,519	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:45:48,580	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:45:51,891	[INFO]	146	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:45:51,892	[INFO]	147	SUCCESS	+2.0	
2020-12-19 01:45:51,892	[DEBUG]	
2020-12-19 01:45:51,893	[INFO]	148	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:45:51,893	[DEBUG]	
2020-12-19 01:45:55,166	[INFO]	149	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:45:55,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 01:45:55,168	[INFO]	150	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:45:55,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 01:45:55,169	[INFO]	151	SUCCESS	+2.0	
2020-12-19 01:45:55,170	[DEBUG]	
2020-12-19 01:45:55,170	[INFO]	152	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:45:58,460	[INFO]	153	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:45:58,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 01:45:58,463	[INFO]	154	SUCCESS	+2.0	
2020-12-19 01:45:58,463	[DEBUG]	
2020-12-19 01:46:01,801	[INFO]	155	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:46:01,802	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:46:05,029	[INFO]	156	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:46:08,394	[INFO]	157	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:46:08,395	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 38,43 ****
--- 36,43 ----
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
+ 
+         Node minNode = null;
  
          return Integer.MAX_VALUE;
      }

2020-12-19 01:46:11,640	[INFO]	158	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:46:11,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 01:46:14,886	[INFO]	159	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:46:14,887	[INFO]	160	SUCCESS	+2.0	
2020-12-19 01:46:14,887	[DEBUG]	
2020-12-19 01:46:18,201	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:46:18,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      continue;
                  }
  

2020-12-19 01:46:18,203	[INFO]	162	SUCCESS	+2.0	
2020-12-19 01:46:18,203	[DEBUG]	
2020-12-19 01:46:19,156	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:46:22,428	[INFO]	164	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:46:22,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:46:25,779	[INFO]	165	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:46:26,793	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:46:26,794	[INFO]	167	SUCCESS	+2.0	
2020-12-19 01:46:26,795	[DEBUG]	
2020-12-19 01:46:30,128	[INFO]	168	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:46:30,131	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:46:30,137	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:46:30,138	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             Node minNode = null;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 01:46:30,141	[INFO]	170	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:46:30,142	[DEBUG]	
2020-12-19 01:46:33,319	[INFO]	171	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:46:33,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:46:34,242	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:46:34,245	[INFO]	173	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:46:34,246	[DEBUG]	
2020-12-19 01:46:34,248	[INFO]	174	SUCCESS	+2.0	
2020-12-19 01:46:34,249	[DEBUG]	
2020-12-19 01:46:35,273	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:46:36,266	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:46:37,242	[INFO]	177	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:46:40,564	[INFO]	178	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:46:43,856	[INFO]	179	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:46:44,847	[INFO]	180	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:46:45,837	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:46:46,806	[INFO]	182	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:46:46,807	[INFO]	183	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:46:46,808	[DEBUG]	
2020-12-19 01:46:46,808	[INFO]	184	SUCCESS	+2.0	
2020-12-19 01:46:46,809	[DEBUG]	
2020-12-19 01:46:46,810	[INFO]	185	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:46:50,034	[INFO]	186	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:46:50,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:46:50,977	[INFO]	187	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:46:51,942	[INFO]	188	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:46:51,946	[INFO]	189	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:46:51,948	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:46:55,229	[INFO]	190	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:46:55,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:46:55,231	[INFO]	191	SUCCESS	+2.0	
2020-12-19 01:46:55,232	[DEBUG]	
2020-12-19 01:46:56,233	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:46:57,215	[INFO]	193	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:47:00,579	[INFO]	194	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:47:00,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:01,574	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:47:01,577	[INFO]	196	SUCCESS	+2.0	
2020-12-19 01:47:01,579	[DEBUG]	
2020-12-19 01:47:01,582	[INFO]	197	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:47:01,584	[INFO]	198	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:47:01,587	[INFO]	199	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:47:01,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:47:02,574	[INFO]	200	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:47:02,576	[INFO]	201	SUCCESS	+2.0	
2020-12-19 01:47:02,577	[DEBUG]	
2020-12-19 01:47:03,566	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:47:04,534	[INFO]	203	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:47:05,558	[INFO]	204	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:47:08,906	[INFO]	205	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:47:08,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:47:08,908	[INFO]	206	SUCCESS	+2.0	
2020-12-19 01:47:08,908	[DEBUG]	
2020-12-19 01:47:12,237	[INFO]	207	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:47:12,240	[INFO]	208	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:47:12,241	[DEBUG]	
2020-12-19 01:47:13,185	[INFO]	209	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:47:13,186	[INFO]	210	SUCCESS	+2.0	
2020-12-19 01:47:13,187	[DEBUG]	
2020-12-19 01:47:16,429	[INFO]	211	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:47:17,416	[INFO]	212	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:47:17,417	[INFO]	213	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:47:20,703	[INFO]	214	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:47:20,704	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:47:20,705	[INFO]	215	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:47:20,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:47:20,706	[INFO]	216	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:47:20,707	[DEBUG]	
2020-12-19 01:47:20,707	[INFO]	217	SUCCESS	+2.0	
2020-12-19 01:47:20,708	[DEBUG]	
2020-12-19 01:47:21,672	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:47:25,052	[INFO]	219	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:47:26,000	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:47:29,339	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:47:29,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:32,740	[INFO]	222	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:47:32,741	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:47:36,094	[INFO]	223	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:47:36,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,39 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:47:37,060	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:47:37,061	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:47:37,062	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,41 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:47:37,063	[INFO]	226	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:47:37,063	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:40,465	[INFO]	227	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:47:40,466	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,33 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 26,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:40,467	[INFO]	228	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:47:40,468	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:40,469	[INFO]	229	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:47:40,469	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:47:40,470	[INFO]	230	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:47:40,470	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:47:40,471	[INFO]	231	SUCCESS	+2.0	
2020-12-19 01:47:40,471	[DEBUG]	
2020-12-19 01:47:41,439	[INFO]	232	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:47:44,767	[INFO]	233	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:47:44,768	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:47:59,829	[INFO]	234	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:48:02,759	[INFO]	235	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:48:02,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 52,57 ****
--- 56,68 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:48:02,762	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:48:02,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:48:05,756	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:48:05,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 52,57 ****
--- 53,65 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 01:48:09,067	[INFO]	238	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:48:09,068	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 01:48:10,063	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:48:10,068	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:48:10,071	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 01:48:10,075	[INFO]	241	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:48:10,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 01:48:13,269	[INFO]	242	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:48:13,271	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:48:14,208	[INFO]	243	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:48:17,461	[INFO]	244	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:48:17,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:48:17,463	[INFO]	245	SUCCESS	+2.0	
2020-12-19 01:48:17,463	[DEBUG]	
2020-12-19 01:48:18,442	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:48:19,460	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:48:20,488	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:48:21,448	[INFO]	249	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:48:24,769	[INFO]	250	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:48:24,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 01:48:24,770	[INFO]	251	SUCCESS	+2.0	
2020-12-19 01:48:24,771	[DEBUG]	
2020-12-19 01:48:25,795	[INFO]	252	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:48:26,796	[INFO]	253	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:48:30,094	[INFO]	254	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:48:30,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:48:33,420	[INFO]	255	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:48:33,421	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (unvisitedNodes.get(nextnode) != null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:48:33,422	[INFO]	256	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:48:33,422	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 01:48:34,439	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:48:34,442	[INFO]	258	SUCCESS	+2.0	
2020-12-19 01:48:34,443	[DEBUG]	
2020-12-19 01:48:35,445	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:48:36,458	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:48:39,836	[INFO]	261	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:48:43,076	[INFO]	262	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:48:43,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:48:43,078	[INFO]	263	SUCCESS	+2.0	
2020-12-19 01:48:43,078	[DEBUG]	
2020-12-19 01:48:44,085	[INFO]	264	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:48:45,121	[INFO]	265	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:48:46,148	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:48:47,149	[INFO]	267	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:48:50,450	[INFO]	268	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:48:53,726	[INFO]	269	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:48:53,727	[INFO]	270	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:48:53,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:48:53,729	[INFO]	271	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:48:53,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:48:54,631	[INFO]	272	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:48:55,639	[INFO]	273	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:48:56,576	[INFO]	274	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:48:57,494	[INFO]	275	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:49:00,854	[INFO]	276	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:49:01,746	[INFO]	277	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:49:01,747	[INFO]	278	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:49:01,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:49:02,648	[INFO]	279	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:49:03,565	[INFO]	280	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:49:04,493	[INFO]	281	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:49:05,439	[INFO]	282	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:49:08,672	[INFO]	283	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:49:08,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:49:11,811	[INFO]	284	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:49:12,759	[INFO]	285	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:49:12,761	[INFO]	286	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:49:13,735	[INFO]	287	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:49:13,736	[INFO]	288	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:49:13,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:49:16,968	[INFO]	289	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:49:16,969	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:49:32,027	[INFO]	290	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:49:32,953	[INFO]	291	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:49:35,911	[INFO]	292	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:49:35,912	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:49:35,913	[INFO]	293	SUCCESS	+2.0	
2020-12-19 01:49:35,913	[DEBUG]	
2020-12-19 01:49:39,021	[INFO]	294	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:49:39,023	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 01:49:39,025	[INFO]	295	SUCCESS	+2.0	
2020-12-19 01:49:39,026	[DEBUG]	
2020-12-19 01:49:40,004	[INFO]	296	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:49:40,006	[INFO]	297	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:49:40,006	[DEBUG]	
2020-12-19 01:49:40,007	[INFO]	298	SUCCESS	+2.0	
2020-12-19 01:49:40,007	[DEBUG]	
2020-12-19 01:49:43,374	[INFO]	299	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:49:44,379	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:49:45,388	[INFO]	301	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:49:45,390	[INFO]	302	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:49:45,390	[DEBUG]	
2020-12-19 01:49:46,448	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:49:46,451	[INFO]	304	SUCCESS	+2.0	
2020-12-19 01:49:46,451	[DEBUG]	
2020-12-19 01:49:46,454	[INFO]	305	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:49:46,455	[DEBUG]	
2020-12-19 01:49:46,456	[INFO]	306	SUCCESS	+2.0	
2020-12-19 01:49:46,457	[DEBUG]	
2020-12-19 01:49:47,447	[INFO]	307	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:49:50,780	[INFO]	308	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:49:50,782	[INFO]	309	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:49:50,782	[DEBUG]	
2020-12-19 01:49:54,092	[INFO]	310	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:49:54,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:49:57,329	[INFO]	311	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:49:57,331	[INFO]	312	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:49:57,331	[DEBUG]	
2020-12-19 01:50:00,532	[INFO]	313	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:50:00,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:50:01,483	[INFO]	314	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:50:01,484	[INFO]	315	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:50:01,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:50:01,485	[INFO]	316	SUCCESS	+2.0	
2020-12-19 01:50:01,486	[DEBUG]	
2020-12-19 01:50:02,488	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:50:05,829	[INFO]	318	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:50:09,222	[INFO]	319	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:50:09,223	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:50:10,214	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:50:11,246	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:50:11,249	[INFO]	322	SUCCESS	+2.0	
2020-12-19 01:50:11,250	[DEBUG]	
2020-12-19 01:50:14,521	[INFO]	323	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:50:14,522	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:50:14,522	[INFO]	324	SUCCESS	+2.0	
2020-12-19 01:50:14,523	[DEBUG]	
2020-12-19 01:50:17,858	[INFO]	325	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:50:17,860	[INFO]	326	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:50:18,849	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:50:18,852	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:50:19,863	[INFO]	329	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:50:20,857	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:50:20,862	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:50:20,863	[DEBUG]	
2020-12-19 01:50:20,865	[INFO]	332	SUCCESS	+2.0	
2020-12-19 01:50:20,866	[DEBUG]	
2020-12-19 01:50:21,883	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:50:21,884	[INFO]	334	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:50:21,885	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:50:22,877	[INFO]	335	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 01:50:22,878	[INFO]	336	SUCCESS	+2.0	
2020-12-19 01:50:22,878	[DEBUG]	
2020-12-19 01:50:23,861	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:50:27,102	[INFO]	338	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:50:28,084	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:50:28,088	[INFO]	340	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:50:28,090	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:50:28,092	[INFO]	341	SUCCESS	+2.0	
2020-12-19 01:50:28,092	[DEBUG]	
2020-12-19 01:50:31,397	[INFO]	342	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:50:31,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 01:50:31,399	[INFO]	343	SUCCESS	+2.0	
2020-12-19 01:50:31,399	[DEBUG]	
2020-12-19 01:50:34,684	[INFO]	344	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:50:34,685	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:50:34,686	[INFO]	345	SUCCESS	+2.0	
2020-12-19 01:50:34,686	[DEBUG]	
2020-12-19 01:50:35,884	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:50:37,274	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:50:38,532	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:50:38,534	[INFO]	349	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:50:39,867	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:50:43,241	[INFO]	351	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:50:44,233	[INFO]	352	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:50:47,569	[INFO]	353	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:50:47,570	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:50:47,571	[INFO]	354	SUCCESS	+2.0	
2020-12-19 01:50:47,571	[DEBUG]	
2020-12-19 01:50:48,512	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:50:49,512	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:50:50,548	[INFO]	357	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:50:53,767	[INFO]	358	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:50:54,751	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:50:55,763	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:50:56,768	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:50:57,760	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:50:57,762	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:50:58,789	[INFO]	364	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:50:59,808	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:51:00,793	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:51:00,794	[INFO]	367	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:51:00,795	[DEBUG]	
2020-12-19 01:51:00,795	[INFO]	368	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:51:01,780	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:51:01,781	[INFO]	370	SUCCESS	+2.0	
2020-12-19 01:51:01,781	[DEBUG]	
2020-12-19 01:51:05,095	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:51:05,096	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:51:06,086	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:51:06,088	[INFO]	373	SUCCESS	+2.0	
2020-12-19 01:51:06,089	[DEBUG]	
2020-12-19 01:51:06,092	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:51:09,329	[INFO]	375	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:51:09,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:51:12,540	[INFO]	376	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:51:12,541	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:51:12,542	[INFO]	377	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:51:12,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:51:13,473	[INFO]	378	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:51:13,475	[INFO]	379	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:51:13,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:51:14,412	[INFO]	380	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:51:17,680	[INFO]	381	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:51:17,681	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:51:18,683	[INFO]	382	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:51:21,917	[INFO]	383	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:51:22,961	[INFO]	384	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:51:23,955	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:51:23,957	[INFO]	386	SUCCESS	+2.0	
2020-12-19 01:51:23,957	[DEBUG]	
2020-12-19 01:51:24,959	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:51:28,220	[INFO]	388	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:51:29,225	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:51:30,234	[INFO]	390	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:51:31,178	[INFO]	391	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:51:32,200	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:51:32,205	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:51:33,254	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:51:34,327	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:51:35,343	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:51:35,346	[INFO]	397	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:51:36,351	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:51:39,677	[INFO]	399	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:51:39,678	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-19 01:51:39,679	[INFO]	400	SUCCESS	+2.0	
2020-12-19 01:51:39,679	[DEBUG]	
2020-12-19 01:51:43,094	[INFO]	401	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:51:43,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:51:43,096	[INFO]	402	SUCCESS	+2.0	
2020-12-19 01:51:43,096	[DEBUG]	
2020-12-19 01:51:43,097	[INFO]	403	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:51:44,121	[INFO]	404	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:51:47,473	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:51:47,475	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:51:47,477	[INFO]	406	SUCCESS	+2.0	
2020-12-19 01:51:47,478	[DEBUG]	
2020-12-19 01:51:48,428	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:51:49,416	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 01:51:50,395	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:51:51,396	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:51:52,415	[INFO]	411	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:51:53,410	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:51:56,683	[INFO]	413	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:51:59,926	[INFO]	414	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:51:59,928	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 01:51:59,929	[INFO]	416	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:51:59,930	[INFO]	417	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:51:59,930	[DEBUG]	
2020-12-19 01:52:00,931	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:52:01,940	[INFO]	419	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:52:05,207	[INFO]	420	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:52:06,192	[INFO]	421	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:52:06,193	[INFO]	422	SUCCESS	+2.0	
2020-12-19 01:52:06,194	[DEBUG]	
2020-12-19 01:52:07,194	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:52:07,196	[INFO]	424	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:52:08,216	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:52:11,473	[INFO]	426	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:52:11,474	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:52:12,409	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:52:15,633	[INFO]	429	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:52:15,634	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,41 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 25,32 ----
              }
              visitedNodes.add(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
          }
  

2020-12-19 01:52:15,635	[INFO]	430	SUCCESS	+2.0	
2020-12-19 01:52:15,635	[DEBUG]	
2020-12-19 01:52:16,598	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:52:17,579	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:52:17,581	[INFO]	433	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:52:20,971	[INFO]	434	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:52:20,972	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:52:20,973	[INFO]	435	SUCCESS	+2.0	
2020-12-19 01:52:20,973	[DEBUG]	
2020-12-19 01:52:24,133	[INFO]	436	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:52:25,128	[INFO]	437	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:52:25,130	[INFO]	438	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:52:25,132	[INFO]	439	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:52:25,132	[DEBUG]	
2020-12-19 01:52:25,133	[INFO]	440	SUCCESS	+2.0	
2020-12-19 01:52:25,134	[DEBUG]	
2020-12-19 01:52:26,105	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:52:27,156	[INFO]	442	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:52:27,160	[INFO]	443	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:52:30,454	[INFO]	444	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:52:30,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:52:30,456	[INFO]	445	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:52:30,457	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:52:31,356	[INFO]	446	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:52:32,290	[INFO]	447	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:52:35,657	[INFO]	448	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:52:38,913	[INFO]	449	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:52:39,872	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:52:54,943	[INFO]	451	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:53:09,994	[INFO]	452	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:53:10,820	[INFO]	453	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:53:10,821	[INFO]	454	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:53:10,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:53:10,823	[INFO]	455	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:53:10,823	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:53:10,824	[INFO]	456	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:53:10,824	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:53:11,637	[INFO]	457	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:53:11,638	[INFO]	458	SUCCESS	+2.0	
2020-12-19 01:53:11,639	[DEBUG]	
2020-12-19 01:53:14,678	[INFO]	459	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:53:17,570	[INFO]	460	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:53:18,597	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:53:19,630	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:53:19,633	[INFO]	463	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:53:20,621	[INFO]	464	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:53:21,632	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:53:22,619	[INFO]	466	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:53:25,897	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:53:25,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:53:25,899	[INFO]	468	SUCCESS	+2.0	
2020-12-19 01:53:25,899	[DEBUG]	
2020-12-19 01:53:26,881	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:53:27,884	[INFO]	470	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 01:53:42,944	[INFO]	471	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:53:45,853	[INFO]	472	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:53:45,853	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:53:45,854	[INFO]	473	SUCCESS	+2.0	
2020-12-19 01:53:45,854	[DEBUG]	
2020-12-19 01:53:45,856	[INFO]	474	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:53:46,751	[INFO]	475	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:53:47,624	[INFO]	476	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 01:53:48,594	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:53:49,607	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:53:50,604	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 01:53:51,599	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 01:53:52,628	[INFO]	481	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:53:53,646	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:53:54,656	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:53:57,976	[INFO]	484	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:53:57,977	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             visitedNodes.add(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 01:54:01,293	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:54:01,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             visitedNodes.add(node);
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,38 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:54:01,295	[INFO]	486	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 01:54:01,296	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:54:02,282	[INFO]	487	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:54:03,285	[INFO]	488	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:54:03,287	[INFO]	489	SUCCESS	+2.0	
2020-12-19 01:54:03,287	[DEBUG]	
2020-12-19 01:54:06,512	[INFO]	490	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:54:07,452	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:54:10,659	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:54:10,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:54:11,597	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:54:11,599	[INFO]	494	SUCCESS	+2.0	
2020-12-19 01:54:11,599	[DEBUG]	
2020-12-19 01:54:11,601	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 01:54:14,859	[INFO]	496	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:54:14,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:54:14,860	[INFO]	497	SUCCESS	+2.0	
2020-12-19 01:54:14,861	[DEBUG]	
2020-12-19 01:54:14,861	[INFO]	498	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 01:54:14,862	[DEBUG]	
2020-12-19 01:54:15,847	[INFO]	499	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:54:15,848	[INFO]	500	SUCCESS	+2.0	
2020-12-19 01:54:15,848	[DEBUG]	
2020-12-19 01:54:15,848	[INFO]	==== END ====
2020-12-19 01:54:15,848	[INFO]	Reason: step budget
2020-12-19 01:54:15,849	[INFO]	
2020-12-19 01:54:15,849	[INFO]	========== EPOCH 10 ==========
2020-12-19 01:54:15,849	[INFO]	==== WARMUP ====
2020-12-19 01:54:19,214	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:54:19,214	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:54:22,500	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:54:22,500	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:54:25,789	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 01:54:25,790	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:54:29,044	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 01:54:29,044	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 01:54:29,044	[INFO]	==== START ====
2020-12-19 01:54:30,055	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:54:33,335	[INFO]	2	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:54:34,322	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 01:54:35,379	[INFO]	4	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:54:38,687	[INFO]	5	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:54:38,688	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:54:38,689	[INFO]	6	SUCCESS	+2.0	
2020-12-19 01:54:38,689	[DEBUG]	
2020-12-19 01:54:39,659	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 01:54:54,718	[INFO]	8	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:54:55,565	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:54:56,453	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:54:57,345	[INFO]	11	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:55:00,145	[INFO]	12	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:55:01,082	[INFO]	13	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:55:02,063	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:55:05,386	[INFO]	15	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 01:55:05,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 01:55:05,388	[INFO]	16	SUCCESS	+2.0	
2020-12-19 01:55:05,388	[DEBUG]	
2020-12-19 01:55:06,390	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:55:09,747	[INFO]	18	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:55:10,725	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:55:14,034	[INFO]	20	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:55:14,982	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:55:15,956	[INFO]	22	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 01:55:19,244	[INFO]	23	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:55:19,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:55:19,246	[INFO]	24	SUCCESS	+2.0	
2020-12-19 01:55:19,247	[DEBUG]	
2020-12-19 01:55:22,409	[INFO]	25	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:55:22,411	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:55:25,705	[INFO]	26	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:55:25,706	[INFO]	27	SUCCESS	+2.0	
2020-12-19 01:55:25,706	[DEBUG]	
2020-12-19 01:55:28,929	[INFO]	28	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:55:29,910	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:55:29,911	[INFO]	30	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:55:29,912	[DEBUG]	
2020-12-19 01:55:29,912	[INFO]	31	SUCCESS	+2.0	
2020-12-19 01:55:29,912	[DEBUG]	
2020-12-19 01:55:44,992	[INFO]	32	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:55:45,884	[INFO]	33	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:55:46,870	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:55:50,186	[INFO]	35	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:55:51,147	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:55:52,185	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 01:55:53,192	[INFO]	38	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 01:55:54,187	[INFO]	39	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:55:55,179	[INFO]	40	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:55:56,188	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:55:57,173	[INFO]	42	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 01:55:58,169	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:56:01,470	[INFO]	44	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:56:01,471	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 01:56:02,466	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:56:02,468	[INFO]	46	SUCCESS	+2.0	
2020-12-19 01:56:02,468	[DEBUG]	
2020-12-19 01:56:03,431	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:56:06,774	[INFO]	48	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 01:56:10,008	[INFO]	49	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 01:56:10,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:56:10,010	[INFO]	50	SUCCESS	+2.0	
2020-12-19 01:56:10,010	[DEBUG]	
2020-12-19 01:56:10,995	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:56:14,301	[INFO]	52	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:56:17,528	[INFO]	53	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:56:17,530	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:56:17,532	[INFO]	54	SUCCESS	+2.0	
2020-12-19 01:56:17,533	[DEBUG]	
2020-12-19 01:56:18,560	[INFO]	55	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 01:56:21,823	[INFO]	56	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:56:21,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:56:21,826	[INFO]	57	SUCCESS	+2.0	
2020-12-19 01:56:21,827	[DEBUG]	
2020-12-19 01:56:21,828	[INFO]	58	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:56:22,771	[INFO]	59	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 01:56:23,763	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:56:38,822	[INFO]	61	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:56:39,747	[INFO]	62	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 01:56:40,663	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:56:40,665	[INFO]	64	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:56:43,698	[INFO]	65	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:56:43,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 01:56:44,564	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:56:45,460	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:56:45,462	[INFO]	68	SUCCESS	+2.0	
2020-12-19 01:56:45,462	[DEBUG]	
2020-12-19 01:56:46,412	[INFO]	69	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:56:49,667	[INFO]	70	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:56:52,936	[INFO]	71	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:56:56,159	[INFO]	72	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:56:56,160	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:56:59,455	[INFO]	73	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:56:59,457	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:56:59,460	[INFO]	74	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:56:59,461	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:56:59,462	[INFO]	75	SUCCESS	+2.0	
2020-12-19 01:56:59,463	[DEBUG]	
2020-12-19 01:56:59,466	[INFO]	76	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:57:00,457	[INFO]	77	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 01:57:03,766	[INFO]	78	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:57:03,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
                  minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 01:57:04,731	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:57:04,733	[INFO]	80	SUCCESS	+2.0	
2020-12-19 01:57:04,733	[DEBUG]	
2020-12-19 01:57:05,710	[INFO]	81	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:57:09,034	[INFO]	82	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:57:09,036	[INFO]	83	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:57:09,038	[INFO]	84	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 01:57:09,038	[DEBUG]	
2020-12-19 01:57:09,039	[INFO]	85	SUCCESS	+2.0	
2020-12-19 01:57:09,040	[DEBUG]	
2020-12-19 01:57:10,044	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:57:11,030	[INFO]	87	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:57:14,472	[INFO]	88	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:57:14,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:57:17,760	[INFO]	89	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:57:17,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:57:21,024	[INFO]	90	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:57:21,025	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:57:22,000	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 01:57:23,039	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:57:26,295	[INFO]	93	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:57:26,296	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 01:57:29,633	[INFO]	94	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:57:30,587	[INFO]	95	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:57:33,919	[INFO]	96	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:57:37,188	[INFO]	97	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:57:37,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:57:40,580	[INFO]	98	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:57:40,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.remove(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:57:41,564	[INFO]	99	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 01:57:44,825	[INFO]	100	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:57:44,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:57:48,071	[INFO]	101	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:57:48,072	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:57:48,073	[INFO]	102	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 01:57:48,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 01:57:48,075	[INFO]	103	SUCCESS	+2.0	
2020-12-19 01:57:48,075	[DEBUG]	
2020-12-19 01:57:49,054	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 01:57:50,053	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:57:51,036	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 01:57:52,040	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:57:53,045	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 01:57:56,412	[INFO]	109	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 01:57:56,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:57:57,382	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:58:00,705	[INFO]	111	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:58:01,715	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:58:01,717	[INFO]	113	SUCCESS	+2.0	
2020-12-19 01:58:01,717	[DEBUG]	
2020-12-19 01:58:04,994	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 01:58:04,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         unvisitedNodes.put(startnode, 0);
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 01:58:05,976	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:58:05,978	[INFO]	116	SUCCESS	+2.0	
2020-12-19 01:58:05,979	[DEBUG]	
2020-12-19 01:58:09,260	[INFO]	117	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 01:58:12,636	[INFO]	118	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 01:58:13,623	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 01:58:28,706	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:58:28,708	[INFO]	121	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:58:28,708	[DEBUG]	
2020-12-19 01:58:28,709	[INFO]	122	SUCCESS	+2.0	
2020-12-19 01:58:28,710	[DEBUG]	
2020-12-19 01:58:32,513	[INFO]	123	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:58:32,515	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 01:58:36,424	[INFO]	125	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:58:36,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 01:58:36,425	[INFO]	126	SUCCESS	+2.0	
2020-12-19 01:58:36,426	[DEBUG]	
2020-12-19 01:58:36,427	[INFO]	127	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:58:36,427	[DEBUG]	
2020-12-19 01:58:37,413	[INFO]	128	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 01:58:40,645	[INFO]	129	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:58:40,647	[INFO]	130	SUCCESS	+2.0	
2020-12-19 01:58:40,647	[DEBUG]	
2020-12-19 01:58:41,679	[INFO]	131	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:58:42,769	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 01:58:46,192	[INFO]	133	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 01:58:46,193	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 01:58:47,210	[INFO]	134	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 01:58:47,211	[INFO]	135	SUCCESS	+2.0	
2020-12-19 01:58:47,212	[DEBUG]	
2020-12-19 01:58:47,213	[INFO]	136	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 01:58:47,213	[DEBUG]	
2020-12-19 01:58:47,213	[INFO]	137	SUCCESS	+2.0	
2020-12-19 01:58:47,214	[DEBUG]	
2020-12-19 01:58:48,216	[INFO]	138	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 01:58:49,214	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:58:50,198	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 01:58:53,514	[INFO]	141	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 01:58:56,780	[INFO]	142	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 01:58:56,781	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 01:58:57,792	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:58:57,793	[INFO]	144	SUCCESS	+2.0	
2020-12-19 01:58:57,793	[DEBUG]	
2020-12-19 01:59:01,178	[INFO]	145	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:59:04,407	[INFO]	146	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:59:05,383	[INFO]	147	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:59:06,421	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 01:59:09,849	[INFO]	149	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:59:09,849	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:59:09,850	[INFO]	150	SUCCESS	+2.0	
2020-12-19 01:59:09,850	[DEBUG]	
2020-12-19 01:59:10,805	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:59:11,710	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 01:59:12,714	[INFO]	153	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:59:16,009	[INFO]	154	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:59:16,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:59:19,337	[INFO]	155	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 01:59:20,333	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:59:20,337	[INFO]	157	SUCCESS	+2.0	
2020-12-19 01:59:20,338	[DEBUG]	
2020-12-19 01:59:21,339	[INFO]	158	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:59:21,340	[INFO]	159	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 01:59:24,626	[INFO]	160	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:59:24,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 01:59:24,629	[INFO]	161	SUCCESS	+2.0	
2020-12-19 01:59:24,630	[DEBUG]	
2020-12-19 01:59:27,835	[INFO]	162	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 01:59:27,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 01:59:28,750	[INFO]	163	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 01:59:29,711	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 01:59:29,713	[INFO]	165	SUCCESS	+2.0	
2020-12-19 01:59:29,714	[DEBUG]	
2020-12-19 01:59:30,710	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 01:59:30,712	[INFO]	167	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 01:59:33,976	[INFO]	168	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:59:33,977	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:59:37,349	[INFO]	169	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:59:37,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:59:38,336	[INFO]	170	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 01:59:38,339	[INFO]	171	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 01:59:38,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 01:59:39,308	[INFO]	172	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 01:59:39,309	[INFO]	173	SUCCESS	+2.0	
2020-12-19 01:59:39,310	[DEBUG]	
2020-12-19 01:59:39,311	[INFO]	174	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 01:59:39,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 01:59:42,623	[INFO]	175	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 01:59:42,624	[INFO]	176	SUCCESS	+2.0	
2020-12-19 01:59:42,625	[DEBUG]	
2020-12-19 01:59:42,626	[INFO]	177	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 01:59:42,627	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 01:59:45,878	[INFO]	178	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 01:59:45,880	[INFO]	179	SUCCESS	+2.0	
2020-12-19 01:59:45,880	[DEBUG]	
2020-12-19 01:59:46,886	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 01:59:47,897	[INFO]	181	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 01:59:48,887	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 01:59:49,903	[INFO]	183	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 01:59:50,843	[INFO]	184	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 01:59:54,095	[INFO]	185	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 01:59:54,096	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 01:59:54,097	[INFO]	186	SUCCESS	+2.0	
2020-12-19 01:59:54,097	[DEBUG]	
2020-12-19 01:59:55,079	[INFO]	187	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 01:59:56,078	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 01:59:59,458	[INFO]	189	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:00:00,434	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:00:01,426	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:00:02,425	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:00:05,826	[INFO]	193	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:00:06,780	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:00:10,047	[INFO]	195	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:00:13,414	[INFO]	196	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:00:13,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:00:14,401	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:00:14,402	[INFO]	198	SUCCESS	+2.0	
2020-12-19 02:00:14,402	[DEBUG]	
2020-12-19 02:00:15,371	[INFO]	199	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:00:15,372	[INFO]	200	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:00:16,372	[INFO]	201	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:00:17,386	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:00:18,385	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:00:19,373	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:00:22,707	[INFO]	205	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:00:25,973	[INFO]	206	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:00:26,937	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:00:42,013	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:00:45,895	[INFO]	209	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:00:45,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:00:49,209	[INFO]	210	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:00:49,211	[INFO]	211	SUCCESS	+2.0	
2020-12-19 02:00:49,211	[DEBUG]	
2020-12-19 02:00:50,192	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:00:50,193	[INFO]	213	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:00:51,243	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:00:52,267	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:00:52,271	[INFO]	216	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:00:55,523	[INFO]	217	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:00:55,524	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:00:55,525	[INFO]	218	SUCCESS	+2.0	
2020-12-19 02:00:55,525	[DEBUG]	
2020-12-19 02:00:56,567	[INFO]	219	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:00:59,904	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:00:59,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 02:00:59,908	[INFO]	221	SUCCESS	+2.0	
2020-12-19 02:00:59,908	[DEBUG]	
2020-12-19 02:01:00,897	[INFO]	222	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:01:04,279	[INFO]	223	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:01:04,281	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:01:05,255	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:01:08,574	[INFO]	226	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:01:08,575	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:01:08,576	[INFO]	227	SUCCESS	+2.0	
2020-12-19 02:01:08,576	[DEBUG]	
2020-12-19 02:01:09,535	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:01:10,516	[INFO]	229	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:01:11,483	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:01:12,486	[INFO]	231	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:01:13,545	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:01:16,845	[INFO]	233	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:01:16,846	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:01:16,847	[INFO]	234	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:01:16,847	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:01:17,772	[INFO]	235	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:01:21,018	[INFO]	236	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:01:21,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:01:22,025	[INFO]	237	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:01:25,347	[INFO]	238	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:01:25,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,38 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:01:26,332	[INFO]	239	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:01:29,640	[INFO]	240	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:01:29,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:01:30,614	[INFO]	241	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:01:30,615	[INFO]	242	SUCCESS	+2.0	
2020-12-19 02:01:30,615	[DEBUG]	
2020-12-19 02:01:30,616	[INFO]	243	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:01:31,611	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:01:32,612	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:01:32,615	[INFO]	246	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:01:32,616	[DEBUG]	
2020-12-19 02:01:33,632	[INFO]	247	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:01:36,952	[INFO]	248	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:01:37,964	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:01:37,967	[INFO]	250	SUCCESS	+2.0	
2020-12-19 02:01:37,969	[DEBUG]	
2020-12-19 02:01:41,352	[INFO]	251	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:01:42,344	[INFO]	252	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:01:57,406	[INFO]	253	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:01:58,302	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:02:01,303	[INFO]	255	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:02:01,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:02:04,302	[INFO]	256	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:02:04,303	[INFO]	257	SUCCESS	+2.0	
2020-12-19 02:02:04,303	[DEBUG]	
2020-12-19 02:02:07,731	[INFO]	258	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:02:07,732	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 02:02:10,930	[INFO]	259	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:10,931	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:14,126	[INFO]	260	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:02:14,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:02:14,130	[INFO]	261	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:14,131	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:14,133	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:14,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:14,136	[INFO]	263	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:14,137	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:14,138	[INFO]	264	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:02:14,139	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 02:02:14,140	[INFO]	265	SUCCESS	+2.0	
2020-12-19 02:02:14,141	[DEBUG]	
2020-12-19 02:02:17,358	[INFO]	266	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:17,359	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:18,282	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:02:19,250	[INFO]	268	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:02:19,253	[INFO]	269	SUCCESS	+2.0	
2020-12-19 02:02:19,255	[DEBUG]	
2020-12-19 02:02:22,568	[INFO]	270	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:02:22,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 02:02:23,575	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:02:24,582	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:02:24,584	[INFO]	273	SUCCESS	+2.0	
2020-12-19 02:02:24,584	[DEBUG]	
2020-12-19 02:02:25,583	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:02:26,509	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:02:27,502	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:02:28,501	[INFO]	277	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:02:29,508	[INFO]	278	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:02:30,501	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:02:31,511	[INFO]	280	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:02:31,513	[INFO]	281	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:02:34,905	[INFO]	282	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:02:34,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,40 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:02:34,907	[INFO]	283	SUCCESS	+2.0	
2020-12-19 02:02:34,908	[DEBUG]	
2020-12-19 02:02:35,876	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:02:39,259	[INFO]	285	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:02:39,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:02:40,214	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:02:41,214	[INFO]	287	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:02:42,195	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:02:42,197	[INFO]	289	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:02:42,197	[DEBUG]	
2020-12-19 02:02:42,198	[INFO]	290	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:02:42,198	[DEBUG]	
2020-12-19 02:02:43,237	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:02:43,240	[INFO]	292	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:02:43,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:02:43,243	[INFO]	293	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:02:43,244	[DEBUG]	
2020-12-19 02:02:43,246	[INFO]	294	SUCCESS	+2.0	
2020-12-19 02:02:43,247	[DEBUG]	
2020-12-19 02:02:46,606	[INFO]	295	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:02:47,624	[INFO]	296	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:02:51,015	[INFO]	297	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:02:54,220	[INFO]	298	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:02:57,501	[INFO]	299	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:02:57,503	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:02:57,504	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:02:57,505	[INFO]	301	SUCCESS	+2.0	
2020-12-19 02:02:57,506	[DEBUG]	
2020-12-19 02:02:58,490	[INFO]	302	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:02:59,470	[INFO]	303	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:03:02,789	[INFO]	304	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:03:02,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:03:03,770	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:03:07,088	[INFO]	306	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:03:07,089	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:03:07,090	[INFO]	307	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:03:07,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:03:10,391	[INFO]	308	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:10,392	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:03:10,393	[INFO]	309	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:10,394	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:03:10,394	[INFO]	310	SUCCESS	+2.0	
2020-12-19 02:03:10,395	[DEBUG]	
2020-12-19 02:03:13,639	[INFO]	311	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:03:13,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:03:13,640	[INFO]	312	SUCCESS	+2.0	
2020-12-19 02:03:13,641	[DEBUG]	
2020-12-19 02:03:16,873	[INFO]	313	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:03:16,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 02:03:16,878	[INFO]	314	SUCCESS	+2.0	
2020-12-19 02:03:16,879	[DEBUG]	
2020-12-19 02:03:17,902	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:03:18,874	[INFO]	316	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:03:18,877	[INFO]	317	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:03:18,878	[DEBUG]	
2020-12-19 02:03:18,879	[INFO]	318	SUCCESS	+2.0	
2020-12-19 02:03:18,879	[DEBUG]	
2020-12-19 02:03:22,151	[INFO]	319	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:03:22,152	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:03:22,153	[INFO]	320	SUCCESS	+2.0	
2020-12-19 02:03:22,153	[DEBUG]	
2020-12-19 02:03:23,088	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:03:23,091	[INFO]	322	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:23,091	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:03:23,092	[INFO]	323	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:23,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:03:24,127	[INFO]	324	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:03:24,128	[INFO]	325	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:24,129	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:03:27,390	[INFO]	326	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:03:28,425	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:03:29,355	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:03:29,357	[INFO]	329	SUCCESS	+2.0	
2020-12-19 02:03:29,358	[DEBUG]	
2020-12-19 02:03:32,627	[INFO]	330	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:03:35,912	[INFO]	331	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:03:35,914	[INFO]	332	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:03:35,914	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:03:36,847	[INFO]	333	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:03:36,848	[INFO]	334	SUCCESS	+2.0	
2020-12-19 02:03:36,848	[DEBUG]	
2020-12-19 02:03:36,849	[INFO]	335	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:03:36,849	[DEBUG]	
2020-12-19 02:03:37,838	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:03:38,858	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:03:39,840	[INFO]	338	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:03:39,841	[INFO]	339	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:03:39,842	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:03:40,807	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:03:44,137	[INFO]	341	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:03:45,013	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:03:48,252	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:03:48,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:03:48,255	[INFO]	344	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:03:48,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 36,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:03:51,452	[INFO]	345	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:03:51,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,41 ****
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 32,44 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:03:54,712	[INFO]	346	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:03:54,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 29,34 ****
--- 31,38 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:03:57,994	[INFO]	347	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:03:57,995	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:04:01,176	[INFO]	348	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:04:02,187	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:04:02,190	[INFO]	350	SUCCESS	+2.0	
2020-12-19 02:04:02,191	[DEBUG]	
2020-12-19 02:04:02,193	[INFO]	351	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:04:05,431	[INFO]	352	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:04:05,432	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:04:06,433	[INFO]	353	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:04:06,436	[INFO]	354	SUCCESS	+2.0	
2020-12-19 02:04:06,438	[DEBUG]	
2020-12-19 02:04:07,475	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:04:10,864	[INFO]	356	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:04:10,864	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:04:10,865	[INFO]	357	SUCCESS	+2.0	
2020-12-19 02:04:10,866	[DEBUG]	
2020-12-19 02:04:11,849	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:04:15,251	[INFO]	359	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:04:15,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(startnode, 0);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:04:18,395	[INFO]	360	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:04:18,396	[INFO]	361	SUCCESS	+2.0	
2020-12-19 02:04:18,397	[DEBUG]	
2020-12-19 02:04:19,387	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:04:19,389	[INFO]	363	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:04:19,389	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:04:20,384	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:04:23,576	[INFO]	365	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:04:38,652	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:04:41,524	[INFO]	367	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:04:41,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) != null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:04:41,530	[INFO]	368	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:04:41,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:04:44,685	[INFO]	369	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:04:44,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:04:44,687	[INFO]	370	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:04:44,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:04:44,688	[INFO]	371	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:04:44,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:04:47,948	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:04:47,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:04:48,947	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:04:52,313	[INFO]	374	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:04:55,522	[INFO]	375	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:04:56,510	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:04:56,512	[INFO]	377	SUCCESS	+2.0	
2020-12-19 02:04:56,512	[DEBUG]	
2020-12-19 02:05:11,571	[INFO]	378	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:05:14,560	[INFO]	379	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:05:14,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-19 02:05:14,562	[INFO]	380	SUCCESS	+2.0	
2020-12-19 02:05:14,562	[DEBUG]	
2020-12-19 02:05:14,563	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:05:15,472	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:05:18,441	[INFO]	383	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:05:18,442	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:05:19,417	[INFO]	384	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:05:19,419	[INFO]	385	SUCCESS	+2.0	
2020-12-19 02:05:19,420	[DEBUG]	
2020-12-19 02:05:20,425	[INFO]	386	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:05:23,707	[INFO]	387	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:05:23,708	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:05:23,709	[INFO]	388	SUCCESS	+2.0	
2020-12-19 02:05:23,710	[DEBUG]	
2020-12-19 02:05:24,699	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:05:27,972	[INFO]	390	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:05:27,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:05:28,947	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:05:28,950	[INFO]	392	SUCCESS	+2.0	
2020-12-19 02:05:28,951	[DEBUG]	
2020-12-19 02:05:32,353	[INFO]	393	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:05:32,354	[INFO]	394	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:05:32,355	[DEBUG]	
2020-12-19 02:05:32,355	[INFO]	395	SUCCESS	+2.0	
2020-12-19 02:05:32,356	[DEBUG]	
2020-12-19 02:05:33,365	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:05:34,388	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:05:35,531	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:05:36,554	[INFO]	399	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:05:37,616	[INFO]	400	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:05:38,639	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:05:42,051	[INFO]	402	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:05:42,055	[INFO]	403	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:05:42,056	[DEBUG]	
2020-12-19 02:05:43,010	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:05:43,013	[INFO]	405	SUCCESS	+2.0	
2020-12-19 02:05:43,015	[DEBUG]	
2020-12-19 02:05:44,038	[INFO]	406	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:05:47,474	[INFO]	407	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:05:48,420	[INFO]	408	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:05:49,415	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:05:50,420	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:05:53,705	[INFO]	411	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:05:53,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:05:53,707	[INFO]	412	SUCCESS	+2.0	
2020-12-19 02:05:53,707	[DEBUG]	
2020-12-19 02:05:54,660	[INFO]	413	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:05:55,681	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:05:59,045	[INFO]	415	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:06:00,013	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:06:01,071	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:06:02,085	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:06:03,072	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:06:03,074	[INFO]	420	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:06:04,081	[INFO]	421	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:06:07,368	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:06:07,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:06:07,370	[INFO]	423	SUCCESS	+2.0	
2020-12-19 02:06:07,370	[DEBUG]	
2020-12-19 02:06:08,360	[INFO]	424	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:06:09,353	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:06:10,328	[INFO]	426	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:06:11,346	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:06:12,340	[INFO]	428	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:06:15,631	[INFO]	429	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:06:16,669	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:06:17,691	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:06:20,913	[INFO]	432	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:06:20,914	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:06:21,895	[INFO]	433	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:06:25,196	[INFO]	434	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:06:25,197	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:06:28,454	[INFO]	435	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:06:28,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:06:29,342	[INFO]	436	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:06:29,343	[INFO]	437	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:06:29,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:06:29,345	[INFO]	438	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:06:29,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:06:29,346	[INFO]	439	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:06:29,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:06:30,281	[INFO]	440	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:06:33,593	[INFO]	441	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:06:33,594	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:06:33,595	[INFO]	442	SUCCESS	+2.0	
2020-12-19 02:06:33,595	[DEBUG]	
2020-12-19 02:06:34,580	[INFO]	443	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:06:34,581	[INFO]	444	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:06:37,848	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:06:37,849	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:06:37,850	[INFO]	446	SUCCESS	+2.0	
2020-12-19 02:06:37,850	[DEBUG]	
2020-12-19 02:06:38,837	[INFO]	447	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:06:39,880	[INFO]	448	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:06:40,893	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:06:44,247	[INFO]	450	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:06:44,248	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:06:44,249	[INFO]	451	SUCCESS	+2.0	
2020-12-19 02:06:44,250	[DEBUG]	
2020-12-19 02:06:45,254	[INFO]	452	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:06:45,256	[INFO]	453	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:06:45,256	[DEBUG]	
2020-12-19 02:06:45,257	[INFO]	454	SUCCESS	+2.0	
2020-12-19 02:06:45,257	[DEBUG]	
2020-12-19 02:06:46,259	[INFO]	455	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:06:49,633	[INFO]	456	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:06:49,634	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:06:49,635	[INFO]	457	SUCCESS	+2.0	
2020-12-19 02:06:49,635	[DEBUG]	
2020-12-19 02:06:50,632	[INFO]	458	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:06:51,668	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:06:52,679	[INFO]	460	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:06:56,074	[INFO]	461	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:06:57,042	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:07:00,357	[INFO]	463	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:07:00,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:07:00,358	[INFO]	464	SUCCESS	+2.0	
2020-12-19 02:07:00,359	[DEBUG]	
2020-12-19 02:07:01,295	[INFO]	465	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:07:02,223	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:07:03,194	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:07:04,199	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:07:07,475	[INFO]	469	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:07:22,536	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:07:23,446	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:07:26,547	[INFO]	472	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:07:27,424	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:07:28,312	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:07:28,313	[INFO]	475	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:07:31,415	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:07:31,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:07:32,380	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:07:33,415	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:07:33,416	[INFO]	479	SUCCESS	+2.0	
2020-12-19 02:07:33,416	[DEBUG]	
2020-12-19 02:07:34,424	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:07:35,441	[INFO]	481	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:07:36,453	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:07:39,824	[INFO]	483	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:07:40,792	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:07:44,130	[INFO]	485	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:07:44,131	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:07:45,113	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:07:48,426	[INFO]	487	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:07:48,427	[INFO]	488	SUCCESS	+2.0	
2020-12-19 02:07:48,427	[DEBUG]	
2020-12-19 02:07:49,423	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:07:50,422	[INFO]	490	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:07:53,780	[INFO]	491	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:07:54,756	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:07:55,726	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:07:56,732	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:08:00,072	[INFO]	495	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:08:00,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:08:01,054	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:08:04,346	[INFO]	497	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:08:04,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:08:04,348	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:08:04,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:08:04,349	[INFO]	499	SUCCESS	+2.0	
2020-12-19 02:08:04,349	[DEBUG]	
2020-12-19 02:08:05,293	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:08:05,293	[INFO]	==== END ====
2020-12-19 02:08:05,293	[INFO]	Reason: step budget
2020-12-19 02:08:05,294	[INFO]	
2020-12-19 02:08:05,294	[INFO]	========== EPOCH 11 ==========
2020-12-19 02:08:05,294	[INFO]	==== WARMUP ====
2020-12-19 02:08:08,510	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:08:08,510	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:08:11,868	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:08:11,868	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:08:15,138	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:08:15,138	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:08:18,357	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 02:08:18,358	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:08:18,358	[INFO]	==== START ====
2020-12-19 02:08:19,393	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:08:20,412	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:08:21,383	[INFO]	3	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:08:24,665	[INFO]	4	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:08:25,639	[INFO]	5	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:08:26,634	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:08:27,633	[INFO]	7	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:08:31,016	[INFO]	8	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:08:31,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:08:31,020	[INFO]	9	SUCCESS	+2.0	
2020-12-19 02:08:31,021	[DEBUG]	
2020-12-19 02:08:31,023	[INFO]	10	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:08:31,024	[DEBUG]	
2020-12-19 02:08:31,025	[INFO]	11	SUCCESS	+2.0	
2020-12-19 02:08:31,026	[DEBUG]	
2020-12-19 02:08:32,017	[INFO]	12	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:08:32,020	[INFO]	13	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:08:32,020	[DEBUG]	
2020-12-19 02:08:32,022	[INFO]	14	SUCCESS	+2.0	
2020-12-19 02:08:32,023	[DEBUG]	
2020-12-19 02:08:32,025	[INFO]	15	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:08:32,026	[DEBUG]	
2020-12-19 02:08:32,027	[INFO]	16	SUCCESS	+2.0	
2020-12-19 02:08:32,028	[DEBUG]	
2020-12-19 02:08:33,068	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:08:34,052	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:08:34,053	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:08:34,054	[INFO]	20	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:08:34,055	[DEBUG]	
2020-12-19 02:08:34,056	[INFO]	21	SUCCESS	+2.0	
2020-12-19 02:08:34,057	[DEBUG]	
2020-12-19 02:08:37,405	[INFO]	22	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:08:37,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:08:40,702	[INFO]	23	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:08:40,703	[INFO]	24	SUCCESS	+2.0	
2020-12-19 02:08:40,704	[DEBUG]	
2020-12-19 02:08:41,718	[INFO]	25	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:08:42,755	[INFO]	26	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:08:43,764	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:08:47,030	[INFO]	28	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:08:47,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 52,57 ****
--- 52,58 ----
                  minNode = node;
              }
          }
+         Set<Node> visitedNodes = new HashSet<>();
          return minNode;
      }
  }

2020-12-19 02:08:47,032	[INFO]	29	SUCCESS	+2.0	
2020-12-19 02:08:47,032	[DEBUG]	
2020-12-19 02:08:48,027	[INFO]	30	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:08:49,009	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:08:52,294	[INFO]	32	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:08:53,487	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:08:54,472	[INFO]	34	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:08:57,875	[INFO]	35	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:09:01,101	[INFO]	36	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:09:01,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:09:01,103	[INFO]	37	SUCCESS	+2.0	
2020-12-19 02:09:01,104	[DEBUG]	
2020-12-19 02:09:01,105	[INFO]	38	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:09:01,106	[DEBUG]	
2020-12-19 02:09:01,107	[INFO]	39	SUCCESS	+2.0	
2020-12-19 02:09:01,107	[DEBUG]	
2020-12-19 02:09:01,109	[INFO]	40	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:09:01,109	[DEBUG]	
2020-12-19 02:09:02,169	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:09:02,171	[INFO]	42	SUCCESS	+2.0	
2020-12-19 02:09:02,172	[DEBUG]	
2020-12-19 02:09:03,169	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:09:04,168	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:09:05,169	[INFO]	45	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:09:06,195	[INFO]	46	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:09:07,225	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:09:10,498	[INFO]	48	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:09:10,499	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:09:10,500	[INFO]	49	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:09:10,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:09:13,733	[INFO]	50	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:09:13,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:09:14,716	[INFO]	51	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:09:17,989	[INFO]	52	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:09:17,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:09:17,991	[INFO]	53	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:09:17,991	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:09:17,992	[INFO]	54	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:09:17,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:09:18,970	[INFO]	55	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:09:18,974	[INFO]	56	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:09:18,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:09:18,977	[INFO]	57	SUCCESS	+2.0	
2020-12-19 02:09:18,977	[DEBUG]	
2020-12-19 02:09:22,308	[INFO]	58	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:09:22,309	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:09:23,300	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:09:23,302	[INFO]	60	SUCCESS	+2.0	
2020-12-19 02:09:23,303	[DEBUG]	
2020-12-19 02:09:24,300	[INFO]	61	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:09:25,311	[INFO]	62	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:09:26,296	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:09:27,304	[INFO]	64	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:09:28,312	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:09:29,308	[INFO]	66	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:09:30,325	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:09:30,329	[INFO]	68	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:09:30,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:09:30,332	[INFO]	69	SUCCESS	+2.0	
2020-12-19 02:09:30,333	[DEBUG]	
2020-12-19 02:09:31,331	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:09:32,330	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:09:33,343	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:09:34,320	[INFO]	73	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:09:37,683	[INFO]	74	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:09:37,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:09:41,083	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:09:41,084	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,53 ****
--- 46,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:09:42,056	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:09:42,058	[INFO]	77	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:09:42,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:09:42,059	[INFO]	78	SUCCESS	+2.0	
2020-12-19 02:09:42,059	[DEBUG]	
2020-12-19 02:09:43,078	[INFO]	79	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:09:43,082	[INFO]	80	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:09:43,084	[DEBUG]	
2020-12-19 02:09:46,347	[INFO]	81	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:09:46,349	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 02:09:46,350	[INFO]	82	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:09:46,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 02:09:46,354	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:09:46,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 02:09:49,658	[INFO]	84	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:09:52,898	[INFO]	85	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:09:53,889	[INFO]	86	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:09:53,891	[INFO]	87	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:09:53,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 02:09:53,892	[INFO]	88	SUCCESS	+2.0	
2020-12-19 02:09:53,893	[DEBUG]	
2020-12-19 02:09:54,935	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:09:55,944	[INFO]	90	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:09:56,932	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:10:11,994	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:10:14,868	[INFO]	93	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:10:14,869	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:10:14,869	[INFO]	94	SUCCESS	+2.0	
2020-12-19 02:10:14,870	[DEBUG]	
2020-12-19 02:10:17,897	[INFO]	95	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:10:17,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:10:17,899	[INFO]	96	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:10:17,900	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:10:17,900	[INFO]	97	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:10:17,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:10:17,901	[INFO]	98	SUCCESS	+2.0	
2020-12-19 02:10:17,901	[DEBUG]	
2020-12-19 02:10:17,902	[INFO]	99	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:10:18,809	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:10:19,811	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:10:20,781	[INFO]	102	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:10:21,821	[INFO]	103	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:10:22,847	[INFO]	104	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:10:26,155	[INFO]	105	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:10:26,156	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:10:26,156	[INFO]	106	SUCCESS	+2.0	
2020-12-19 02:10:26,157	[DEBUG]	
2020-12-19 02:10:27,177	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:10:28,140	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:10:29,219	[INFO]	109	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:10:29,221	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:10:30,241	[INFO]	111	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:10:33,582	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:10:33,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:10:34,570	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:10:34,571	[INFO]	114	SUCCESS	+2.0	
2020-12-19 02:10:34,571	[DEBUG]	
2020-12-19 02:10:35,822	[INFO]	115	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:10:37,270	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:10:37,271	[INFO]	117	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:10:38,525	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:10:39,669	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:10:42,959	[INFO]	120	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:10:43,992	[INFO]	121	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:10:47,309	[INFO]	122	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:10:47,310	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:10:50,562	[INFO]	123	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:10:50,563	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:10:53,850	[INFO]	124	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:10:57,135	[INFO]	125	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:10:57,136	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:10:57,136	[INFO]	126	SUCCESS	+2.0	
2020-12-19 02:10:57,137	[DEBUG]	
2020-12-19 02:10:57,138	[INFO]	127	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:10:58,111	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:10:59,095	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:11:00,094	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:11:01,096	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:11:04,477	[INFO]	132	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:11:04,477	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:11:04,478	[INFO]	133	SUCCESS	+2.0	
2020-12-19 02:11:04,478	[DEBUG]	
2020-12-19 02:11:07,786	[INFO]	134	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:11:07,788	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:11:08,731	[INFO]	135	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:11:09,764	[INFO]	136	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:11:13,027	[INFO]	137	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:11:13,028	[INFO]	138	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:11:13,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:11:14,038	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:11:15,073	[INFO]	140	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:11:15,077	[INFO]	141	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:11:15,079	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:11:15,082	[INFO]	142	SUCCESS	+2.0	
2020-12-19 02:11:15,083	[DEBUG]	
2020-12-19 02:11:16,089	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:11:19,378	[INFO]	144	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:11:20,368	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:11:21,377	[INFO]	146	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:11:24,622	[INFO]	147	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:11:24,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:11:25,608	[INFO]	148	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:11:25,610	[INFO]	149	SUCCESS	+2.0	
2020-12-19 02:11:25,610	[DEBUG]	
2020-12-19 02:11:26,620	[INFO]	150	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:11:27,616	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:11:27,617	[INFO]	152	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:11:27,618	[DEBUG]	
2020-12-19 02:11:27,618	[INFO]	153	SUCCESS	+2.0	
2020-12-19 02:11:27,618	[DEBUG]	
2020-12-19 02:11:31,147	[INFO]	154	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:11:31,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         int minDistance = Integer.MAX_VALUE;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 02:11:31,148	[INFO]	155	SUCCESS	+2.0	
2020-12-19 02:11:31,149	[DEBUG]	
2020-12-19 02:11:32,123	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:11:35,379	[INFO]	157	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:11:38,627	[INFO]	158	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:11:39,638	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:11:40,687	[INFO]	160	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:11:41,709	[INFO]	161	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:11:56,772	[INFO]	162	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:11:57,633	[INFO]	163	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:11:58,521	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:11:59,386	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:12:02,277	[INFO]	166	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:12:02,278	[INFO]	167	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:12:03,213	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:12:04,146	[INFO]	169	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:12:04,147	[INFO]	170	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:12:05,141	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:12:08,410	[INFO]	172	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:12:09,386	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:12:12,770	[INFO]	174	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:12:16,056	[INFO]	175	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:12:19,377	[INFO]	176	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:12:19,378	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:12:19,379	[INFO]	177	SUCCESS	+2.0	
2020-12-19 02:12:19,380	[DEBUG]	
2020-12-19 02:12:22,679	[INFO]	178	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:12:22,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:12:22,681	[INFO]	179	SUCCESS	+2.0	
2020-12-19 02:12:22,681	[DEBUG]	
2020-12-19 02:12:25,933	[INFO]	180	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:12:25,934	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:12:25,935	[INFO]	181	SUCCESS	+2.0	
2020-12-19 02:12:25,935	[DEBUG]	
2020-12-19 02:12:26,920	[INFO]	182	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:12:27,913	[INFO]	183	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:12:28,898	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:12:29,908	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:12:33,223	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:12:33,224	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:12:33,225	[INFO]	187	SUCCESS	+2.0	
2020-12-19 02:12:33,225	[DEBUG]	
2020-12-19 02:12:36,415	[INFO]	188	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:12:36,416	[INFO]	189	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:12:36,417	[DEBUG]	
2020-12-19 02:12:36,417	[INFO]	190	SUCCESS	+2.0	
2020-12-19 02:12:36,418	[DEBUG]	
2020-12-19 02:12:37,399	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:12:38,384	[INFO]	192	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:12:41,637	[INFO]	193	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:12:41,638	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:12:42,618	[INFO]	194	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:12:42,620	[INFO]	195	SUCCESS	+2.0	
2020-12-19 02:12:42,620	[DEBUG]	
2020-12-19 02:12:43,636	[INFO]	196	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:12:44,625	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:12:44,627	[INFO]	198	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:12:44,627	[DEBUG]	
2020-12-19 02:12:45,609	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:12:45,610	[INFO]	200	SUCCESS	+2.0	
2020-12-19 02:12:45,611	[DEBUG]	
2020-12-19 02:12:46,596	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:12:49,942	[INFO]	202	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:12:49,943	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             int minDistance = Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:12:49,944	[INFO]	203	SUCCESS	+2.0	
2020-12-19 02:12:49,944	[DEBUG]	
2020-12-19 02:12:49,945	[INFO]	204	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:12:49,945	[DEBUG]	
2020-12-19 02:12:49,946	[INFO]	205	SUCCESS	+2.0	
2020-12-19 02:12:49,946	[DEBUG]	
2020-12-19 02:12:50,909	[INFO]	206	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:12:51,870	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:12:52,857	[INFO]	208	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:12:53,915	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:12:54,900	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:12:54,903	[INFO]	211	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:12:55,926	[INFO]	212	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:12:59,251	[INFO]	213	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:12:59,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:12:59,253	[INFO]	214	SUCCESS	+2.0	
2020-12-19 02:12:59,253	[DEBUG]	
2020-12-19 02:13:02,485	[INFO]	215	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:13:02,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:02,491	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:13:02,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:05,711	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:13:05,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,53 ****
--- 37,43 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:13:05,714	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:13:05,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:06,978	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:13:06,979	[INFO]	220	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:13:06,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:06,982	[INFO]	221	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:13:06,983	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:07,993	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:13:11,228	[INFO]	223	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:13:14,373	[INFO]	224	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:13:14,374	[INFO]	225	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:13:14,375	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:17,654	[INFO]	226	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:13:17,655	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:13:18,571	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:13:18,573	[INFO]	228	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:13:18,573	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:13:18,574	[INFO]	229	SUCCESS	+2.0	
2020-12-19 02:13:18,574	[DEBUG]	
2020-12-19 02:13:18,575	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:13:19,571	[INFO]	231	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:13:20,576	[INFO]	232	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:13:21,601	[INFO]	233	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:13:24,881	[INFO]	234	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:13:25,871	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:13:29,173	[INFO]	236	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:13:30,157	[INFO]	237	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:13:31,195	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:13:32,227	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:13:33,238	[INFO]	240	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:13:34,245	[INFO]	241	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:13:37,511	[INFO]	242	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:13:37,513	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:13:38,476	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:13:38,477	[INFO]	244	SUCCESS	+2.0	
2020-12-19 02:13:38,477	[DEBUG]	
2020-12-19 02:13:41,744	[INFO]	245	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:13:42,721	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:13:43,747	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:13:44,726	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:13:48,001	[INFO]	249	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:13:48,986	[INFO]	250	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:13:48,990	[INFO]	251	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:13:48,990	[DEBUG]	
2020-12-19 02:13:52,265	[INFO]	252	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:13:52,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:13:55,579	[INFO]	253	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:13:55,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:13:56,549	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:13:59,777	[INFO]	255	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:13:59,778	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:14:03,102	[INFO]	256	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:14:03,103	[INFO]	257	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:14:03,104	[DEBUG]	
2020-12-19 02:14:03,105	[INFO]	258	SUCCESS	+2.0	
2020-12-19 02:14:03,105	[DEBUG]	
2020-12-19 02:14:04,042	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:14:04,043	[INFO]	260	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:14:04,044	[DEBUG]	
2020-12-19 02:14:05,023	[INFO]	261	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:14:05,025	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:14:08,268	[INFO]	263	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:14:08,269	[INFO]	264	SUCCESS	+2.0	
2020-12-19 02:14:08,269	[DEBUG]	
2020-12-19 02:14:09,240	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:14:09,242	[INFO]	266	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:14:09,243	[DEBUG]	
2020-12-19 02:14:09,244	[INFO]	267	SUCCESS	+2.0	
2020-12-19 02:14:09,244	[DEBUG]	
2020-12-19 02:14:09,245	[INFO]	268	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:14:10,249	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:14:13,469	[INFO]	270	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:14:14,459	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:14:15,446	[INFO]	272	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:14:16,435	[INFO]	273	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:14:17,423	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:14:20,779	[INFO]	275	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:14:21,800	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:14:22,788	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:14:23,794	[INFO]	278	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:14:23,796	[INFO]	279	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:14:23,796	[DEBUG]	
2020-12-19 02:14:27,094	[INFO]	280	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:14:27,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:14:30,354	[INFO]	281	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:14:30,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 02:14:33,598	[INFO]	282	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:14:33,599	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 49,54 ****
--- 47,53 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 02:14:33,600	[INFO]	283	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:14:33,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 49,54 ****
--- 47,53 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 02:14:36,900	[INFO]	284	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:14:36,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:14:36,902	[INFO]	285	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:14:36,903	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:14:37,905	[INFO]	286	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:14:37,906	[INFO]	287	SUCCESS	+2.0	
2020-12-19 02:14:37,907	[DEBUG]	
2020-12-19 02:14:41,279	[INFO]	288	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:14:41,280	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 02:14:41,281	[INFO]	289	SUCCESS	+2.0	
2020-12-19 02:14:41,281	[DEBUG]	
2020-12-19 02:14:44,560	[INFO]	290	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:14:44,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:14:44,562	[INFO]	291	SUCCESS	+2.0	
2020-12-19 02:14:44,562	[DEBUG]	
2020-12-19 02:14:45,548	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:14:46,573	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:14:47,581	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:14:47,585	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:14:48,501	[INFO]	296	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:14:49,479	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:14:49,480	[INFO]	298	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:14:49,481	[DEBUG]	
2020-12-19 02:14:49,481	[INFO]	299	SUCCESS	+2.0	
2020-12-19 02:14:49,482	[DEBUG]	
2020-12-19 02:14:52,795	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:14:52,796	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:14:53,772	[INFO]	301	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:14:53,773	[INFO]	302	SUCCESS	+2.0	
2020-12-19 02:14:53,774	[DEBUG]	
2020-12-19 02:14:56,988	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:14:56,989	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:14:58,008	[INFO]	304	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:15:01,301	[INFO]	305	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:15:01,303	[INFO]	306	SUCCESS	+2.0	
2020-12-19 02:15:01,303	[DEBUG]	
2020-12-19 02:15:04,582	[INFO]	307	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:15:05,550	[INFO]	308	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:15:08,879	[INFO]	309	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:15:09,817	[INFO]	310	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:15:13,048	[INFO]	311	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:15:13,049	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:15:16,325	[INFO]	312	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:15:16,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:15:17,317	[INFO]	313	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:15:20,612	[INFO]	314	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:15:20,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:15:21,617	[INFO]	315	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:15:21,618	[INFO]	316	SUCCESS	+2.0	
2020-12-19 02:15:21,618	[DEBUG]	
2020-12-19 02:15:22,613	[INFO]	317	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:15:23,655	[INFO]	318	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:15:24,645	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:15:25,645	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:15:26,667	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:15:26,669	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:15:27,674	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:15:27,677	[INFO]	324	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:15:28,693	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:15:32,008	[INFO]	326	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:15:32,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:15:35,337	[INFO]	327	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:15:35,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
!                 
              }
          }
  

2020-12-19 02:15:35,339	[INFO]	328	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:15:35,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:15:35,340	[INFO]	329	SUCCESS	+2.0	
2020-12-19 02:15:35,340	[DEBUG]	
2020-12-19 02:15:36,688	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:15:40,356	[INFO]	331	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:15:40,357	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:15:41,362	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:15:41,365	[INFO]	333	SUCCESS	+2.0	
2020-12-19 02:15:41,366	[DEBUG]	
2020-12-19 02:15:44,807	[INFO]	334	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:15:44,808	[INFO]	335	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:15:48,075	[INFO]	336	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:15:48,077	[INFO]	337	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:15:48,077	[INFO]	338	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:15:48,078	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:15:48,079	[INFO]	339	SUCCESS	+2.0	
2020-12-19 02:15:48,079	[DEBUG]	
2020-12-19 02:15:49,054	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:15:52,346	[INFO]	341	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:15:52,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:15:53,335	[INFO]	342	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:15:54,351	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:15:54,353	[INFO]	344	SUCCESS	+2.0	
2020-12-19 02:15:54,354	[DEBUG]	
2020-12-19 02:15:54,355	[INFO]	345	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:15:54,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:15:55,356	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:15:56,366	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:15:56,367	[INFO]	348	SUCCESS	+2.0	
2020-12-19 02:15:56,367	[DEBUG]	
2020-12-19 02:16:00,224	[INFO]	349	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:16:00,226	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:16:00,227	[INFO]	350	SUCCESS	+2.0	
2020-12-19 02:16:00,228	[DEBUG]	
2020-12-19 02:16:01,587	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:16:02,859	[INFO]	352	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:16:04,057	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:16:08,281	[INFO]	354	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:16:08,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:16:08,283	[INFO]	355	SUCCESS	+2.0	
2020-12-19 02:16:08,284	[DEBUG]	
2020-12-19 02:16:09,398	[INFO]	356	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:16:10,397	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:16:11,382	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:16:12,371	[INFO]	359	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:16:13,384	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:16:14,352	[INFO]	361	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:16:15,353	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:16:16,342	[INFO]	363	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:16:17,337	[INFO]	364	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:16:20,668	[INFO]	365	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:16:20,669	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:16:20,669	[INFO]	366	SUCCESS	+2.0	
2020-12-19 02:16:20,670	[DEBUG]	
2020-12-19 02:16:20,670	[INFO]	367	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:16:21,634	[INFO]	368	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:16:22,638	[INFO]	369	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:16:22,639	[INFO]	370	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:16:25,908	[INFO]	371	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:16:25,909	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:16:25,910	[INFO]	372	SUCCESS	+2.0	
2020-12-19 02:16:25,910	[DEBUG]	
2020-12-19 02:16:29,116	[INFO]	373	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:16:29,116	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:16:30,151	[INFO]	374	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:16:33,425	[INFO]	375	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:16:33,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:16:34,415	[INFO]	376	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:16:35,416	[INFO]	377	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:16:38,783	[INFO]	378	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:16:38,784	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:16:38,785	[INFO]	379	SUCCESS	+2.0	
2020-12-19 02:16:38,786	[DEBUG]	
2020-12-19 02:16:39,783	[INFO]	380	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:16:40,801	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:16:40,804	[INFO]	382	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:16:41,813	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:16:45,140	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:16:45,142	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:16:46,101	[INFO]	385	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:16:46,102	[INFO]	386	SUCCESS	+2.0	
2020-12-19 02:16:46,102	[DEBUG]	
2020-12-19 02:16:49,387	[INFO]	387	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:16:50,392	[INFO]	388	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:16:51,375	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:16:52,340	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:16:53,353	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:16:54,370	[INFO]	392	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:16:55,350	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:16:58,561	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:16:58,562	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:16:58,562	[INFO]	395	SUCCESS	+2.0	
2020-12-19 02:16:58,563	[DEBUG]	
2020-12-19 02:16:59,492	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:17:02,875	[INFO]	397	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:17:02,876	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             Node minNode = null;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 02:17:03,849	[INFO]	398	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:17:07,170	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:17:07,171	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,34 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 20,34 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:17:10,382	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:17:10,383	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,34 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 20,34 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:17:11,368	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:17:14,666	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:17:14,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,36 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 20,36 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:17:15,590	[INFO]	403	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:17:16,598	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:17:19,897	[INFO]	405	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:17:19,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 32,38 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:17:23,178	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:17:23,179	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 32,38 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:17:24,169	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:17:24,173	[INFO]	408	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:17:24,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:17:24,177	[INFO]	409	SUCCESS	+2.0	
2020-12-19 02:17:24,178	[DEBUG]	
2020-12-19 02:17:27,448	[INFO]	410	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:17:27,449	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:17:27,450	[INFO]	411	SUCCESS	+2.0	
2020-12-19 02:17:27,451	[DEBUG]	
2020-12-19 02:17:28,469	[INFO]	412	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:17:28,472	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:17:29,482	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:17:30,486	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:17:31,517	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:17:32,496	[INFO]	417	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:17:33,586	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:17:33,589	[INFO]	419	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:17:34,612	[INFO]	420	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:17:35,574	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:17:36,564	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:17:37,563	[INFO]	423	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:17:38,577	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:17:39,602	[INFO]	425	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:17:42,943	[INFO]	426	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:17:42,944	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:17:42,944	[INFO]	427	SUCCESS	+2.0	
2020-12-19 02:17:42,945	[DEBUG]	
2020-12-19 02:17:43,972	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:17:44,948	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:17:45,965	[INFO]	430	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:17:46,973	[INFO]	431	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:17:50,379	[INFO]	432	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:17:50,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 02:17:50,381	[INFO]	433	SUCCESS	+2.0	
2020-12-19 02:17:50,381	[DEBUG]	
2020-12-19 02:17:51,350	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:17:52,404	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:17:55,725	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:17:55,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 02:17:59,146	[INFO]	437	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:17:59,147	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,15 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
--- 8,16 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 02:18:00,126	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:18:15,193	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:18:16,117	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:18:16,119	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:18:16,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 02:18:16,120	[INFO]	442	SUCCESS	+2.0	
2020-12-19 02:18:16,120	[DEBUG]	
2020-12-19 02:18:16,121	[INFO]	443	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:18:16,121	[DEBUG]	
2020-12-19 02:18:17,011	[INFO]	444	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:18:17,013	[INFO]	445	SUCCESS	+2.0	
2020-12-19 02:18:17,013	[DEBUG]	
2020-12-19 02:18:19,900	[INFO]	446	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:18:19,901	[INFO]	447	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:18:23,092	[INFO]	448	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:18:23,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:18:26,287	[INFO]	449	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:18:26,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:18:27,243	[INFO]	450	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:18:30,538	[INFO]	451	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:18:30,539	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:18:33,949	[INFO]	452	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:18:33,950	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:18:34,920	[INFO]	453	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:18:34,923	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:18:34,924	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:18:34,926	[INFO]	455	SUCCESS	+2.0	
2020-12-19 02:18:34,926	[DEBUG]	
2020-12-19 02:18:35,915	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:18:36,939	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:18:37,932	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:18:38,922	[INFO]	459	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:18:53,981	[INFO]	460	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:18:54,889	[INFO]	461	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:18:54,892	[INFO]	462	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:18:57,900	[INFO]	463	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:18:57,901	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:18:58,804	[INFO]	464	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:18:58,808	[INFO]	465	SUCCESS	+2.0	
2020-12-19 02:18:58,809	[DEBUG]	
2020-12-19 02:18:59,719	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:19:02,773	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:19:02,774	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:19:02,775	[INFO]	468	SUCCESS	+2.0	
2020-12-19 02:19:02,775	[DEBUG]	
2020-12-19 02:19:03,800	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:19:03,802	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:19:03,803	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:19:04,795	[INFO]	471	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:19:04,796	[INFO]	472	SUCCESS	+2.0	
2020-12-19 02:19:04,796	[DEBUG]	
2020-12-19 02:19:05,811	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:19:06,787	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:19:07,783	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:19:11,160	[INFO]	476	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:19:12,155	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:19:13,134	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:19:13,135	[INFO]	479	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:19:14,147	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:19:15,183	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:19:18,542	[INFO]	482	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:19:21,677	[INFO]	483	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:19:21,678	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:19:22,617	[INFO]	484	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:19:22,620	[INFO]	485	SUCCESS	+2.0	
2020-12-19 02:19:22,621	[DEBUG]	
2020-12-19 02:19:25,901	[INFO]	486	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:19:29,156	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:19:29,157	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             Node minNode = null;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 02:19:29,158	[INFO]	488	SUCCESS	+2.0	
2020-12-19 02:19:29,158	[DEBUG]	
2020-12-19 02:19:30,181	[INFO]	489	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:19:31,171	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:19:34,502	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:19:34,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:19:34,504	[INFO]	492	SUCCESS	+2.0	
2020-12-19 02:19:34,504	[DEBUG]	
2020-12-19 02:19:35,496	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:19:36,546	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:19:37,563	[INFO]	495	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:19:38,481	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:19:41,835	[INFO]	497	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:19:41,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:19:41,836	[INFO]	498	SUCCESS	+2.0	
2020-12-19 02:19:41,837	[DEBUG]	
2020-12-19 02:19:42,813	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:19:43,840	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:19:43,841	[INFO]	==== END ====
2020-12-19 02:19:43,841	[INFO]	Reason: step budget
2020-12-19 02:19:43,841	[INFO]	
2020-12-19 02:19:43,842	[INFO]	========== EPOCH 12 ==========
2020-12-19 02:19:43,842	[INFO]	==== WARMUP ====
2020-12-19 02:19:47,229	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:19:47,229	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:19:50,423	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:19:50,423	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:19:53,783	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:19:53,784	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:19:57,038	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 02:19:57,038	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:19:57,039	[INFO]	==== START ====
2020-12-19 02:19:58,016	[INFO]	1	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:19:58,985	[INFO]	2	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:20:02,267	[INFO]	3	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:20:02,268	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:20:02,269	[INFO]	4	SUCCESS	+2.0	
2020-12-19 02:20:02,270	[DEBUG]	
2020-12-19 02:20:03,255	[INFO]	5	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:20:06,482	[INFO]	6	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:20:06,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:20:06,484	[INFO]	7	SUCCESS	+2.0	
2020-12-19 02:20:06,484	[DEBUG]	
2020-12-19 02:20:07,487	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:20:08,481	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:20:09,473	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:20:24,561	[INFO]	11	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:20:27,460	[INFO]	12	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:20:27,463	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:20:27,466	[INFO]	13	SUCCESS	+2.0	
2020-12-19 02:20:27,467	[DEBUG]	
2020-12-19 02:20:30,490	[INFO]	14	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:20:30,491	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:20:31,338	[INFO]	15	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:20:31,339	[INFO]	16	SUCCESS	+2.0	
2020-12-19 02:20:31,340	[DEBUG]	
2020-12-19 02:20:32,287	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:20:33,262	[INFO]	18	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:20:33,265	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:20:33,267	[INFO]	20	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:20:33,268	[DEBUG]	
2020-12-19 02:20:33,270	[INFO]	21	SUCCESS	+2.0	
2020-12-19 02:20:33,270	[DEBUG]	
2020-12-19 02:20:34,293	[INFO]	22	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:20:35,437	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:20:38,689	[INFO]	24	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:20:38,690	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:20:39,682	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:20:40,686	[INFO]	26	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:20:40,687	[INFO]	27	SUCCESS	+2.0	
2020-12-19 02:20:40,688	[DEBUG]	
2020-12-19 02:20:41,729	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:20:42,663	[INFO]	29	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:20:43,700	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:20:44,714	[INFO]	31	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:20:47,990	[INFO]	32	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:20:47,992	[INFO]	33	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:20:47,992	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:20:47,993	[INFO]	34	SUCCESS	+2.0	
2020-12-19 02:20:47,993	[DEBUG]	
2020-12-19 02:20:48,992	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:20:52,284	[INFO]	36	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:20:53,285	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:20:56,612	[INFO]	38	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:20:56,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:20:56,614	[INFO]	39	SUCCESS	+2.0	
2020-12-19 02:20:56,614	[DEBUG]	
2020-12-19 02:20:57,546	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:20:57,548	[INFO]	41	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:20:58,519	[INFO]	42	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:21:01,830	[INFO]	43	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:21:02,803	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:21:06,111	[INFO]	45	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:21:06,112	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:21:07,079	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:21:07,080	[INFO]	47	SUCCESS	+2.0	
2020-12-19 02:21:07,080	[DEBUG]	
2020-12-19 02:21:10,326	[INFO]	48	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:21:10,327	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             visitedNodes.add(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:21:11,288	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:21:11,289	[INFO]	50	SUCCESS	+2.0	
2020-12-19 02:21:11,289	[DEBUG]	
2020-12-19 02:21:11,290	[INFO]	51	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:21:11,290	[DEBUG]	
2020-12-19 02:21:11,291	[INFO]	52	SUCCESS	+2.0	
2020-12-19 02:21:11,291	[DEBUG]	
2020-12-19 02:21:12,297	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:21:13,333	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:21:13,334	[INFO]	55	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:21:13,335	[DEBUG]	
2020-12-19 02:21:13,335	[INFO]	56	SUCCESS	+2.0	
2020-12-19 02:21:13,336	[DEBUG]	
2020-12-19 02:21:14,346	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:21:15,355	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:21:16,380	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:21:17,396	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:21:20,723	[INFO]	61	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:21:21,753	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:21:25,074	[INFO]	63	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:21:25,075	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:21:25,076	[INFO]	64	SUCCESS	+2.0	
2020-12-19 02:21:25,076	[DEBUG]	
2020-12-19 02:21:26,026	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:21:26,028	[INFO]	66	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:21:26,028	[DEBUG]	
2020-12-19 02:21:41,088	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:21:41,090	[INFO]	68	SUCCESS	+2.0	
2020-12-19 02:21:41,090	[DEBUG]	
2020-12-19 02:21:44,115	[INFO]	69	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:21:45,027	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:21:48,069	[INFO]	71	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:21:48,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:21:48,071	[INFO]	72	SUCCESS	+2.0	
2020-12-19 02:21:48,071	[DEBUG]	
2020-12-19 02:21:49,091	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:21:49,095	[INFO]	74	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:21:49,097	[DEBUG]	
2020-12-19 02:21:50,108	[INFO]	75	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:21:50,109	[INFO]	76	SUCCESS	+2.0	
2020-12-19 02:21:50,109	[DEBUG]	
2020-12-19 02:21:53,518	[INFO]	77	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:21:53,519	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:21:53,519	[INFO]	78	SUCCESS	+2.0	
2020-12-19 02:21:53,520	[DEBUG]	
2020-12-19 02:21:54,458	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:21:55,467	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:21:58,759	[INFO]	81	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:21:58,763	[INFO]	82	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:21:58,765	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             int minDistance = Integer.MAX_VALUE;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:21:58,768	[INFO]	83	SUCCESS	+2.0	
2020-12-19 02:21:58,769	[DEBUG]	
2020-12-19 02:21:59,756	[INFO]	84	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:22:00,766	[INFO]	85	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:22:01,769	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:22:02,767	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:22:03,763	[INFO]	88	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:22:03,765	[INFO]	89	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:22:04,776	[INFO]	90	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:22:05,789	[INFO]	91	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:22:06,808	[INFO]	92	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:22:07,826	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:22:11,080	[INFO]	94	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:22:11,081	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:22:11,082	[INFO]	95	SUCCESS	+2.0	
2020-12-19 02:22:11,082	[DEBUG]	
2020-12-19 02:22:12,068	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:22:12,070	[INFO]	97	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:22:12,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:22:15,437	[INFO]	98	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:22:15,439	[INFO]	99	SUCCESS	+2.0	
2020-12-19 02:22:15,439	[DEBUG]	
2020-12-19 02:22:16,409	[INFO]	100	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:22:17,400	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:22:20,665	[INFO]	102	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:22:20,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:22:20,668	[INFO]	103	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:22:20,669	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:22:23,885	[INFO]	104	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:22:27,102	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:22:27,103	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:22:28,100	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:22:29,110	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:22:32,490	[INFO]	108	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:22:32,492	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:22:33,480	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:22:33,485	[INFO]	110	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:22:33,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:22:33,492	[INFO]	111	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:22:33,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:22:33,496	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:22:33,498	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:22:33,500	[INFO]	113	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:22:33,502	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:22:33,504	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:22:33,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:22:33,507	[INFO]	115	SUCCESS	+2.0	
2020-12-19 02:22:33,507	[DEBUG]	
2020-12-19 02:22:48,590	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:22:49,500	[INFO]	117	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:22:50,383	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:22:51,283	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:22:54,426	[INFO]	120	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:22:54,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:22:55,388	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:22:56,433	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:22:57,439	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:23:00,738	[INFO]	124	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:23:00,739	[INFO]	125	SUCCESS	+2.0	
2020-12-19 02:23:00,740	[DEBUG]	
2020-12-19 02:23:01,683	[INFO]	126	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:23:04,930	[INFO]	127	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:23:05,931	[INFO]	128	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:23:06,966	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:23:06,968	[INFO]	130	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:23:06,968	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:23:10,164	[INFO]	131	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:23:13,405	[INFO]	132	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:23:13,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:23:14,298	[INFO]	133	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:23:17,681	[INFO]	134	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:23:17,682	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:23:20,913	[INFO]	135	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:23:21,898	[INFO]	136	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:23:21,900	[INFO]	137	SUCCESS	+2.0	
2020-12-19 02:23:21,901	[DEBUG]	
2020-12-19 02:23:22,926	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:23:23,917	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:23:27,218	[INFO]	140	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:23:27,219	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:23:28,198	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:23:28,199	[INFO]	142	SUCCESS	+2.0	
2020-12-19 02:23:28,199	[DEBUG]	
2020-12-19 02:23:29,217	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:23:32,580	[INFO]	144	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:23:33,591	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:23:36,964	[INFO]	146	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:23:36,965	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         int minDistance = Integer.MAX_VALUE;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 02:23:36,966	[INFO]	147	SUCCESS	+2.0	
2020-12-19 02:23:36,967	[DEBUG]	
2020-12-19 02:23:37,947	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:23:41,165	[INFO]	149	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:23:41,166	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:23:41,167	[INFO]	150	SUCCESS	+2.0	
2020-12-19 02:23:41,167	[DEBUG]	
2020-12-19 02:23:42,184	[INFO]	151	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:23:45,567	[INFO]	152	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:23:46,524	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:23:47,534	[INFO]	154	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:23:48,532	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:23:49,534	[INFO]	156	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:23:52,808	[INFO]	157	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:23:52,811	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:23:52,814	[INFO]	158	SUCCESS	+2.0	
2020-12-19 02:23:52,815	[DEBUG]	
2020-12-19 02:23:53,821	[INFO]	159	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:23:53,822	[INFO]	160	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:23:53,823	[DEBUG]	
2020-12-19 02:23:53,824	[INFO]	161	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:23:53,824	[DEBUG]	
2020-12-19 02:23:53,825	[INFO]	162	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:23:53,825	[DEBUG]	
2020-12-19 02:23:54,826	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:23:54,827	[INFO]	164	SUCCESS	+2.0	
2020-12-19 02:23:54,827	[DEBUG]	
2020-12-19 02:23:55,804	[INFO]	165	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:23:55,806	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:23:59,078	[INFO]	167	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:23:59,079	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:23:59,080	[INFO]	168	SUCCESS	+2.0	
2020-12-19 02:23:59,080	[DEBUG]	
2020-12-19 02:23:59,081	[INFO]	169	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:24:02,290	[INFO]	170	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:24:03,260	[INFO]	171	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:24:04,232	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:24:07,588	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:24:07,589	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:24:08,580	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:24:08,581	[INFO]	175	SUCCESS	+2.0	
2020-12-19 02:24:08,582	[DEBUG]	
2020-12-19 02:24:11,870	[INFO]	176	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:24:15,097	[INFO]	177	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:24:15,099	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:16,070	[INFO]	178	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:24:19,396	[INFO]	179	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:24:19,399	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,54 ****
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 44,55 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Set<Node> visitedNodes = new HashSet<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:19,402	[INFO]	180	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:24:19,404	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:22,758	[INFO]	181	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:24:22,759	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:26,008	[INFO]	182	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:24:26,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:26,011	[INFO]	183	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:24:26,011	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 61,67 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:24:29,397	[INFO]	184	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:24:29,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 37,42 ****
--- 37,55 ----
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:24:29,399	[INFO]	185	SUCCESS	+2.0	
2020-12-19 02:24:29,399	[DEBUG]	
2020-12-19 02:24:32,758	[INFO]	186	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:24:33,769	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:24:34,753	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:24:35,749	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:24:36,790	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:24:40,037	[INFO]	191	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:24:40,038	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:24:40,039	[INFO]	192	SUCCESS	+2.0	
2020-12-19 02:24:40,039	[DEBUG]	
2020-12-19 02:24:43,394	[INFO]	193	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:24:44,386	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:24:44,389	[INFO]	195	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:24:44,390	[DEBUG]	
2020-12-19 02:24:45,386	[INFO]	196	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:24:45,390	[INFO]	197	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:24:46,402	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:24:46,405	[INFO]	199	SUCCESS	+2.0	
2020-12-19 02:24:46,405	[DEBUG]	
2020-12-19 02:24:49,653	[INFO]	200	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:24:49,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:24:49,654	[INFO]	201	SUCCESS	+2.0	
2020-12-19 02:24:49,655	[DEBUG]	
2020-12-19 02:24:50,651	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:24:53,956	[INFO]	203	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:24:53,957	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:25:09,031	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:25:09,032	[INFO]	205	SUCCESS	+2.0	
2020-12-19 02:25:09,033	[DEBUG]	
2020-12-19 02:25:09,920	[INFO]	206	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:25:09,921	[INFO]	207	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:25:09,922	[DEBUG]	
2020-12-19 02:25:10,823	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:25:10,824	[INFO]	209	SUCCESS	+2.0	
2020-12-19 02:25:10,824	[DEBUG]	
2020-12-19 02:25:11,738	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:25:12,642	[INFO]	211	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:25:27,704	[INFO]	212	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:25:30,577	[INFO]	213	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:25:30,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-19 02:25:30,579	[INFO]	214	SUCCESS	+2.0	
2020-12-19 02:25:30,579	[DEBUG]	
2020-12-19 02:25:33,590	[INFO]	215	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:25:33,590	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:25:33,591	[INFO]	216	SUCCESS	+2.0	
2020-12-19 02:25:33,592	[DEBUG]	
2020-12-19 02:25:33,593	[INFO]	217	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:25:33,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:25:37,423	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:25:37,424	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:25:37,426	[INFO]	219	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:25:37,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:25:37,427	[INFO]	220	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:25:37,427	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:25:37,428	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:25:37,429	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:25:41,114	[INFO]	222	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:25:41,115	[INFO]	223	SUCCESS	+2.0	
2020-12-19 02:25:41,116	[DEBUG]	
2020-12-19 02:25:41,117	[INFO]	224	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:25:41,117	[DEBUG]	
2020-12-19 02:25:42,056	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:25:42,059	[INFO]	226	SUCCESS	+2.0	
2020-12-19 02:25:42,060	[DEBUG]	
2020-12-19 02:25:42,063	[INFO]	227	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:25:42,065	[DEBUG]	
2020-12-19 02:25:42,067	[INFO]	228	SUCCESS	+2.0	
2020-12-19 02:25:42,068	[DEBUG]	
2020-12-19 02:25:43,068	[INFO]	229	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:25:44,154	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:25:45,191	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:25:48,489	[INFO]	232	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:25:51,793	[INFO]	233	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:25:51,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:25:51,795	[INFO]	234	SUCCESS	+2.0	
2020-12-19 02:25:51,795	[DEBUG]	
2020-12-19 02:25:51,797	[INFO]	235	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:25:52,742	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:25:53,722	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:25:54,743	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:25:55,756	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:25:58,996	[INFO]	240	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:25:58,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:25:58,998	[INFO]	241	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:25:58,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:26:02,239	[INFO]	242	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:26:02,240	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
!                 
              }
          }
  

2020-12-19 02:26:05,467	[INFO]	243	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:26:05,468	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:26:08,927	[INFO]	244	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:26:08,928	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:26:12,118	[INFO]	245	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:26:12,119	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:26:13,144	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:26:13,146	[INFO]	247	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:26:13,146	[DEBUG]	
2020-12-19 02:26:14,089	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:26:14,090	[INFO]	249	SUCCESS	+2.0	
2020-12-19 02:26:14,090	[DEBUG]	
2020-12-19 02:26:14,091	[INFO]	250	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:26:15,105	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:26:30,177	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:26:33,141	[INFO]	253	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:26:33,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:26:33,142	[INFO]	254	SUCCESS	+2.0	
2020-12-19 02:26:33,142	[DEBUG]	
2020-12-19 02:26:36,188	[INFO]	255	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:26:37,223	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:26:40,674	[INFO]	257	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:26:40,676	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:26:41,738	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:26:42,788	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:26:42,791	[INFO]	260	SUCCESS	+2.0	
2020-12-19 02:26:42,793	[DEBUG]	
2020-12-19 02:26:43,884	[INFO]	261	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:26:43,886	[INFO]	262	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:26:43,886	[DEBUG]	
2020-12-19 02:26:43,887	[INFO]	263	SUCCESS	+2.0	
2020-12-19 02:26:43,887	[DEBUG]	
2020-12-19 02:26:43,889	[INFO]	264	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:26:43,889	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:26:43,891	[INFO]	265	SUCCESS	+2.0	
2020-12-19 02:26:43,891	[DEBUG]	
2020-12-19 02:26:44,914	[INFO]	266	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:26:45,973	[INFO]	267	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:26:47,046	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:26:47,051	[INFO]	269	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:26:48,128	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:26:51,408	[INFO]	271	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:26:54,601	[INFO]	272	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:26:54,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:26:55,545	[INFO]	273	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:26:56,468	[INFO]	274	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:26:56,470	[INFO]	275	SUCCESS	+2.0	
2020-12-19 02:26:56,470	[DEBUG]	
2020-12-19 02:26:59,761	[INFO]	276	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:27:00,781	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:27:00,783	[INFO]	278	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:27:00,784	[DEBUG]	
2020-12-19 02:27:00,785	[INFO]	279	SUCCESS	+2.0	
2020-12-19 02:27:00,785	[DEBUG]	
2020-12-19 02:27:04,129	[INFO]	280	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:27:05,060	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:27:06,021	[INFO]	282	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:27:06,024	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:27:09,461	[INFO]	284	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:27:09,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:27:09,463	[INFO]	285	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:27:09,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:27:09,465	[INFO]	286	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:27:09,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:27:09,466	[INFO]	287	SUCCESS	+2.0	
2020-12-19 02:27:09,467	[DEBUG]	
2020-12-19 02:27:10,413	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:27:11,381	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:27:12,449	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:27:13,456	[INFO]	291	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:27:16,732	[INFO]	292	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:27:16,735	[INFO]	293	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:27:20,004	[INFO]	294	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:27:23,343	[INFO]	295	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:27:23,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:27:24,317	[INFO]	296	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:27:24,320	[INFO]	297	SUCCESS	+2.0	
2020-12-19 02:27:24,321	[DEBUG]	
2020-12-19 02:27:27,660	[INFO]	298	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:27:27,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:27:27,661	[INFO]	299	SUCCESS	+2.0	
2020-12-19 02:27:27,662	[DEBUG]	
2020-12-19 02:27:30,840	[INFO]	300	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:27:34,258	[INFO]	301	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:27:34,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:27:34,260	[INFO]	302	SUCCESS	+2.0	
2020-12-19 02:27:34,260	[DEBUG]	
2020-12-19 02:27:35,231	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:27:36,230	[INFO]	304	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:27:36,232	[INFO]	305	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:27:39,575	[INFO]	306	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:27:39,576	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:27:40,545	[INFO]	307	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:27:40,546	[INFO]	308	SUCCESS	+2.0	
2020-12-19 02:27:40,547	[DEBUG]	
2020-12-19 02:27:43,827	[INFO]	309	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:27:43,828	[INFO]	310	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:27:43,828	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:27:44,841	[INFO]	311	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:27:44,842	[INFO]	312	SUCCESS	+2.0	
2020-12-19 02:27:44,843	[DEBUG]	
2020-12-19 02:27:45,836	[INFO]	313	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:27:46,837	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:27:50,113	[INFO]	315	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:27:50,115	[INFO]	316	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:27:50,115	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:27:53,320	[INFO]	317	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:27:53,321	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 33,39 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:27:56,571	[INFO]	318	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:27:56,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,26 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:27:56,573	[INFO]	319	SUCCESS	+2.0	
2020-12-19 02:27:56,573	[DEBUG]	
2020-12-19 02:27:57,563	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:27:58,611	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:27:59,669	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:28:00,742	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:28:01,768	[INFO]	324	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:28:02,766	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:28:06,053	[INFO]	326	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:28:06,055	[INFO]	327	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:28:06,056	[DEBUG]	
2020-12-19 02:28:06,057	[INFO]	328	SUCCESS	+2.0	
2020-12-19 02:28:06,057	[DEBUG]	
2020-12-19 02:28:06,058	[INFO]	329	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:28:07,091	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:28:08,090	[INFO]	331	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:28:09,099	[INFO]	332	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:28:10,077	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:28:11,099	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:28:12,104	[INFO]	335	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:28:15,413	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:28:15,413	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:28:15,414	[INFO]	337	SUCCESS	+2.0	
2020-12-19 02:28:15,415	[DEBUG]	
2020-12-19 02:28:16,396	[INFO]	338	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:28:17,405	[INFO]	339	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:28:17,406	[INFO]	340	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:28:17,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:28:17,408	[INFO]	341	SUCCESS	+2.0	
2020-12-19 02:28:17,408	[DEBUG]	
2020-12-19 02:28:18,403	[INFO]	342	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:28:18,405	[INFO]	343	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:28:21,655	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:28:21,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:28:21,657	[INFO]	345	SUCCESS	+2.0	
2020-12-19 02:28:21,657	[DEBUG]	
2020-12-19 02:28:22,642	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:28:23,651	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:28:26,960	[INFO]	348	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:28:26,963	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:28:30,273	[INFO]	349	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:28:31,226	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:28:31,227	[INFO]	351	SUCCESS	+2.0	
2020-12-19 02:28:31,227	[DEBUG]	
2020-12-19 02:28:34,623	[INFO]	352	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:28:34,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:28:34,624	[INFO]	353	SUCCESS	+2.0	
2020-12-19 02:28:34,625	[DEBUG]	
2020-12-19 02:28:37,934	[INFO]	354	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:28:38,852	[INFO]	355	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:28:39,847	[INFO]	356	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:28:40,853	[INFO]	357	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:28:41,852	[INFO]	358	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:28:42,866	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:28:46,308	[INFO]	360	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:28:46,309	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:28:46,311	[INFO]	361	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:28:46,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:28:49,585	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:28:49,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
--- 30,43 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:28:50,602	[INFO]	363	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:28:50,606	[INFO]	364	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:28:50,607	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
--- 30,43 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:28:53,931	[INFO]	365	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:28:53,932	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 
! 
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:28:57,207	[INFO]	366	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:29:00,451	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:29:00,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:29:00,453	[INFO]	368	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:29:00,453	[DEBUG]	
2020-12-19 02:29:00,454	[INFO]	369	SUCCESS	+2.0	
2020-12-19 02:29:00,454	[DEBUG]	
2020-12-19 02:29:03,804	[INFO]	370	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:29:03,804	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:29:03,805	[INFO]	371	SUCCESS	+2.0	
2020-12-19 02:29:03,806	[DEBUG]	
2020-12-19 02:29:07,065	[INFO]	372	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:29:07,066	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:29:08,042	[INFO]	373	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:29:11,344	[INFO]	374	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:29:11,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:29:14,655	[INFO]	375	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:29:14,656	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:29:14,657	[INFO]	376	SUCCESS	+2.0	
2020-12-19 02:29:14,657	[DEBUG]	
2020-12-19 02:29:17,970	[INFO]	377	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:29:18,954	[INFO]	378	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:29:19,981	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:29:19,985	[INFO]	380	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:29:20,994	[INFO]	381	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:29:24,259	[INFO]	382	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:29:24,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:29:24,262	[INFO]	383	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:29:24,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:29:24,263	[INFO]	384	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:29:24,264	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     Node minNode = null;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:29:24,265	[INFO]	385	SUCCESS	+2.0	
2020-12-19 02:29:24,265	[DEBUG]	
2020-12-19 02:29:27,530	[INFO]	386	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:29:27,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:29:27,532	[INFO]	387	SUCCESS	+2.0	
2020-12-19 02:29:27,533	[DEBUG]	
2020-12-19 02:29:28,522	[INFO]	388	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:29:31,831	[INFO]	389	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:29:31,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:29:31,833	[INFO]	390	SUCCESS	+2.0	
2020-12-19 02:29:31,833	[DEBUG]	
2020-12-19 02:29:35,208	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:29:35,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 02:29:36,200	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:29:37,243	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:29:38,258	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:29:38,259	[INFO]	395	SUCCESS	+2.0	
2020-12-19 02:29:38,260	[DEBUG]	
2020-12-19 02:29:38,261	[INFO]	396	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:29:38,261	[DEBUG]	
2020-12-19 02:29:38,262	[INFO]	397	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:29:38,263	[DEBUG]	
2020-12-19 02:29:41,513	[INFO]	398	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:29:41,514	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:29:42,450	[INFO]	399	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:29:45,778	[INFO]	400	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:29:45,782	[INFO]	401	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:29:45,783	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:29:46,672	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:29:46,673	[INFO]	403	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:29:46,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:29:47,598	[INFO]	404	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:29:48,554	[INFO]	405	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:29:51,884	[INFO]	406	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:29:51,885	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 35,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:29:52,923	[INFO]	407	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:29:53,913	[INFO]	408	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:29:54,938	[INFO]	409	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:29:54,943	[INFO]	410	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:29:54,945	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:29:54,947	[INFO]	411	SUCCESS	+2.0	
2020-12-19 02:29:54,948	[DEBUG]	
2020-12-19 02:29:58,471	[INFO]	412	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:29:58,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:29:58,473	[INFO]	413	SUCCESS	+2.0	
2020-12-19 02:29:58,473	[DEBUG]	
2020-12-19 02:30:01,834	[INFO]	414	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:30:01,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:30:05,274	[INFO]	415	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:30:05,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:30:06,310	[INFO]	416	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:30:06,311	[INFO]	417	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:30:06,312	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:30:06,313	[INFO]	418	SUCCESS	+2.0	
2020-12-19 02:30:06,313	[DEBUG]	
2020-12-19 02:30:09,784	[INFO]	419	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:30:13,164	[INFO]	420	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:30:14,233	[INFO]	421	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:30:17,683	[INFO]	422	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:30:18,710	[INFO]	423	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:30:18,712	[INFO]	424	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:30:22,234	[INFO]	425	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:30:22,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:30:25,568	[INFO]	426	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:30:29,000	[INFO]	427	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:30:32,463	[INFO]	428	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:30:32,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:30:33,537	[INFO]	429	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:30:33,539	[INFO]	430	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:30:33,540	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:30:33,542	[INFO]	431	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:30:33,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:30:34,592	[INFO]	432	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:30:34,594	[INFO]	433	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:30:34,594	[DEBUG]	
2020-12-19 02:30:35,861	[INFO]	434	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:30:35,864	[INFO]	435	SUCCESS	+2.0	
2020-12-19 02:30:35,865	[DEBUG]	
2020-12-19 02:30:39,567	[INFO]	436	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:30:42,987	[INFO]	437	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:30:42,989	[INFO]	438	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:30:42,989	[DEBUG]	
2020-12-19 02:30:44,080	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:30:44,081	[INFO]	440	SUCCESS	+2.0	
2020-12-19 02:30:44,081	[DEBUG]	
2020-12-19 02:30:45,145	[INFO]	441	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:30:48,600	[INFO]	442	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:30:49,631	[INFO]	443	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:30:50,676	[INFO]	444	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:30:54,097	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:30:54,098	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:30:54,099	[INFO]	446	SUCCESS	+2.0	
2020-12-19 02:30:54,100	[DEBUG]	
2020-12-19 02:30:55,141	[INFO]	447	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:30:56,238	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:30:57,280	[INFO]	449	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:30:58,332	[INFO]	450	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:30:59,367	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:31:14,429	[INFO]	452	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:31:15,292	[INFO]	453	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:31:15,294	[INFO]	454	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:31:18,293	[INFO]	455	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:31:19,186	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:31:19,188	[INFO]	457	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:31:20,069	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:31:20,962	[INFO]	459	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:31:21,964	[INFO]	460	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:31:22,939	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:31:23,930	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:31:27,310	[INFO]	463	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:31:27,311	[INFO]	464	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:31:30,683	[INFO]	465	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:31:30,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:31:33,980	[INFO]	466	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:31:37,284	[INFO]	467	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:31:37,286	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,31 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
--- 21,34 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
!                 
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:31:40,571	[INFO]	468	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:31:40,573	[INFO]	469	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:31:40,574	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:31:41,564	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:31:41,565	[INFO]	471	SUCCESS	+2.0	
2020-12-19 02:31:41,565	[DEBUG]	
2020-12-19 02:31:42,651	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:31:43,677	[INFO]	473	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:31:44,677	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:31:45,694	[INFO]	475	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:31:45,698	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:31:45,699	[DEBUG]	
2020-12-19 02:31:45,702	[INFO]	477	SUCCESS	+2.0	
2020-12-19 02:31:45,703	[DEBUG]	
2020-12-19 02:31:49,005	[INFO]	478	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:31:49,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:31:49,007	[INFO]	479	SUCCESS	+2.0	
2020-12-19 02:31:49,008	[DEBUG]	
2020-12-19 02:31:52,162	[INFO]	480	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:31:52,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:31:52,164	[INFO]	481	SUCCESS	+2.0	
2020-12-19 02:31:52,165	[DEBUG]	
2020-12-19 02:31:55,395	[INFO]	482	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:31:56,405	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:31:57,390	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:32:12,450	[INFO]	485	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:32:13,333	[INFO]	486	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:32:14,227	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:32:15,138	[INFO]	488	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:32:15,988	[INFO]	489	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:32:16,886	[INFO]	490	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:32:16,889	[INFO]	491	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:32:19,889	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:32:19,890	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:32:20,827	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:32:20,828	[INFO]	494	SUCCESS	+2.0	
2020-12-19 02:32:20,828	[DEBUG]	
2020-12-19 02:32:20,829	[INFO]	495	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:32:20,829	[DEBUG]	
2020-12-19 02:32:20,830	[INFO]	496	SUCCESS	+2.0	
2020-12-19 02:32:20,830	[DEBUG]	
2020-12-19 02:32:21,829	[INFO]	497	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:32:25,068	[INFO]	498	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:32:25,069	[INFO]	499	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:32:25,069	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:32:25,070	[INFO]	500	SUCCESS	+2.0	
2020-12-19 02:32:25,070	[DEBUG]	
2020-12-19 02:32:25,071	[INFO]	==== END ====
2020-12-19 02:32:25,071	[INFO]	Reason: step budget
2020-12-19 02:32:25,071	[INFO]	
2020-12-19 02:32:25,071	[INFO]	========== EPOCH 13 ==========
2020-12-19 02:32:25,072	[INFO]	==== WARMUP ====
2020-12-19 02:32:28,319	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:32:28,319	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:32:31,638	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:32:31,638	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:32:34,916	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:32:34,916	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:32:38,250	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 02:32:38,250	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:32:38,250	[INFO]	==== START ====
2020-12-19 02:32:39,257	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:32:40,246	[INFO]	2	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:32:41,258	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:32:42,238	[INFO]	4	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:32:43,294	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:32:44,334	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:32:47,727	[INFO]	7	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:32:47,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:32:47,728	[INFO]	8	SUCCESS	+2.0	
2020-12-19 02:32:47,729	[DEBUG]	
2020-12-19 02:32:51,086	[INFO]	9	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:32:51,087	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:32:54,166	[INFO]	10	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:32:54,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:32:55,096	[INFO]	11	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:32:56,040	[INFO]	12	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:32:56,045	[INFO]	13	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:32:56,048	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:32:59,366	[INFO]	14	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:32:59,368	[INFO]	15	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:32:59,368	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             Node minNode = null;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:33:00,280	[INFO]	16	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:33:01,201	[INFO]	17	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:33:01,203	[INFO]	18	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:33:01,203	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:33:01,204	[INFO]	19	SUCCESS	+2.0	
2020-12-19 02:33:01,204	[DEBUG]	
2020-12-19 02:33:04,549	[INFO]	20	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:33:04,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 02:33:05,508	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:33:05,509	[INFO]	22	SUCCESS	+2.0	
2020-12-19 02:33:05,510	[DEBUG]	
2020-12-19 02:33:06,530	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:33:07,525	[INFO]	24	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:33:08,536	[INFO]	25	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:33:09,540	[INFO]	26	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:33:10,533	[INFO]	27	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:33:11,558	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:33:14,856	[INFO]	29	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:33:14,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:33:14,858	[INFO]	30	SUCCESS	+2.0	
2020-12-19 02:33:14,858	[DEBUG]	
2020-12-19 02:33:15,857	[INFO]	31	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:33:19,258	[INFO]	32	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:33:19,259	[INFO]	33	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:33:22,576	[INFO]	34	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:33:22,576	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:33:23,522	[INFO]	35	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:33:23,524	[INFO]	36	SUCCESS	+2.0	
2020-12-19 02:33:23,524	[DEBUG]	
2020-12-19 02:33:24,510	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:33:27,919	[INFO]	38	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:33:28,869	[INFO]	39	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:33:29,855	[INFO]	40	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:33:33,158	[INFO]	41	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:33:34,190	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:33:34,193	[INFO]	43	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:33:34,194	[DEBUG]	
2020-12-19 02:33:34,196	[INFO]	44	SUCCESS	+2.0	
2020-12-19 02:33:34,197	[DEBUG]	
2020-12-19 02:33:34,198	[INFO]	45	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:33:34,199	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:33:34,201	[INFO]	46	SUCCESS	+2.0	
2020-12-19 02:33:34,202	[DEBUG]	
2020-12-19 02:33:35,131	[INFO]	47	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:33:36,111	[INFO]	48	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:33:37,129	[INFO]	49	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:33:38,142	[INFO]	50	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:33:41,434	[INFO]	51	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:33:44,741	[INFO]	52	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:33:44,743	[INFO]	53	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:33:44,744	[INFO]	54	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:33:44,745	[DEBUG]	
2020-12-19 02:33:44,745	[INFO]	55	SUCCESS	+2.0	
2020-12-19 02:33:44,746	[DEBUG]	
2020-12-19 02:33:44,747	[INFO]	56	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:33:44,747	[DEBUG]	
2020-12-19 02:33:44,748	[INFO]	57	SUCCESS	+2.0	
2020-12-19 02:33:44,748	[DEBUG]	
2020-12-19 02:33:45,702	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:33:45,704	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:33:46,730	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:33:49,969	[INFO]	61	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:33:49,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:33:53,407	[INFO]	62	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:33:53,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:33:53,409	[INFO]	63	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:33:53,409	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:33:56,761	[INFO]	64	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:33:56,762	[INFO]	65	SUCCESS	+2.0	
2020-12-19 02:33:56,762	[DEBUG]	
2020-12-19 02:33:57,691	[INFO]	66	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:33:58,708	[INFO]	67	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:33:59,694	[INFO]	68	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:34:00,694	[INFO]	69	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:34:01,720	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:34:02,725	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:34:03,750	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:34:07,066	[INFO]	73	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:34:08,016	[INFO]	74	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:34:08,990	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:34:12,272	[INFO]	76	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:34:12,273	[INFO]	77	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:34:13,284	[INFO]	78	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:34:16,555	[INFO]	79	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:34:17,530	[INFO]	80	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:34:17,531	[INFO]	81	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:34:18,520	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:34:21,737	[INFO]	83	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:34:24,960	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:34:24,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:34:24,962	[INFO]	85	SUCCESS	+2.0	
2020-12-19 02:34:24,962	[DEBUG]	
2020-12-19 02:34:25,974	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:34:26,971	[INFO]	87	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:34:27,957	[INFO]	88	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:34:28,953	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:34:32,197	[INFO]	90	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:34:32,199	[INFO]	91	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:34:32,199	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:34:32,200	[INFO]	92	SUCCESS	+2.0	
2020-12-19 02:34:32,200	[DEBUG]	
2020-12-19 02:34:33,218	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:34:34,238	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:34:35,211	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:34:38,483	[INFO]	96	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:34:38,484	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:34:41,860	[INFO]	97	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:34:42,848	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:34:42,849	[INFO]	99	SUCCESS	+2.0	
2020-12-19 02:34:42,850	[DEBUG]	
2020-12-19 02:34:46,141	[INFO]	100	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:34:46,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:34:49,362	[INFO]	101	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:34:52,657	[INFO]	102	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:34:52,658	[INFO]	103	SUCCESS	+2.0	
2020-12-19 02:34:52,659	[DEBUG]	
2020-12-19 02:34:53,636	[INFO]	104	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:34:54,686	[INFO]	105	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:34:55,678	[INFO]	106	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:34:56,684	[INFO]	107	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:34:57,684	[INFO]	108	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:35:00,934	[INFO]	109	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:35:00,935	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,25 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:35:00,936	[INFO]	110	SUCCESS	+2.0	
2020-12-19 02:35:00,936	[DEBUG]	
2020-12-19 02:35:01,970	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:35:02,961	[INFO]	112	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:35:03,950	[INFO]	113	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:35:03,951	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:35:03,952	[INFO]	115	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:35:03,953	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:35:03,953	[INFO]	116	SUCCESS	+2.0	
2020-12-19 02:35:03,954	[DEBUG]	
2020-12-19 02:35:03,954	[INFO]	117	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:35:03,955	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:35:07,275	[INFO]	118	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:35:07,276	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(startnode, 0);
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:35:08,226	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:35:11,426	[INFO]	120	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:35:11,428	[INFO]	121	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:35:11,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:35:11,429	[INFO]	122	SUCCESS	+2.0	
2020-12-19 02:35:11,429	[DEBUG]	
2020-12-19 02:35:12,418	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:35:15,686	[INFO]	124	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:35:16,677	[INFO]	125	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:35:17,695	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:35:18,682	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:35:19,666	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:35:20,673	[INFO]	129	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:35:23,904	[INFO]	130	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:35:23,905	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:35:23,906	[INFO]	131	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:35:23,907	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:35:24,779	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:35:25,724	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:35:25,728	[INFO]	134	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:35:25,731	[INFO]	135	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:35:25,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:35:26,736	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:35:27,665	[INFO]	137	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:35:27,666	[INFO]	138	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:35:27,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:35:27,668	[INFO]	139	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:35:27,668	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             unvisitedNodes.remove(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:35:28,595	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:35:28,596	[INFO]	141	SUCCESS	+2.0	
2020-12-19 02:35:28,597	[DEBUG]	
2020-12-19 02:35:29,641	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:35:30,651	[INFO]	143	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:35:31,661	[INFO]	144	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:35:32,712	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:35:32,715	[INFO]	146	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:35:32,716	[DEBUG]	
2020-12-19 02:35:32,718	[INFO]	147	SUCCESS	+2.0	
2020-12-19 02:35:32,719	[DEBUG]	
2020-12-19 02:35:33,704	[INFO]	148	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:35:33,706	[INFO]	149	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:35:33,706	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:35:37,665	[INFO]	150	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:35:37,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,43 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) != null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 02:35:41,991	[INFO]	151	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:35:41,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 02:35:41,999	[INFO]	152	SUCCESS	+2.0	
2020-12-19 02:35:42,000	[DEBUG]	
2020-12-19 02:35:43,310	[INFO]	153	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:35:44,443	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:35:45,734	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:35:46,791	[INFO]	156	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:35:47,801	[INFO]	157	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:35:48,827	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:35:49,859	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:35:53,189	[INFO]	160	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:35:53,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:35:53,191	[INFO]	161	SUCCESS	+2.0	
2020-12-19 02:35:53,191	[DEBUG]	
2020-12-19 02:35:56,525	[INFO]	162	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:35:56,526	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:35:56,527	[INFO]	163	SUCCESS	+2.0	
2020-12-19 02:35:56,528	[DEBUG]	
2020-12-19 02:35:57,557	[INFO]	164	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:36:00,874	[INFO]	165	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:36:00,875	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:36:01,888	[INFO]	166	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:36:01,890	[INFO]	167	SUCCESS	+2.0	
2020-12-19 02:36:01,890	[DEBUG]	
2020-12-19 02:36:02,887	[INFO]	168	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:36:06,203	[INFO]	169	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:36:07,204	[INFO]	170	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:36:08,195	[INFO]	171	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:36:09,162	[INFO]	172	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:36:10,154	[INFO]	173	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:36:11,174	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:36:14,485	[INFO]	175	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:36:14,486	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:36:14,487	[INFO]	176	SUCCESS	+2.0	
2020-12-19 02:36:14,488	[DEBUG]	
2020-12-19 02:36:17,698	[INFO]	177	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:36:18,672	[INFO]	178	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:36:19,682	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:36:20,682	[INFO]	180	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:36:24,057	[INFO]	181	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:36:24,058	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:36:27,477	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:36:27,478	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 29,34 ****
--- 30,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:36:30,703	[INFO]	183	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:36:31,724	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:36:32,777	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:36:33,771	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:36:37,117	[INFO]	187	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:36:37,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:36:38,054	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:36:41,409	[INFO]	189	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:36:41,411	[INFO]	190	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:36:41,411	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:36:42,384	[INFO]	191	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:36:43,438	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:36:44,446	[INFO]	193	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:36:44,448	[INFO]	194	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:36:44,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:36:45,433	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:36:45,434	[INFO]	196	SUCCESS	+2.0	
2020-12-19 02:36:45,434	[DEBUG]	
2020-12-19 02:36:48,719	[INFO]	197	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:36:48,720	[INFO]	198	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:36:48,721	[DEBUG]	
2020-12-19 02:36:48,721	[INFO]	199	SUCCESS	+2.0	
2020-12-19 02:36:48,722	[DEBUG]	
2020-12-19 02:36:49,719	[INFO]	200	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:36:50,703	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:36:51,692	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:36:52,721	[INFO]	203	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:36:52,724	[INFO]	204	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:36:56,087	[INFO]	205	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:36:57,040	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:36:58,024	[INFO]	207	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:37:01,323	[INFO]	208	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:37:01,324	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:37:04,662	[INFO]	209	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:37:07,772	[INFO]	210	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:37:08,734	[INFO]	211	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:37:08,735	[INFO]	212	SUCCESS	+2.0	
2020-12-19 02:37:08,736	[DEBUG]	
2020-12-19 02:37:09,718	[INFO]	213	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:37:10,695	[INFO]	214	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:37:14,024	[INFO]	215	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:37:15,001	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:37:15,991	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:37:15,993	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:37:19,271	[INFO]	219	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:37:19,272	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:37:20,233	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:37:20,235	[INFO]	221	SUCCESS	+2.0	
2020-12-19 02:37:20,235	[DEBUG]	
2020-12-19 02:37:23,453	[INFO]	222	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:37:26,725	[INFO]	223	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:37:26,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.remove(node);
                      continue;
                  }
  

2020-12-19 02:37:27,704	[INFO]	224	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:37:28,727	[INFO]	225	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:37:29,710	[INFO]	226	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:37:29,712	[INFO]	227	SUCCESS	+2.0	
2020-12-19 02:37:29,712	[DEBUG]	
2020-12-19 02:37:30,741	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:37:34,159	[INFO]	229	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:37:34,160	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 02:37:35,111	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:37:35,114	[INFO]	231	SUCCESS	+2.0	
2020-12-19 02:37:35,115	[DEBUG]	
2020-12-19 02:37:36,127	[INFO]	232	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:37:39,461	[INFO]	233	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:37:39,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:37:40,366	[INFO]	234	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:37:40,369	[INFO]	235	SUCCESS	+2.0	
2020-12-19 02:37:40,371	[DEBUG]	
2020-12-19 02:37:43,677	[INFO]	236	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:37:44,698	[INFO]	237	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:37:59,770	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:38:00,683	[INFO]	239	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:38:03,669	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:38:03,670	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:38:03,671	[INFO]	241	SUCCESS	+2.0	
2020-12-19 02:38:03,671	[DEBUG]	
2020-12-19 02:38:04,632	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:38:08,179	[INFO]	243	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:38:11,600	[INFO]	244	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:38:11,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:38:14,906	[INFO]	245	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:38:15,937	[INFO]	246	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:38:19,422	[INFO]	247	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:38:20,406	[INFO]	248	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:38:23,889	[INFO]	249	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:38:23,890	[INFO]	250	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:38:23,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:38:23,891	[INFO]	251	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:38:23,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:38:27,347	[INFO]	252	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:38:30,749	[INFO]	253	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:38:30,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:38:31,756	[INFO]	254	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:38:35,083	[INFO]	255	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:38:35,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:38:35,088	[INFO]	256	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:38:35,089	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:38:38,397	[INFO]	257	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:38:38,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:38:38,398	[INFO]	258	SUCCESS	+2.0	
2020-12-19 02:38:38,398	[DEBUG]	
2020-12-19 02:38:39,332	[INFO]	259	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:38:42,693	[INFO]	260	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:38:42,694	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:38:42,695	[INFO]	261	SUCCESS	+2.0	
2020-12-19 02:38:42,695	[DEBUG]	
2020-12-19 02:38:45,915	[INFO]	262	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:38:45,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 02:38:46,881	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:38:47,861	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:38:47,862	[INFO]	265	SUCCESS	+2.0	
2020-12-19 02:38:47,863	[DEBUG]	
2020-12-19 02:38:47,863	[INFO]	266	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:38:47,864	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:38:48,863	[INFO]	267	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:38:48,865	[INFO]	268	SUCCESS	+2.0	
2020-12-19 02:38:48,865	[DEBUG]	
2020-12-19 02:38:49,874	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:38:49,876	[INFO]	270	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:38:50,887	[INFO]	271	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:38:51,924	[INFO]	272	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:38:52,900	[INFO]	273	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:38:53,875	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:38:54,897	[INFO]	275	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:38:55,826	[INFO]	276	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:38:56,820	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:38:56,821	[INFO]	278	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:38:56,822	[DEBUG]	
2020-12-19 02:38:57,857	[INFO]	279	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:38:58,848	[INFO]	280	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:38:58,849	[INFO]	281	SUCCESS	+2.0	
2020-12-19 02:38:58,850	[DEBUG]	
2020-12-19 02:38:59,850	[INFO]	282	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:39:00,860	[INFO]	283	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:39:01,876	[INFO]	284	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:39:01,877	[INFO]	285	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:39:01,878	[DEBUG]	
2020-12-19 02:39:01,878	[INFO]	286	SUCCESS	+2.0	
2020-12-19 02:39:01,879	[DEBUG]	
2020-12-19 02:39:02,917	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:39:03,881	[INFO]	288	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:39:04,872	[INFO]	289	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:39:19,958	[INFO]	290	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:39:20,860	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:39:21,752	[INFO]	292	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:39:21,754	[INFO]	293	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:39:21,754	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:39:21,755	[INFO]	294	SUCCESS	+2.0	
2020-12-19 02:39:21,756	[DEBUG]	
2020-12-19 02:39:22,650	[INFO]	295	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:39:25,843	[INFO]	296	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:39:25,844	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,34 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 02:39:25,845	[INFO]	297	SUCCESS	+2.0	
2020-12-19 02:39:25,845	[DEBUG]	
2020-12-19 02:39:26,898	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:39:26,902	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:39:30,252	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:39:30,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 02:39:33,595	[INFO]	301	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:39:33,596	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 02:39:33,597	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:39:33,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 02:39:36,909	[INFO]	303	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:39:37,863	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:39:38,857	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:39:38,861	[INFO]	306	SUCCESS	+2.0	
2020-12-19 02:39:38,862	[DEBUG]	
2020-12-19 02:39:38,865	[INFO]	307	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:39:38,866	[DEBUG]	
2020-12-19 02:39:38,868	[INFO]	308	SUCCESS	+2.0	
2020-12-19 02:39:38,870	[DEBUG]	
2020-12-19 02:39:39,872	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:39:40,888	[INFO]	310	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:39:41,862	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:39:42,889	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:39:46,280	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:39:46,281	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:39:46,282	[INFO]	314	SUCCESS	+2.0	
2020-12-19 02:39:46,282	[DEBUG]	
2020-12-19 02:39:46,283	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:39:49,550	[INFO]	316	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:39:49,551	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:39:49,551	[INFO]	317	SUCCESS	+2.0	
2020-12-19 02:39:49,552	[DEBUG]	
2020-12-19 02:39:52,807	[INFO]	318	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:39:53,788	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:39:57,021	[INFO]	320	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:39:57,022	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:39:57,023	[INFO]	321	SUCCESS	+2.0	
2020-12-19 02:39:57,023	[DEBUG]	
2020-12-19 02:39:58,013	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:40:01,437	[INFO]	323	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:40:16,502	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:40:17,390	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:40:18,309	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:40:19,252	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:40:20,205	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:40:20,208	[INFO]	329	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:40:21,183	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:40:24,483	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:40:24,484	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             minNode = node;
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:40:24,484	[INFO]	332	SUCCESS	+2.0	
2020-12-19 02:40:24,485	[DEBUG]	
2020-12-19 02:40:25,479	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:40:26,474	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:40:26,478	[INFO]	335	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:40:27,458	[INFO]	336	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:40:28,488	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:40:29,500	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:40:30,535	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:40:30,539	[INFO]	340	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:40:31,538	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:40:32,534	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:40:33,571	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:40:36,999	[INFO]	344	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:40:38,017	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:40:41,383	[INFO]	346	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:40:41,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(startnode, 0);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 02:40:41,385	[INFO]	347	SUCCESS	+2.0	
2020-12-19 02:40:41,385	[DEBUG]	
2020-12-19 02:40:44,771	[INFO]	348	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:40:44,774	[INFO]	349	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:40:44,775	[DEBUG]	
2020-12-19 02:40:44,776	[INFO]	350	SUCCESS	+2.0	
2020-12-19 02:40:44,777	[DEBUG]	
2020-12-19 02:40:47,974	[INFO]	351	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:40:47,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 02:40:47,976	[INFO]	352	SUCCESS	+2.0	
2020-12-19 02:40:47,976	[DEBUG]	
2020-12-19 02:40:48,980	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:40:49,906	[INFO]	354	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:40:50,931	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:40:51,935	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:40:52,931	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:40:56,133	[INFO]	358	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:40:56,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:40:56,134	[INFO]	359	SUCCESS	+2.0	
2020-12-19 02:40:56,135	[DEBUG]	
2020-12-19 02:40:57,107	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:40:58,109	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:41:01,447	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:41:01,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:41:04,751	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:41:04,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             unvisitedNodes.remove(node);
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 33,38 ****
--- 34,43 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:41:05,732	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:41:06,741	[INFO]	365	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:41:06,746	[INFO]	366	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:41:06,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:41:10,069	[INFO]	367	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:41:10,070	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 33,38 ****
--- 33,42 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:41:11,031	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:41:14,342	[INFO]	369	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:41:14,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 33,38 ****
--- 33,42 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:17,642	[INFO]	370	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:41:17,643	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:20,940	[INFO]	371	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:41:21,875	[INFO]	372	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:41:21,877	[INFO]	373	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:41:21,877	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:21,878	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:41:21,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:21,880	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:41:21,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:22,905	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:41:26,165	[INFO]	377	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:41:26,166	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:26,167	[INFO]	378	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:41:26,168	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:41:26,168	[INFO]	379	SUCCESS	+2.0	
2020-12-19 02:41:26,169	[DEBUG]	
2020-12-19 02:41:29,384	[INFO]	380	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:41:29,385	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:41:29,386	[INFO]	381	SUCCESS	+2.0	
2020-12-19 02:41:29,386	[DEBUG]	
2020-12-19 02:41:32,646	[INFO]	382	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:41:33,640	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:41:36,974	[INFO]	384	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:41:36,975	[INFO]	385	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:41:37,965	[INFO]	386	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:41:39,008	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:41:39,011	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:41:40,160	[INFO]	389	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:41:43,677	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:41:43,678	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 02:41:47,028	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:41:47,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 49,54 ****
--- 49,58 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minNode = node;
              }
          }

2020-12-19 02:41:50,262	[INFO]	392	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:41:50,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:41:53,545	[INFO]	393	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:41:53,547	[INFO]	394	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:41:53,547	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:41:53,548	[INFO]	395	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:41:53,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:41:54,544	[INFO]	396	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:41:54,546	[INFO]	397	SUCCESS	+2.0	
2020-12-19 02:41:54,546	[DEBUG]	
2020-12-19 02:41:54,547	[INFO]	398	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:41:57,870	[INFO]	399	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:41:57,871	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:41:58,833	[INFO]	400	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:41:58,835	[INFO]	401	SUCCESS	+2.0	
2020-12-19 02:41:58,835	[DEBUG]	
2020-12-19 02:42:02,105	[INFO]	402	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:42:02,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:42:02,107	[INFO]	403	SUCCESS	+2.0	
2020-12-19 02:42:02,108	[DEBUG]	
2020-12-19 02:42:03,103	[INFO]	404	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:42:04,099	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:42:05,081	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:42:08,394	[INFO]	407	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:42:09,436	[INFO]	408	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:42:10,473	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:42:11,481	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:42:11,485	[INFO]	411	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:42:11,486	[DEBUG]	
2020-12-19 02:42:12,486	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:42:12,488	[INFO]	413	SUCCESS	+2.0	
2020-12-19 02:42:12,489	[DEBUG]	
2020-12-19 02:42:13,483	[INFO]	414	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:42:14,481	[INFO]	415	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:42:15,512	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:42:18,827	[INFO]	417	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:42:19,761	[INFO]	418	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:42:20,746	[INFO]	419	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:42:24,092	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:42:24,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:42:27,346	[INFO]	421	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:42:27,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,25 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+             unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:42:30,627	[INFO]	422	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:42:30,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:42:30,629	[INFO]	423	SUCCESS	+2.0	
2020-12-19 02:42:30,630	[DEBUG]	
2020-12-19 02:42:30,631	[INFO]	424	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:42:30,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:42:34,050	[INFO]	425	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:42:34,051	[INFO]	426	SUCCESS	+2.0	
2020-12-19 02:42:34,051	[DEBUG]	
2020-12-19 02:42:35,005	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:42:38,259	[INFO]	428	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:42:39,247	[INFO]	429	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:42:42,597	[INFO]	430	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:42:42,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:42:43,595	[INFO]	431	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:42:44,586	[INFO]	432	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:42:44,588	[INFO]	433	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:42:44,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:42:47,913	[INFO]	434	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:42:48,933	[INFO]	435	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:42:52,277	[INFO]	436	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:42:53,203	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:42:53,204	[INFO]	438	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:42:53,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.remove(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:42:53,205	[INFO]	439	SUCCESS	+2.0	
2020-12-19 02:42:53,206	[DEBUG]	
2020-12-19 02:42:54,193	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:42:57,440	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:42:57,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-19 02:43:00,693	[INFO]	442	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:43:00,694	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
          }
--- 47,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
+                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 02:43:00,696	[INFO]	443	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:43:00,696	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-19 02:43:00,697	[INFO]	444	SUCCESS	+2.0	
2020-12-19 02:43:00,697	[DEBUG]	
2020-12-19 02:43:01,705	[INFO]	445	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:43:02,720	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:43:06,049	[INFO]	447	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:43:06,050	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:06,051	[INFO]	448	SUCCESS	+2.0	
2020-12-19 02:43:06,051	[DEBUG]	
2020-12-19 02:43:06,053	[INFO]	449	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:43:06,053	[DEBUG]	
2020-12-19 02:43:06,054	[INFO]	450	SUCCESS	+2.0	
2020-12-19 02:43:06,054	[DEBUG]	
2020-12-19 02:43:07,034	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:43:08,062	[INFO]	452	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:43:09,060	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:43:09,062	[INFO]	454	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:43:09,062	[DEBUG]	
2020-12-19 02:43:09,063	[INFO]	455	SUCCESS	+2.0	
2020-12-19 02:43:09,064	[DEBUG]	
2020-12-19 02:43:10,075	[INFO]	456	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:43:11,092	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:43:12,086	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:43:15,375	[INFO]	459	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:43:15,376	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:43:16,349	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:43:19,607	[INFO]	461	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:43:19,608	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:43:20,592	[INFO]	462	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:43:23,936	[INFO]	463	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:43:23,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:43:23,938	[INFO]	464	SUCCESS	+2.0	
2020-12-19 02:43:23,938	[DEBUG]	
2020-12-19 02:43:23,940	[INFO]	465	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:43:23,940	[DEBUG]	
2020-12-19 02:43:23,940	[INFO]	466	SUCCESS	+2.0	
2020-12-19 02:43:23,941	[DEBUG]	
2020-12-19 02:43:27,186	[INFO]	467	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:43:27,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:43:30,437	[INFO]	468	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:43:30,439	[INFO]	469	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:43:30,439	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:43:30,440	[INFO]	470	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:43:30,441	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:43:30,442	[INFO]	471	SUCCESS	+2.0	
2020-12-19 02:43:30,443	[DEBUG]	
2020-12-19 02:43:33,877	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:43:33,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 02:43:34,860	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:43:34,862	[INFO]	474	SUCCESS	+2.0	
2020-12-19 02:43:34,862	[DEBUG]	
2020-12-19 02:43:35,838	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:43:39,167	[INFO]	476	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:43:39,168	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:40,167	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:43:41,157	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:43:41,159	[INFO]	479	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:43:41,159	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:41,160	[INFO]	480	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:43:41,161	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:41,162	[INFO]	481	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:43:41,162	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:42,095	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:43:42,097	[INFO]	483	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:43:42,097	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:43,075	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:43:44,123	[INFO]	485	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:43:44,127	[INFO]	486	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:43:44,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:45,128	[INFO]	487	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:43:46,140	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:43:46,142	[INFO]	489	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:43:46,142	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:43:47,177	[INFO]	490	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:43:47,178	[INFO]	491	SUCCESS	+2.0	
2020-12-19 02:43:47,179	[DEBUG]	
2020-12-19 02:43:50,690	[INFO]	492	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:43:50,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:43:51,670	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:43:55,062	[INFO]	494	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:43:56,120	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:43:59,467	[INFO]	496	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:43:59,468	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:44:02,655	[INFO]	497	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:44:02,657	[INFO]	498	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:44:02,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:44:03,672	[INFO]	499	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:44:03,673	[INFO]	500	SUCCESS	+2.0	
2020-12-19 02:44:03,674	[DEBUG]	
2020-12-19 02:44:03,674	[INFO]	==== END ====
2020-12-19 02:44:03,674	[INFO]	Reason: step budget
2020-12-19 02:44:03,675	[INFO]	
2020-12-19 02:44:03,675	[INFO]	========== EPOCH 14 ==========
2020-12-19 02:44:03,676	[INFO]	==== WARMUP ====
2020-12-19 02:44:07,063	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:44:07,063	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:44:10,176	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:44:10,176	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:44:13,507	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:44:13,507	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:44:16,789	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 02:44:16,789	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:44:16,790	[INFO]	==== START ====
2020-12-19 02:44:20,043	[INFO]	1	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:44:20,045	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:44:20,046	[INFO]	2	SUCCESS	+2.0	
2020-12-19 02:44:20,046	[DEBUG]	
2020-12-19 02:44:23,214	[INFO]	3	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:44:23,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:44:23,216	[INFO]	4	SUCCESS	+2.0	
2020-12-19 02:44:23,217	[DEBUG]	
2020-12-19 02:44:24,214	[INFO]	5	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:44:25,211	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:44:26,215	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:44:29,542	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:44:29,543	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 02:44:30,578	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:44:31,563	[INFO]	10	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:44:32,546	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:44:32,547	[INFO]	12	SUCCESS	+2.0	
2020-12-19 02:44:32,548	[DEBUG]	
2020-12-19 02:44:33,594	[INFO]	13	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:44:36,935	[INFO]	14	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:44:40,185	[INFO]	15	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:44:41,162	[INFO]	16	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:44:42,129	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:44:45,353	[INFO]	18	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:44:45,354	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 02:44:48,577	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:44:48,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,41 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 30,40 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 02:44:51,873	[INFO]	20	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:44:51,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:44:51,875	[INFO]	21	SUCCESS	+2.0	
2020-12-19 02:44:51,875	[DEBUG]	
2020-12-19 02:44:52,889	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:44:56,174	[INFO]	23	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:44:56,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:44:57,137	[INFO]	24	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:44:57,138	[INFO]	25	SUCCESS	+2.0	
2020-12-19 02:44:57,138	[DEBUG]	
2020-12-19 02:44:58,114	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:45:01,443	[INFO]	27	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:45:01,444	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(startnode, 0);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:45:02,408	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:45:02,409	[INFO]	29	SUCCESS	+2.0	
2020-12-19 02:45:02,409	[DEBUG]	
2020-12-19 02:45:03,408	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:45:04,426	[INFO]	31	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:45:07,727	[INFO]	32	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:45:07,728	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 02:45:08,712	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:45:08,715	[INFO]	34	SUCCESS	+2.0	
2020-12-19 02:45:08,715	[DEBUG]	
2020-12-19 02:45:09,743	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:45:10,752	[INFO]	36	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:45:11,757	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:45:15,117	[INFO]	38	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:45:15,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:45:15,119	[INFO]	39	SUCCESS	+2.0	
2020-12-19 02:45:15,119	[DEBUG]	
2020-12-19 02:45:18,305	[INFO]	40	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:45:18,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 unvisitedNodes.remove(node);
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 02:45:18,307	[INFO]	41	SUCCESS	+2.0	
2020-12-19 02:45:18,307	[DEBUG]	
2020-12-19 02:45:19,287	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:45:20,268	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:45:21,247	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:45:24,537	[INFO]	45	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:45:24,537	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:45:24,538	[INFO]	46	SUCCESS	+2.0	
2020-12-19 02:45:24,538	[DEBUG]	
2020-12-19 02:45:25,498	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:45:26,471	[INFO]	48	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:45:27,520	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:45:27,524	[INFO]	50	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:45:27,525	[DEBUG]	
2020-12-19 02:45:28,530	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:45:29,476	[INFO]	52	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:45:29,477	[INFO]	53	SUCCESS	+2.0	
2020-12-19 02:45:29,477	[DEBUG]	
2020-12-19 02:45:29,478	[INFO]	54	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:45:29,479	[DEBUG]	
2020-12-19 02:45:29,479	[INFO]	55	SUCCESS	+2.0	
2020-12-19 02:45:29,480	[DEBUG]	
2020-12-19 02:45:30,479	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:45:31,474	[INFO]	57	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:45:34,850	[INFO]	58	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:45:39,156	[INFO]	59	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:45:39,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:45:39,159	[INFO]	60	SUCCESS	+2.0	
2020-12-19 02:45:39,160	[DEBUG]	
2020-12-19 02:45:40,273	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:45:41,318	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:45:44,629	[INFO]	63	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:45:44,630	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-19 02:45:47,965	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:45:47,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:45:47,967	[INFO]	65	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:45:47,968	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:45:51,147	[INFO]	66	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:45:51,148	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:45:54,494	[INFO]	67	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:45:54,495	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:45:54,496	[INFO]	68	SUCCESS	+2.0	
2020-12-19 02:45:54,496	[DEBUG]	
2020-12-19 02:45:55,504	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:45:56,624	[INFO]	70	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:45:57,621	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:45:57,622	[INFO]	72	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:45:57,623	[DEBUG]	
2020-12-19 02:45:58,617	[INFO]	73	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:45:59,602	[INFO]	74	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:45:59,603	[INFO]	75	SUCCESS	+2.0	
2020-12-19 02:45:59,604	[DEBUG]	
2020-12-19 02:46:02,827	[INFO]	76	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:46:06,061	[INFO]	77	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:46:06,062	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:46:06,062	[INFO]	78	SUCCESS	+2.0	
2020-12-19 02:46:06,063	[DEBUG]	
2020-12-19 02:46:07,043	[INFO]	79	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:46:22,114	[INFO]	80	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:46:23,029	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:46:23,031	[INFO]	82	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:46:23,031	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:46:23,032	[INFO]	83	SUCCESS	+2.0	
2020-12-19 02:46:23,032	[DEBUG]	
2020-12-19 02:46:26,003	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:46:26,004	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:26,005	[INFO]	85	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:46:26,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:26,006	[INFO]	86	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:46:26,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:26,854	[INFO]	87	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:46:27,755	[INFO]	88	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:46:27,758	[INFO]	89	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:46:27,759	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:30,986	[INFO]	90	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:46:30,987	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,34 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:34,182	[INFO]	91	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:46:34,184	[INFO]	92	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:46:34,184	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,34 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:35,165	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:46:35,168	[INFO]	94	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:46:35,169	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:35,171	[INFO]	95	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:46:35,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:35,175	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:46:36,115	[INFO]	97	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:46:37,051	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:46:37,053	[INFO]	99	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:46:37,054	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:38,019	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:46:38,023	[INFO]	101	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:46:38,024	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:41,273	[INFO]	102	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:46:44,472	[INFO]	103	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:46:45,399	[INFO]	104	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:46:46,376	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:46:46,378	[INFO]	106	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:46:46,378	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:46,379	[INFO]	107	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:46:46,379	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:47,302	[INFO]	108	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:46:48,260	[INFO]	109	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:46:49,223	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:46:50,179	[INFO]	111	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:46:50,183	[INFO]	112	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:46:50,185	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:46:50,187	[INFO]	113	SUCCESS	+2.0	
2020-12-19 02:46:50,188	[DEBUG]	
2020-12-19 02:46:51,156	[INFO]	114	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:46:52,147	[INFO]	115	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:46:53,156	[INFO]	116	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:46:56,417	[INFO]	117	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:46:56,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:46:56,418	[INFO]	118	SUCCESS	+2.0	
2020-12-19 02:46:56,419	[DEBUG]	
2020-12-19 02:46:59,685	[INFO]	119	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:46:59,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:47:00,611	[INFO]	120	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:47:03,905	[INFO]	121	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:47:03,906	[INFO]	122	SUCCESS	+2.0	
2020-12-19 02:47:03,906	[DEBUG]	
2020-12-19 02:47:07,221	[INFO]	123	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:47:08,196	[INFO]	124	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:47:09,214	[INFO]	125	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:47:10,229	[INFO]	126	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:47:11,243	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:47:12,248	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:47:13,242	[INFO]	129	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:47:16,593	[INFO]	130	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:47:16,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:47:19,745	[INFO]	131	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:47:19,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:47:22,960	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:47:22,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 02:47:22,963	[INFO]	133	SUCCESS	+2.0	
2020-12-19 02:47:22,963	[DEBUG]	
2020-12-19 02:47:26,146	[INFO]	134	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:47:29,433	[INFO]	135	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:47:30,433	[INFO]	136	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:47:31,410	[INFO]	137	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:47:32,406	[INFO]	138	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:47:33,471	[INFO]	139	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:47:34,470	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:47:37,833	[INFO]	141	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:47:38,731	[INFO]	142	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:47:42,034	[INFO]	143	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:47:42,035	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:47:42,036	[INFO]	144	SUCCESS	+2.0	
2020-12-19 02:47:42,036	[DEBUG]	
2020-12-19 02:47:42,973	[INFO]	145	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 02:47:46,255	[INFO]	146	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:48:01,315	[INFO]	147	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:48:04,310	[INFO]	148	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:48:07,465	[INFO]	149	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:48:08,346	[INFO]	150	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:48:09,305	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:48:09,307	[INFO]	152	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:48:10,318	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:48:11,348	[INFO]	154	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:48:12,337	[INFO]	155	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:48:13,345	[INFO]	156	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:48:13,347	[INFO]	157	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:48:13,349	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:48:14,371	[INFO]	159	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:48:15,401	[INFO]	160	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 02:48:18,702	[INFO]	161	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:48:18,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:48:18,705	[INFO]	162	SUCCESS	+2.0	
2020-12-19 02:48:18,705	[DEBUG]	
2020-12-19 02:48:21,970	[INFO]	163	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:48:21,971	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 02:48:22,948	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:48:26,264	[INFO]	165	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:48:26,266	[INFO]	166	SUCCESS	+2.0	
2020-12-19 02:48:26,266	[DEBUG]	
2020-12-19 02:48:27,240	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:48:28,201	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:48:31,485	[INFO]	169	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:48:31,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:48:31,486	[INFO]	170	SUCCESS	+2.0	
2020-12-19 02:48:31,487	[DEBUG]	
2020-12-19 02:48:32,511	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:48:35,768	[INFO]	172	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:48:35,769	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:48:36,805	[INFO]	173	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:48:36,807	[INFO]	174	SUCCESS	+2.0	
2020-12-19 02:48:36,808	[DEBUG]	
2020-12-19 02:48:37,818	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:48:38,837	[INFO]	176	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:48:42,141	[INFO]	177	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:48:42,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:48:42,144	[INFO]	178	SUCCESS	+2.0	
2020-12-19 02:48:42,144	[DEBUG]	
2020-12-19 02:48:43,099	[INFO]	179	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:48:44,123	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:48:45,136	[INFO]	181	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:48:48,402	[INFO]	182	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:48:49,355	[INFO]	183	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:48:50,338	[INFO]	184	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:48:51,337	[INFO]	185	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:48:52,362	[INFO]	186	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:48:53,338	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:48:54,332	[INFO]	188	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:48:57,565	[INFO]	189	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:48:57,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-19 02:48:58,473	[INFO]	190	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:48:58,474	[INFO]	191	SUCCESS	+2.0	
2020-12-19 02:48:58,474	[DEBUG]	
2020-12-19 02:48:59,477	[INFO]	192	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:48:59,481	[INFO]	193	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:48:59,483	[DEBUG]	
2020-12-19 02:48:59,485	[INFO]	194	SUCCESS	+2.0	
2020-12-19 02:48:59,486	[DEBUG]	
2020-12-19 02:49:00,496	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:49:01,494	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:49:04,834	[INFO]	197	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:49:04,835	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:49:05,776	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:49:05,779	[INFO]	199	SUCCESS	+2.0	
2020-12-19 02:49:05,780	[DEBUG]	
2020-12-19 02:49:06,770	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:49:07,780	[INFO]	201	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:49:08,777	[INFO]	202	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:49:09,758	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:49:13,005	[INFO]	204	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:49:13,987	[INFO]	205	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:49:17,313	[INFO]	206	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:49:17,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:49:17,318	[INFO]	207	SUCCESS	+2.0	
2020-12-19 02:49:17,319	[DEBUG]	
2020-12-19 02:49:20,582	[INFO]	208	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:49:20,583	[INFO]	209	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:49:21,498	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:49:24,797	[INFO]	211	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:49:24,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:49:25,764	[INFO]	212	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:49:29,045	[INFO]	213	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:49:29,046	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:49:30,030	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:49:33,319	[INFO]	215	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:49:33,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:49:33,321	[INFO]	216	SUCCESS	+2.0	
2020-12-19 02:49:33,322	[DEBUG]	
2020-12-19 02:49:34,315	[INFO]	217	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:49:35,312	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:49:35,314	[INFO]	219	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:49:35,315	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:49:35,316	[INFO]	220	SUCCESS	+2.0	
2020-12-19 02:49:35,316	[DEBUG]	
2020-12-19 02:49:36,291	[INFO]	221	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:49:39,639	[INFO]	222	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 02:49:39,640	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         Node minNode = null;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 02:49:39,641	[INFO]	223	SUCCESS	+2.0	
2020-12-19 02:49:39,641	[DEBUG]	
2020-12-19 02:49:39,642	[INFO]	224	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:49:39,642	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:49:39,643	[INFO]	225	SUCCESS	+2.0	
2020-12-19 02:49:39,643	[DEBUG]	
2020-12-19 02:49:39,644	[INFO]	226	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:49:39,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:49:39,645	[INFO]	227	SUCCESS	+2.0	
2020-12-19 02:49:39,645	[DEBUG]	
2020-12-19 02:49:40,602	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:49:44,005	[INFO]	229	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:49:44,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:49:44,006	[INFO]	230	SUCCESS	+2.0	
2020-12-19 02:49:44,007	[DEBUG]	
2020-12-19 02:49:44,954	[INFO]	231	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:49:48,285	[INFO]	232	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:49:48,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:49:49,233	[INFO]	233	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:49:49,234	[INFO]	234	SUCCESS	+2.0	
2020-12-19 02:49:49,234	[DEBUG]	
2020-12-19 02:50:04,302	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:50:05,222	[INFO]	236	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:50:08,132	[INFO]	237	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:50:09,048	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:50:12,288	[INFO]	239	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:50:13,279	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:50:13,281	[INFO]	241	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:13,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:13,283	[INFO]	242	SUCCESS	+2.0	
2020-12-19 02:50:13,284	[DEBUG]	
2020-12-19 02:50:14,311	[INFO]	243	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:50:15,321	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:50:16,296	[INFO]	245	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:50:16,298	[INFO]	246	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:50:16,299	[DEBUG]	
2020-12-19 02:50:16,299	[INFO]	247	SUCCESS	+2.0	
2020-12-19 02:50:16,300	[DEBUG]	
2020-12-19 02:50:17,333	[INFO]	248	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:50:18,319	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:50:19,314	[INFO]	250	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:50:20,353	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:50:20,354	[INFO]	252	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:20,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:20,356	[INFO]	253	SUCCESS	+2.0	
2020-12-19 02:50:20,356	[DEBUG]	
2020-12-19 02:50:21,340	[INFO]	254	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:50:22,410	[INFO]	255	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:50:23,424	[INFO]	256	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:50:23,425	[INFO]	257	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:50:24,414	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:50:24,416	[INFO]	259	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:24,417	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:25,410	[INFO]	260	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:50:28,722	[INFO]	261	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:29,654	[INFO]	262	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:50:30,649	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:50:31,634	[INFO]	264	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:50:35,000	[INFO]	265	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:50:36,019	[INFO]	266	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:50:39,369	[INFO]	267	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:50:39,370	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:39,371	[INFO]	268	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:39,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:42,664	[INFO]	269	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:50:42,665	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
!                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 02:50:42,666	[INFO]	270	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:50:42,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:50:42,667	[INFO]	271	SUCCESS	+2.0	
2020-12-19 02:50:42,667	[DEBUG]	
2020-12-19 02:50:46,127	[INFO]	272	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:50:46,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:50:46,130	[INFO]	273	SUCCESS	+2.0	
2020-12-19 02:50:46,130	[DEBUG]	
2020-12-19 02:50:46,131	[INFO]	274	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:50:49,300	[INFO]	275	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:50:52,604	[INFO]	276	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:50:53,620	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:50:54,615	[INFO]	278	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:50:57,884	[INFO]	279	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:50:57,884	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:50:57,885	[INFO]	280	SUCCESS	+2.0	
2020-12-19 02:50:57,886	[DEBUG]	
2020-12-19 02:50:57,887	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:50:57,888	[INFO]	282	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:50:57,888	[DEBUG]	
2020-12-19 02:51:01,112	[INFO]	283	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:51:02,044	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:51:02,045	[INFO]	285	SUCCESS	+2.0	
2020-12-19 02:51:02,045	[DEBUG]	
2020-12-19 02:51:03,019	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:51:04,037	[INFO]	287	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:51:19,115	[INFO]	288	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:51:19,116	[INFO]	289	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:51:19,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:51:20,021	[INFO]	290	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:51:20,024	[INFO]	291	SUCCESS	+2.0	
2020-12-19 02:51:20,024	[DEBUG]	
2020-12-19 02:51:20,942	[INFO]	292	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:51:21,859	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:51:24,971	[INFO]	294	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:51:25,919	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:51:25,922	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:51:25,923	[DEBUG]	
2020-12-19 02:51:26,960	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:51:30,335	[INFO]	298	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:51:30,336	[INFO]	299	SUCCESS	+2.0	
2020-12-19 02:51:30,337	[DEBUG]	
2020-12-19 02:51:33,560	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:51:33,560	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:51:33,561	[INFO]	301	SUCCESS	+2.0	
2020-12-19 02:51:33,562	[DEBUG]	
2020-12-19 02:51:36,927	[INFO]	302	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:51:37,902	[INFO]	303	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:51:38,907	[INFO]	304	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:51:39,929	[INFO]	305	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:51:40,946	[INFO]	306	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:51:40,947	[INFO]	307	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:51:40,948	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:51:40,948	[INFO]	308	SUCCESS	+2.0	
2020-12-19 02:51:40,949	[DEBUG]	
2020-12-19 02:51:44,344	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:51:44,345	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:51:45,299	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:51:48,590	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:51:48,592	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,25 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+             unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,37 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:51:49,620	[INFO]	312	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:51:53,014	[INFO]	313	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:51:53,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:51:53,979	[INFO]	314	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:51:54,927	[INFO]	315	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:51:58,222	[INFO]	316	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:51:59,215	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:51:59,216	[INFO]	318	SUCCESS	+2.0	
2020-12-19 02:51:59,216	[DEBUG]	
2020-12-19 02:52:00,199	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:52:01,207	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:52:02,236	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:52:03,246	[INFO]	322	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:52:04,266	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:52:05,281	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 02:52:06,249	[INFO]	325	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:52:07,259	[INFO]	326	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:52:10,551	[INFO]	327	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:52:10,552	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:52:10,554	[INFO]	328	SUCCESS	+2.0	
2020-12-19 02:52:10,555	[DEBUG]	
2020-12-19 02:52:11,586	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:52:11,587	[INFO]	330	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:52:12,612	[INFO]	331	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:52:13,593	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:52:14,594	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:52:14,596	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:52:17,950	[INFO]	335	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:52:17,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:52:21,186	[INFO]	336	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:52:21,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,42 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 23,31 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:52:24,303	[INFO]	337	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:52:24,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:52:25,270	[INFO]	338	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:52:25,273	[INFO]	339	SUCCESS	+2.0	
2020-12-19 02:52:25,274	[DEBUG]	
2020-12-19 02:52:26,264	[INFO]	340	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:52:27,243	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:52:28,309	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:52:28,310	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:52:28,311	[DEBUG]	
2020-12-19 02:52:31,633	[INFO]	344	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:52:31,634	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:52:34,975	[INFO]	345	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:52:34,976	[INFO]	346	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:52:34,976	[DEBUG]	
2020-12-19 02:52:34,977	[INFO]	347	SUCCESS	+2.0	
2020-12-19 02:52:34,977	[DEBUG]	
2020-12-19 02:52:35,944	[INFO]	348	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:52:39,193	[INFO]	349	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:52:39,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:52:39,194	[INFO]	350	SUCCESS	+2.0	
2020-12-19 02:52:39,195	[DEBUG]	
2020-12-19 02:52:42,484	[INFO]	351	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:52:42,486	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:52:43,499	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:52:44,490	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:52:44,492	[INFO]	354	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:52:44,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:52:44,494	[INFO]	355	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:52:44,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:52:44,495	[INFO]	356	SUCCESS	+2.0	
2020-12-19 02:52:44,496	[DEBUG]	
2020-12-19 02:52:44,497	[INFO]	357	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:52:44,498	[DEBUG]	
2020-12-19 02:52:45,498	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:52:46,511	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:52:47,506	[INFO]	360	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:52:48,498	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:52:48,499	[INFO]	362	SUCCESS	+2.0	
2020-12-19 02:52:48,499	[DEBUG]	
2020-12-19 02:53:03,560	[INFO]	363	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:53:04,433	[INFO]	364	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:53:05,330	[INFO]	365	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:53:08,341	[INFO]	366	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:53:08,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 02:53:08,343	[INFO]	367	SUCCESS	+2.0	
2020-12-19 02:53:08,344	[DEBUG]	
2020-12-19 02:53:11,351	[INFO]	368	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:53:12,336	[INFO]	369	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:53:12,338	[INFO]	370	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:53:15,747	[INFO]	371	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:53:15,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 02:53:16,675	[INFO]	372	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:53:16,679	[INFO]	373	SUCCESS	+2.0	
2020-12-19 02:53:16,680	[DEBUG]	
2020-12-19 02:53:19,886	[INFO]	374	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:53:19,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:53:23,132	[INFO]	375	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:53:23,133	[INFO]	376	SUCCESS	+2.0	
2020-12-19 02:53:23,133	[DEBUG]	
2020-12-19 02:53:24,109	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:53:25,097	[INFO]	378	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:53:26,017	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:53:27,014	[INFO]	380	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:53:28,026	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:53:31,318	[INFO]	382	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:53:31,319	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:53:31,320	[INFO]	383	SUCCESS	+2.0	
2020-12-19 02:53:31,320	[DEBUG]	
2020-12-19 02:53:32,287	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:53:33,299	[INFO]	385	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 02:53:34,316	[INFO]	386	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:53:37,551	[INFO]	387	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:53:37,551	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:53:38,568	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:53:38,569	[INFO]	389	SUCCESS	+2.0	
2020-12-19 02:53:38,570	[DEBUG]	
2020-12-19 02:53:41,848	[INFO]	390	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:53:42,802	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:53:43,829	[INFO]	392	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:53:44,828	[INFO]	393	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:53:44,829	[INFO]	394	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:53:48,124	[INFO]	395	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:53:48,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,35 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 02:53:49,116	[INFO]	396	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:53:49,120	[INFO]	397	SUCCESS	+2.0	
2020-12-19 02:53:49,121	[DEBUG]	
2020-12-19 02:53:49,124	[INFO]	398	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:53:49,125	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:53:49,128	[INFO]	399	SUCCESS	+2.0	
2020-12-19 02:53:49,129	[DEBUG]	
2020-12-19 02:53:50,124	[INFO]	400	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:53:51,114	[INFO]	401	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:53:51,116	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:53:51,117	[INFO]	403	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:53:51,118	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:53:51,119	[INFO]	404	SUCCESS	+2.0	
2020-12-19 02:53:51,119	[DEBUG]	
2020-12-19 02:53:52,093	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:53:53,093	[INFO]	406	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 02:53:53,096	[INFO]	407	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:53:53,097	[DEBUG]	
2020-12-19 02:53:56,451	[INFO]	408	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:53:56,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:53:57,401	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:53:57,402	[INFO]	410	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:53:57,403	[DEBUG]	
2020-12-19 02:53:58,378	[INFO]	411	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 02:53:59,394	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:53:59,395	[INFO]	413	SUCCESS	+2.0	
2020-12-19 02:53:59,395	[DEBUG]	
2020-12-19 02:54:00,403	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:54:01,427	[INFO]	415	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 02:54:02,487	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:54:02,492	[INFO]	417	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:54:02,493	[DEBUG]	
2020-12-19 02:54:02,496	[INFO]	418	SUCCESS	+2.0	
2020-12-19 02:54:02,497	[DEBUG]	
2020-12-19 02:54:03,516	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:54:03,519	[INFO]	420	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:54:03,520	[DEBUG]	
2020-12-19 02:54:04,536	[INFO]	421	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 02:54:07,890	[INFO]	422	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:54:07,891	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:54:07,892	[INFO]	423	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:54:07,893	[DEBUG]	
2020-12-19 02:54:07,894	[INFO]	424	SUCCESS	+2.0	
2020-12-19 02:54:07,894	[DEBUG]	
2020-12-19 02:54:08,868	[INFO]	425	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:54:09,850	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:54:10,847	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:54:11,788	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:54:12,758	[INFO]	429	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:54:16,111	[INFO]	430	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:16,112	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:54:16,114	[INFO]	431	SUCCESS	+2.0	
2020-12-19 02:54:16,114	[DEBUG]	
2020-12-19 02:54:19,411	[INFO]	432	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:54:19,412	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:54:19,413	[INFO]	433	SUCCESS	+2.0	
2020-12-19 02:54:19,413	[DEBUG]	
2020-12-19 02:54:20,370	[INFO]	434	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:54:21,426	[INFO]	435	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:54:21,429	[INFO]	436	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:54:21,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:22,380	[INFO]	437	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:54:22,385	[INFO]	438	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:54:22,387	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:23,338	[INFO]	439	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:54:23,342	[INFO]	440	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:54:23,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:23,346	[INFO]	441	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:23,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:23,349	[INFO]	442	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:23,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:24,295	[INFO]	443	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:54:27,534	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:27,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,36 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 27,37 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:54:28,518	[INFO]	445	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:54:28,520	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:54:31,852	[INFO]	447	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:31,854	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:54:31,855	[INFO]	448	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:54:31,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:54:31,856	[INFO]	449	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:54:31,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 02:54:35,181	[INFO]	450	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:54:35,182	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:54:36,071	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:54:39,433	[INFO]	452	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:54:39,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 visitedNodes.add(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:54:40,386	[INFO]	453	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:54:41,332	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:54:41,333	[INFO]	455	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:54:41,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:54:41,335	[INFO]	456	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:54:41,335	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:54:41,336	[INFO]	457	SUCCESS	+2.0	
2020-12-19 02:54:41,336	[DEBUG]	
2020-12-19 02:54:44,713	[INFO]	458	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:54:45,680	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:54:45,681	[INFO]	460	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:54:45,682	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:46,653	[INFO]	461	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:54:46,657	[INFO]	462	SUCCESS	+2.0	
2020-12-19 02:54:46,658	[DEBUG]	
2020-12-19 02:54:46,661	[INFO]	463	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:54:46,663	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:54:46,665	[INFO]	464	SUCCESS	+2.0	
2020-12-19 02:54:46,666	[DEBUG]	
2020-12-19 02:54:46,669	[INFO]	465	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:54:46,670	[DEBUG]	
2020-12-19 02:54:46,673	[INFO]	466	SUCCESS	+2.0	
2020-12-19 02:54:46,674	[DEBUG]	
2020-12-19 02:54:50,074	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:54:50,075	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:54:50,076	[INFO]	468	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:54:50,077	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:54:51,052	[INFO]	469	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:54:52,023	[INFO]	470	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:54:55,293	[INFO]	471	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:54:55,294	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,31 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
--- 23,32 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:54:58,549	[INFO]	472	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 02:54:58,552	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 02:54:59,562	[INFO]	473	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 02:54:59,565	[INFO]	474	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:54:59,567	[DEBUG]	
2020-12-19 02:55:00,593	[INFO]	475	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:55:00,594	[INFO]	476	SUCCESS	+2.0	
2020-12-19 02:55:00,595	[DEBUG]	
2020-12-19 02:55:01,577	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:55:16,636	[INFO]	478	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:55:17,531	[INFO]	479	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:55:18,447	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:55:19,370	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:55:20,266	[INFO]	482	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 02:55:21,175	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:55:22,064	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:55:22,947	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:55:22,949	[INFO]	486	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:55:22,949	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 02:55:26,101	[INFO]	487	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:55:26,102	[INFO]	488	SUCCESS	+2.0	
2020-12-19 02:55:26,102	[DEBUG]	
2020-12-19 02:55:29,430	[INFO]	489	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 02:55:32,664	[INFO]	490	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:55:36,392	[INFO]	491	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:55:36,394	[INFO]	492	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:55:36,395	[DEBUG]	
2020-12-19 02:55:37,627	[INFO]	493	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:55:39,078	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:55:39,079	[INFO]	495	SUCCESS	+2.0	
2020-12-19 02:55:39,080	[DEBUG]	
2020-12-19 02:55:42,515	[INFO]	496	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:55:42,516	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:55:46,101	[INFO]	497	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:55:46,102	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:55:46,103	[INFO]	498	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:55:46,103	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:55:47,300	[INFO]	499	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 02:55:48,398	[INFO]	500	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:55:48,399	[INFO]	==== END ====
2020-12-19 02:55:48,399	[INFO]	Reason: step budget
2020-12-19 02:55:48,401	[INFO]	
2020-12-19 02:55:48,401	[INFO]	========== EPOCH 15 ==========
2020-12-19 02:55:48,402	[INFO]	==== WARMUP ====
2020-12-19 02:55:52,260	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:55:52,260	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:55:55,587	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:55:55,587	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:55:58,898	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 02:55:58,898	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:56:02,100	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 02:56:02,101	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 02:56:02,101	[INFO]	==== START ====
2020-12-19 02:56:05,350	[INFO]	1	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:56:06,385	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:56:07,430	[INFO]	3	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 02:56:10,846	[INFO]	4	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:56:10,847	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:56:10,848	[INFO]	5	SUCCESS	+2.0	
2020-12-19 02:56:10,848	[DEBUG]	
2020-12-19 02:56:11,919	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 02:56:15,344	[INFO]	7	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:56:16,403	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:56:16,407	[INFO]	9	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:56:16,408	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:56:17,442	[INFO]	10	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:56:17,446	[INFO]	11	SUCCESS	+2.0	
2020-12-19 02:56:17,448	[DEBUG]	
2020-12-19 02:56:18,480	[INFO]	12	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:56:18,482	[INFO]	13	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:56:18,482	[DEBUG]	
2020-12-19 02:56:18,483	[INFO]	14	SUCCESS	+2.0	
2020-12-19 02:56:18,483	[DEBUG]	
2020-12-19 02:56:19,482	[INFO]	15	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:56:22,764	[INFO]	16	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:56:22,765	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-19 02:56:22,766	[INFO]	17	SUCCESS	+2.0	
2020-12-19 02:56:22,766	[DEBUG]	
2020-12-19 02:56:23,711	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 02:56:24,738	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 02:56:25,772	[INFO]	20	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 02:56:29,028	[INFO]	21	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:56:29,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:56:32,414	[INFO]	22	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:56:32,415	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:56:35,638	[INFO]	23	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:56:38,938	[INFO]	24	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:56:38,939	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
!                 
              }
          }
  

2020-12-19 02:56:39,881	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:56:40,807	[INFO]	26	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 02:56:44,075	[INFO]	27	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:56:44,075	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:56:44,998	[INFO]	28	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:56:45,000	[INFO]	29	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:56:45,000	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:56:48,216	[INFO]	30	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:56:48,217	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 24,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:56:49,198	[INFO]	31	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:56:50,187	[INFO]	32	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:56:51,162	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:56:54,535	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 02:56:54,536	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 02:56:55,536	[INFO]	35	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 02:56:55,537	[INFO]	36	SUCCESS	+2.0	
2020-12-19 02:56:55,537	[DEBUG]	
2020-12-19 02:56:56,548	[INFO]	37	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:56:57,580	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:57:00,814	[INFO]	39	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:57:00,815	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:01,843	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 02:57:05,185	[INFO]	41	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 02:57:05,187	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 49,54 ****
--- 47,53 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 Set<Node> visitedNodes = new HashSet<>();
                  minNode = node;
              }
          }

2020-12-19 02:57:06,134	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:57:07,171	[INFO]	43	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 02:57:07,175	[INFO]	44	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:57:07,177	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:07,181	[INFO]	45	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:57:07,183	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:10,400	[INFO]	46	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:57:10,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:10,402	[INFO]	47	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:57:10,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.remove(node);
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:11,372	[INFO]	48	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 02:57:11,374	[INFO]	49	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:57:11,374	[DEBUG]	
2020-12-19 02:57:11,375	[INFO]	50	SUCCESS	+2.0	
2020-12-19 02:57:11,376	[DEBUG]	
2020-12-19 02:57:12,383	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:57:13,446	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 02:57:16,693	[INFO]	53	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:57:16,694	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:57:16,694	[INFO]	54	SUCCESS	+2.0	
2020-12-19 02:57:16,695	[DEBUG]	
2020-12-19 02:57:17,687	[INFO]	55	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:57:20,997	[INFO]	56	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 02:57:20,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:57:24,346	[INFO]	57	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:57:24,347	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:57:24,348	[INFO]	58	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:57:24,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:57:24,349	[INFO]	59	SUCCESS	+2.0	
2020-12-19 02:57:24,349	[DEBUG]	
2020-12-19 02:57:25,319	[INFO]	60	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 02:57:26,315	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:57:29,661	[INFO]	62	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:57:29,662	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 02:57:44,737	[INFO]	63	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:57:44,739	[INFO]	64	SUCCESS	+2.0	
2020-12-19 02:57:44,739	[DEBUG]	
2020-12-19 02:57:47,820	[INFO]	65	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:57:47,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:57:47,821	[INFO]	66	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:57:47,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 02:57:48,666	[INFO]	67	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:57:49,520	[INFO]	68	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:57:49,521	[INFO]	69	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 02:57:49,521	[DEBUG]	
2020-12-19 02:57:49,522	[INFO]	70	SUCCESS	+2.0	
2020-12-19 02:57:49,522	[DEBUG]	
2020-12-19 02:57:50,473	[INFO]	71	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:57:51,447	[INFO]	72	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:57:54,751	[INFO]	73	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 02:57:58,020	[INFO]	74	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:58:01,297	[INFO]	75	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:58:01,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:58:02,269	[INFO]	76	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 02:58:05,569	[INFO]	77	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:58:05,571	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:58:05,572	[INFO]	78	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:58:05,573	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:58:08,786	[INFO]	79	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:58:08,787	[INFO]	80	SUCCESS	+2.0	
2020-12-19 02:58:08,788	[DEBUG]	
2020-12-19 02:58:08,789	[INFO]	81	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:58:08,789	[DEBUG]	
2020-12-19 02:58:08,790	[INFO]	82	SUCCESS	+2.0	
2020-12-19 02:58:08,790	[DEBUG]	
2020-12-19 02:58:08,791	[INFO]	83	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:58:08,792	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     visitedNodes.add(node);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 02:58:08,792	[INFO]	84	SUCCESS	+2.0	
2020-12-19 02:58:08,793	[DEBUG]	
2020-12-19 02:58:09,768	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:58:10,777	[INFO]	86	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 02:58:11,760	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:58:12,766	[INFO]	88	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 02:58:13,780	[INFO]	89	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:58:17,105	[INFO]	90	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:58:17,105	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 02:58:20,336	[INFO]	91	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:58:20,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:58:20,338	[INFO]	92	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:58:20,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:58:21,354	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:58:21,357	[INFO]	94	SUCCESS	+2.0	
2020-12-19 02:58:21,357	[DEBUG]	
2020-12-19 02:58:22,372	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:58:22,377	[INFO]	96	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:58:25,602	[INFO]	97	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 02:58:26,607	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 02:58:27,642	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:58:28,877	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 02:58:33,445	[INFO]	101	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:58:34,761	[INFO]	102	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:58:38,392	[INFO]	103	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 02:58:38,393	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 02:58:39,664	[INFO]	104	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 02:58:39,665	[INFO]	105	SUCCESS	+2.0	
2020-12-19 02:58:39,666	[DEBUG]	
2020-12-19 02:58:39,667	[INFO]	106	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:58:39,668	[DEBUG]	
2020-12-19 02:58:39,669	[INFO]	107	SUCCESS	+2.0	
2020-12-19 02:58:39,670	[DEBUG]	
2020-12-19 02:58:40,708	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 02:58:55,773	[INFO]	109	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:58:56,637	[INFO]	110	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:58:56,638	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 02:58:59,649	[INFO]	112	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:59:00,539	[INFO]	113	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:59:01,461	[INFO]	114	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 02:59:02,385	[INFO]	115	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 02:59:05,604	[INFO]	116	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 02:59:05,605	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             unvisitedNodes.put(startnode, 0);
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 02:59:05,606	[INFO]	117	SUCCESS	+2.0	
2020-12-19 02:59:05,606	[DEBUG]	
2020-12-19 02:59:05,607	[INFO]	118	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:59:05,608	[DEBUG]	
2020-12-19 02:59:05,608	[INFO]	119	SUCCESS	+2.0	
2020-12-19 02:59:05,609	[DEBUG]	
2020-12-19 02:59:05,609	[INFO]	120	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 02:59:06,659	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 02:59:09,931	[INFO]	122	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 02:59:13,223	[INFO]	123	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 02:59:14,207	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 02:59:17,538	[INFO]	125	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:59:18,534	[INFO]	126	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 02:59:19,528	[INFO]	127	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:59:20,531	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 02:59:20,534	[INFO]	129	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:59:20,535	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:59:21,542	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 02:59:22,554	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 02:59:22,557	[INFO]	132	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:59:22,558	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:59:22,559	[INFO]	133	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 02:59:22,560	[DEBUG]	
2020-12-19 02:59:25,926	[INFO]	134	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:59:25,927	[INFO]	135	SUCCESS	+2.0	
2020-12-19 02:59:25,927	[DEBUG]	
2020-12-19 02:59:25,928	[INFO]	136	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:59:29,150	[INFO]	137	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 02:59:29,151	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 02:59:44,227	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:59:44,228	[INFO]	139	SUCCESS	+2.0	
2020-12-19 02:59:44,228	[DEBUG]	
2020-12-19 02:59:44,229	[INFO]	140	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:59:44,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:59:44,230	[INFO]	141	SUCCESS	+2.0	
2020-12-19 02:59:44,230	[DEBUG]	
2020-12-19 02:59:45,117	[INFO]	142	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 02:59:45,120	[INFO]	143	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 02:59:45,121	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 02:59:45,123	[INFO]	144	SUCCESS	+2.0	
2020-12-19 02:59:45,124	[DEBUG]	
2020-12-19 02:59:48,125	[INFO]	145	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 02:59:49,068	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 02:59:50,055	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 02:59:51,050	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 02:59:51,051	[INFO]	149	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 02:59:51,052	[INFO]	150	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 02:59:52,059	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 02:59:53,051	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 02:59:54,064	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 02:59:55,050	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 02:59:56,055	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:59:56,057	[INFO]	156	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:59:56,057	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:59:56,058	[INFO]	157	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 02:59:56,058	[DEBUG]	
2020-12-19 02:59:56,059	[INFO]	158	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 02:59:56,060	[INFO]	159	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 02:59:56,060	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 02:59:57,067	[INFO]	160	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:00:00,383	[INFO]	161	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:00:00,384	[INFO]	162	SUCCESS	+2.0	
2020-12-19 03:00:00,384	[DEBUG]	
2020-12-19 03:00:03,560	[INFO]	163	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:00:03,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             return Integer.MAX_VALUE;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:00:03,562	[INFO]	164	SUCCESS	+2.0	
2020-12-19 03:00:03,562	[DEBUG]	
2020-12-19 03:00:04,542	[INFO]	165	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:00:05,554	[INFO]	166	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:00:06,641	[INFO]	167	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:00:07,680	[INFO]	168	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:00:10,969	[INFO]	169	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:00:10,970	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:00:10,970	[INFO]	170	SUCCESS	+2.0	
2020-12-19 03:00:10,971	[DEBUG]	
2020-12-19 03:00:11,974	[INFO]	171	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:00:11,977	[INFO]	172	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:00:15,238	[INFO]	173	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:00:15,240	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Set<Node> visitedNodes = new HashSet<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 03:00:15,240	[INFO]	174	SUCCESS	+2.0	
2020-12-19 03:00:15,241	[DEBUG]	
2020-12-19 03:00:16,277	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:00:17,260	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:00:17,262	[INFO]	177	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:00:17,263	[INFO]	178	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:00:17,263	[DEBUG]	
2020-12-19 03:00:20,598	[INFO]	179	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:00:20,600	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:00:23,771	[INFO]	180	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:00:23,772	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:00:23,774	[INFO]	181	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:00:23,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:00:27,006	[INFO]	182	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:00:27,007	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:00:27,008	[INFO]	183	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:00:27,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:00:27,010	[INFO]	184	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:00:27,010	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:00:27,011	[INFO]	185	SUCCESS	+2.0	
2020-12-19 03:00:27,011	[DEBUG]	
2020-12-19 03:00:27,994	[INFO]	186	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:00:31,235	[INFO]	187	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:00:32,221	[INFO]	188	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:00:32,223	[INFO]	189	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:00:32,224	[INFO]	190	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:00:35,659	[INFO]	191	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:00:35,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:00:35,661	[INFO]	192	SUCCESS	+2.0	
2020-12-19 03:00:35,661	[DEBUG]	
2020-12-19 03:00:35,662	[INFO]	193	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:00:35,662	[DEBUG]	
2020-12-19 03:00:36,726	[INFO]	194	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:00:37,773	[INFO]	195	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:00:37,774	[INFO]	196	SUCCESS	+2.0	
2020-12-19 03:00:37,775	[DEBUG]	
2020-12-19 03:00:38,816	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:00:39,873	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:00:39,876	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:00:40,907	[INFO]	200	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:00:44,439	[INFO]	201	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:00:44,440	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:00:45,466	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:00:45,468	[INFO]	203	SUCCESS	+2.0	
2020-12-19 03:00:45,468	[DEBUG]	
2020-12-19 03:00:45,469	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:00:46,510	[INFO]	205	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:00:47,530	[INFO]	206	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:00:48,518	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:00:48,520	[INFO]	208	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:00:48,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:00:48,521	[INFO]	209	SUCCESS	+2.0	
2020-12-19 03:00:48,521	[DEBUG]	
2020-12-19 03:00:48,522	[INFO]	210	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:00:48,522	[DEBUG]	
2020-12-19 03:00:48,523	[INFO]	211	SUCCESS	+2.0	
2020-12-19 03:00:48,523	[DEBUG]	
2020-12-19 03:00:48,524	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:00:51,880	[INFO]	213	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:00:51,881	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 03:00:51,882	[INFO]	214	SUCCESS	+2.0	
2020-12-19 03:00:51,882	[DEBUG]	
2020-12-19 03:00:52,838	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:00:52,841	[INFO]	216	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:00:52,841	[DEBUG]	
2020-12-19 03:00:53,879	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:00:57,319	[INFO]	218	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:00:57,320	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 03:00:58,305	[INFO]	219	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:00:58,307	[INFO]	220	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:00:58,307	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             int minDistance = Integer.MAX_VALUE;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 03:00:58,308	[INFO]	221	SUCCESS	+2.0	
2020-12-19 03:00:58,308	[DEBUG]	
2020-12-19 03:00:58,309	[INFO]	222	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:00:58,310	[DEBUG]	
2020-12-19 03:00:58,310	[INFO]	223	SUCCESS	+2.0	
2020-12-19 03:00:58,310	[DEBUG]	
2020-12-19 03:01:01,518	[INFO]	224	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:01:04,782	[INFO]	225	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:01:04,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:01:04,783	[INFO]	226	SUCCESS	+2.0	
2020-12-19 03:01:04,784	[DEBUG]	
2020-12-19 03:01:05,766	[INFO]	227	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:01:05,770	[INFO]	228	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:01:05,771	[DEBUG]	
2020-12-19 03:01:05,772	[INFO]	229	SUCCESS	+2.0	
2020-12-19 03:01:05,773	[DEBUG]	
2020-12-19 03:01:09,131	[INFO]	230	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:01:09,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:12,278	[INFO]	231	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:01:12,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:12,280	[INFO]	232	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:01:12,280	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:13,293	[INFO]	233	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:01:13,296	[INFO]	234	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:01:13,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:16,461	[INFO]	235	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:01:16,463	[INFO]	236	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:01:16,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 36,42 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:16,465	[INFO]	237	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:01:16,465	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:19,662	[INFO]	238	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:01:20,565	[INFO]	239	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:01:20,570	[INFO]	240	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:01:20,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:23,754	[INFO]	241	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:01:23,755	[INFO]	242	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:01:23,756	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:23,757	[INFO]	243	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:01:23,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:27,003	[INFO]	244	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:01:27,004	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,32 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:27,005	[INFO]	245	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:01:27,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,32 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:27,955	[INFO]	246	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:01:27,958	[INFO]	247	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:01:27,959	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,42 ****
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 21,32 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 Node minNode = null;
                  return distance;
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:27,961	[INFO]	248	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:01:27,962	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:01:28,893	[INFO]	249	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:01:28,894	[INFO]	250	SUCCESS	+2.0	
2020-12-19 03:01:28,895	[DEBUG]	
2020-12-19 03:01:32,163	[INFO]	251	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:01:35,538	[INFO]	252	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:01:35,539	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:35,540	[INFO]	253	SUCCESS	+2.0	
2020-12-19 03:01:35,541	[DEBUG]	
2020-12-19 03:01:36,530	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:01:37,512	[INFO]	255	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:01:38,549	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:01:38,553	[INFO]	257	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:01:38,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:41,878	[INFO]	258	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:01:41,879	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:45,261	[INFO]	259	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:45,262	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:45,263	[INFO]	260	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:45,263	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:48,568	[INFO]	261	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:01:48,569	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:49,544	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:01:49,545	[INFO]	263	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:49,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:50,555	[INFO]	264	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:01:51,589	[INFO]	265	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:01:51,594	[INFO]	266	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:51,596	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:51,599	[INFO]	267	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:51,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:54,921	[INFO]	268	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:01:58,161	[INFO]	269	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:01:58,162	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:58,163	[INFO]	270	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:58,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:01:59,206	[INFO]	271	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:01:59,207	[INFO]	272	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:01:59,207	[DEBUG]	
2020-12-19 03:01:59,208	[INFO]	273	SUCCESS	+2.0	
2020-12-19 03:01:59,208	[DEBUG]	
2020-12-19 03:02:00,223	[INFO]	274	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:02:01,241	[INFO]	275	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:02:02,240	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:02:03,224	[INFO]	277	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:02:06,560	[INFO]	278	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:02:06,561	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:02:09,828	[INFO]	279	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:02:09,830	[INFO]	280	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:02:09,831	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:02:09,832	[INFO]	281	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:02:09,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:02:10,844	[INFO]	282	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:02:10,847	[INFO]	283	SUCCESS	+2.0	
2020-12-19 03:02:10,848	[DEBUG]	
2020-12-19 03:02:11,811	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:02:12,813	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:02:13,793	[INFO]	286	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:02:14,792	[INFO]	287	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:02:18,071	[INFO]	288	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:02:19,074	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:02:20,072	[INFO]	290	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:02:21,053	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:02:21,054	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:02:22,036	[INFO]	293	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:02:23,049	[INFO]	294	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:02:26,388	[INFO]	295	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:02:26,390	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:02:29,608	[INFO]	296	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:02:30,616	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:02:31,642	[INFO]	298	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:02:32,642	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:02:33,661	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:02:33,663	[INFO]	301	SUCCESS	+2.0	
2020-12-19 03:02:33,664	[DEBUG]	
2020-12-19 03:02:36,891	[INFO]	302	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:02:37,873	[INFO]	303	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:02:38,950	[INFO]	304	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:02:39,976	[INFO]	305	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:02:43,350	[INFO]	306	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:02:43,351	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:02:43,352	[INFO]	307	SUCCESS	+2.0	
2020-12-19 03:02:43,352	[DEBUG]	
2020-12-19 03:02:44,321	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:02:45,322	[INFO]	309	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:02:45,323	[INFO]	310	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:02:45,324	[DEBUG]	
2020-12-19 03:02:45,324	[INFO]	311	SUCCESS	+2.0	
2020-12-19 03:02:45,324	[DEBUG]	
2020-12-19 03:02:45,325	[INFO]	312	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:02:48,549	[INFO]	313	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:02:48,550	[INFO]	314	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:02:48,551	[INFO]	315	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:02:49,528	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:02:49,531	[INFO]	317	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:02:49,531	[DEBUG]	
2020-12-19 03:02:49,532	[INFO]	318	SUCCESS	+2.0	
2020-12-19 03:02:49,533	[DEBUG]	
2020-12-19 03:02:50,564	[INFO]	319	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:02:50,567	[INFO]	320	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:02:50,568	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:02:50,571	[INFO]	321	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:02:50,572	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:02:50,573	[INFO]	322	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:02:50,574	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:02:51,498	[INFO]	323	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:02:51,500	[INFO]	324	SUCCESS	+2.0	
2020-12-19 03:02:51,500	[DEBUG]	
2020-12-19 03:02:52,477	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:02:52,478	[INFO]	326	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:02:52,479	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:02:52,479	[INFO]	327	SUCCESS	+2.0	
2020-12-19 03:02:52,480	[DEBUG]	
2020-12-19 03:02:53,481	[INFO]	328	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:02:54,470	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:02:57,856	[INFO]	330	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:02:57,857	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:03:01,252	[INFO]	331	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:03:01,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:03:04,511	[INFO]	332	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:03:04,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:03:05,499	[INFO]	333	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:03:05,500	[INFO]	334	SUCCESS	+2.0	
2020-12-19 03:03:05,500	[DEBUG]	
2020-12-19 03:03:06,522	[INFO]	335	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:03:07,508	[INFO]	336	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:03:10,860	[INFO]	337	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:03:10,862	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 03:03:10,863	[INFO]	338	SUCCESS	+2.0	
2020-12-19 03:03:10,863	[DEBUG]	
2020-12-19 03:03:14,164	[INFO]	339	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:03:14,165	[INFO]	340	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:03:14,166	[DEBUG]	
2020-12-19 03:03:17,434	[INFO]	341	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:03:17,436	[INFO]	342	SUCCESS	+2.0	
2020-12-19 03:03:17,436	[DEBUG]	
2020-12-19 03:03:18,404	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:03:19,349	[INFO]	344	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:03:19,352	[INFO]	345	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:03:20,347	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:03:21,360	[INFO]	347	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:03:22,377	[INFO]	348	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:03:23,379	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:03:24,399	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:03:25,390	[INFO]	351	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:03:26,384	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:03:27,369	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:03:28,357	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:03:29,359	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:03:32,783	[INFO]	356	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:03:32,784	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:03:36,040	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:03:36,041	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 51,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:03:39,374	[INFO]	358	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:03:40,311	[INFO]	359	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:03:41,295	[INFO]	360	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:03:44,568	[INFO]	361	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:03:47,800	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:03:47,803	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 52,58 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:03:51,107	[INFO]	363	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:03:51,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 visitedNodes.add(node);
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 31,36 ****
--- 32,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:03:52,045	[INFO]	364	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:03:55,249	[INFO]	365	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:03:55,250	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:03:58,553	[INFO]	366	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:03:59,510	[INFO]	367	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:04:00,514	[INFO]	368	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:04:03,917	[INFO]	369	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:04:04,872	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:04:08,197	[INFO]	371	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:04:08,198	[INFO]	372	SUCCESS	+2.0	
2020-12-19 03:04:08,199	[DEBUG]	
2020-12-19 03:04:09,204	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:04:10,187	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:04:11,198	[INFO]	375	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:04:14,524	[INFO]	376	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:04:14,525	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:04:17,798	[INFO]	377	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:04:21,091	[INFO]	378	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:04:21,092	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 52,57 ****
--- 52,64 ----
                  minNode = node;
              }
          }
+         for (Node node : list.keySet()) {
+             int distance = list.get(node);
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
+         }
          return minNode;
      }
  }

2020-12-19 03:04:21,093	[INFO]	379	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:04:21,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int minDistance = Integer.MAX_VALUE;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:04:21,094	[INFO]	380	SUCCESS	+2.0	
2020-12-19 03:04:21,095	[DEBUG]	
2020-12-19 03:04:22,070	[INFO]	381	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:04:25,383	[INFO]	382	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:04:28,743	[INFO]	383	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:04:31,987	[INFO]	384	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:04:31,988	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:04:31,988	[INFO]	385	SUCCESS	+2.0	
2020-12-19 03:04:31,989	[DEBUG]	
2020-12-19 03:04:33,042	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:04:34,050	[INFO]	387	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:04:35,074	[INFO]	388	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:04:38,352	[INFO]	389	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:04:38,352	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:04:38,353	[INFO]	390	SUCCESS	+2.0	
2020-12-19 03:04:38,354	[DEBUG]	
2020-12-19 03:04:39,386	[INFO]	391	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:04:42,688	[INFO]	392	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:04:43,708	[INFO]	393	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:04:44,736	[INFO]	394	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:04:45,775	[INFO]	395	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:04:46,767	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:04:47,783	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:04:48,807	[INFO]	398	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:04:49,829	[INFO]	399	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:04:50,850	[INFO]	400	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:05:05,915	[INFO]	401	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:05:06,810	[INFO]	402	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:05:09,797	[INFO]	403	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:05:09,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:05:12,834	[INFO]	404	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:05:12,836	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:05:13,846	[INFO]	405	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:05:13,850	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:05:13,851	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:05:14,857	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:05:14,859	[INFO]	408	SUCCESS	+2.0	
2020-12-19 03:05:14,859	[DEBUG]	
2020-12-19 03:05:15,852	[INFO]	409	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:05:16,868	[INFO]	410	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:05:31,929	[INFO]	411	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:05:32,827	[INFO]	412	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:05:33,697	[INFO]	413	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:05:34,591	[INFO]	414	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:05:35,616	[INFO]	415	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:05:36,768	[INFO]	416	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:05:36,770	[INFO]	417	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:05:36,770	[DEBUG]	
2020-12-19 03:05:37,938	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:05:41,613	[INFO]	419	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:05:41,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 03:05:41,616	[INFO]	420	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:05:41,617	[DEBUG]	
2020-12-19 03:05:41,617	[INFO]	421	SUCCESS	+2.0	
2020-12-19 03:05:41,618	[DEBUG]	
2020-12-19 03:05:42,565	[INFO]	422	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:05:43,599	[INFO]	423	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:05:44,616	[INFO]	424	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:05:47,970	[INFO]	425	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:05:47,974	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:05:48,948	[INFO]	426	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:05:49,972	[INFO]	427	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:05:49,973	[INFO]	428	SUCCESS	+2.0	
2020-12-19 03:05:49,974	[DEBUG]	
2020-12-19 03:05:53,252	[INFO]	429	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:05:53,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:05:53,254	[INFO]	430	SUCCESS	+2.0	
2020-12-19 03:05:53,254	[DEBUG]	
2020-12-19 03:05:56,431	[INFO]	431	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:05:56,434	[INFO]	432	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:05:56,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:05:57,432	[INFO]	433	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:06:00,713	[INFO]	434	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:06:00,715	[INFO]	435	SUCCESS	+2.0	
2020-12-19 03:06:00,715	[DEBUG]	
2020-12-19 03:06:04,034	[INFO]	436	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:06:05,028	[INFO]	437	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:06:05,029	[INFO]	438	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:06:06,014	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:06:07,019	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:06:10,287	[INFO]	441	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:06:10,287	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:06:10,288	[INFO]	442	SUCCESS	+2.0	
2020-12-19 03:06:10,289	[DEBUG]	
2020-12-19 03:06:13,595	[INFO]	443	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:06:14,491	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:06:15,516	[INFO]	445	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:06:16,521	[INFO]	446	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:06:19,743	[INFO]	447	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:06:19,745	[INFO]	448	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:06:19,745	[DEBUG]	
2020-12-19 03:06:20,694	[INFO]	449	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:06:20,696	[INFO]	450	SUCCESS	+2.0	
2020-12-19 03:06:20,696	[DEBUG]	
2020-12-19 03:06:21,722	[INFO]	451	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:06:21,723	[INFO]	452	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:06:22,737	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:06:23,736	[INFO]	454	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:06:24,783	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:06:25,918	[INFO]	456	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:06:26,975	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:06:27,994	[INFO]	458	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:06:28,995	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:06:32,278	[INFO]	460	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:06:32,279	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:06:32,280	[INFO]	461	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:06:32,281	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:06:32,281	[INFO]	462	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:06:32,282	[DEBUG]	
2020-12-19 03:06:32,282	[INFO]	463	SUCCESS	+2.0	
2020-12-19 03:06:32,283	[DEBUG]	
2020-12-19 03:06:35,559	[INFO]	464	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:06:35,560	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:06:38,785	[INFO]	465	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:06:38,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:06:39,718	[INFO]	466	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:06:42,951	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:06:42,952	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 03:06:43,908	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:06:47,193	[INFO]	469	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:06:48,156	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:06:48,157	[INFO]	471	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:06:48,158	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,41 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return distance;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:06:51,398	[INFO]	472	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:06:51,398	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:06:51,399	[INFO]	473	SUCCESS	+2.0	
2020-12-19 03:06:51,400	[DEBUG]	
2020-12-19 03:06:51,400	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:06:54,597	[INFO]	475	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:06:54,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:06:57,898	[INFO]	476	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:06:57,899	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:06:58,879	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:07:02,145	[INFO]	478	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:07:02,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 
! 
!                 unvisitedNodes.remove(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:07:05,428	[INFO]	479	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:07:05,432	[INFO]	480	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:07:05,433	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:07:06,454	[INFO]	481	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:07:09,760	[INFO]	482	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:07:09,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:07:10,726	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:07:10,727	[INFO]	484	SUCCESS	+2.0	
2020-12-19 03:07:10,727	[DEBUG]	
2020-12-19 03:07:10,728	[INFO]	485	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:07:10,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:07:11,727	[INFO]	486	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:07:11,728	[INFO]	487	SUCCESS	+2.0	
2020-12-19 03:07:11,729	[DEBUG]	
2020-12-19 03:07:12,672	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:07:13,664	[INFO]	489	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:07:14,687	[INFO]	490	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:07:14,689	[INFO]	491	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:07:15,705	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:07:16,711	[INFO]	493	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:07:20,045	[INFO]	494	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:07:21,013	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:07:22,026	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:07:23,021	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:07:24,002	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:07:24,003	[INFO]	499	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:07:24,003	[DEBUG]	
2020-12-19 03:07:24,004	[INFO]	500	SUCCESS	+2.0	
2020-12-19 03:07:24,004	[DEBUG]	
2020-12-19 03:07:24,005	[INFO]	==== END ====
2020-12-19 03:07:24,005	[INFO]	Reason: step budget
2020-12-19 03:07:24,005	[INFO]	
2020-12-19 03:07:24,005	[INFO]	========== EPOCH 16 ==========
2020-12-19 03:07:24,006	[INFO]	==== WARMUP ====
2020-12-19 03:07:27,327	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:07:27,327	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:07:31,597	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:07:31,597	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:07:34,949	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:07:34,950	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:07:38,440	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 03:07:38,440	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:07:38,440	[INFO]	==== START ====
2020-12-19 03:07:39,673	[INFO]	1	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:07:40,695	[INFO]	2	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:07:41,727	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:07:42,718	[INFO]	4	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:07:42,722	[INFO]	5	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:07:42,724	[DEBUG]	
2020-12-19 03:07:42,726	[INFO]	6	SUCCESS	+2.0	
2020-12-19 03:07:42,727	[DEBUG]	
2020-12-19 03:07:46,043	[INFO]	7	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:07:49,347	[INFO]	8	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:07:49,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:07:50,357	[INFO]	9	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:07:53,685	[INFO]	10	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:07:53,686	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,37 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:07:54,682	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:07:54,684	[INFO]	12	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:07:54,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:07:54,685	[INFO]	13	SUCCESS	+2.0	
2020-12-19 03:07:54,685	[DEBUG]	
2020-12-19 03:07:55,684	[INFO]	14	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:07:55,685	[INFO]	15	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:07:55,686	[DEBUG]	
2020-12-19 03:07:56,676	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:07:57,704	[INFO]	17	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:08:01,002	[INFO]	18	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:08:01,003	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:08:01,004	[INFO]	19	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:08:01,005	[DEBUG]	
2020-12-19 03:08:04,251	[INFO]	20	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:08:04,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:08:04,253	[INFO]	21	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:08:04,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:08:04,254	[INFO]	22	SUCCESS	+2.0	
2020-12-19 03:08:04,254	[DEBUG]	
2020-12-19 03:08:04,255	[INFO]	23	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:08:04,256	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:08:04,256	[INFO]	24	SUCCESS	+2.0	
2020-12-19 03:08:04,257	[DEBUG]	
2020-12-19 03:08:05,246	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:08:08,549	[INFO]	26	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:08:08,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,33 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:08:08,551	[INFO]	27	SUCCESS	+2.0	
2020-12-19 03:08:08,551	[DEBUG]	
2020-12-19 03:08:09,552	[INFO]	28	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:08:12,831	[INFO]	29	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:08:12,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:08:12,833	[INFO]	30	SUCCESS	+2.0	
2020-12-19 03:08:12,833	[DEBUG]	
2020-12-19 03:08:16,085	[INFO]	31	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:08:19,402	[INFO]	32	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:08:20,337	[INFO]	33	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:08:21,323	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:08:21,324	[INFO]	35	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:08:21,325	[DEBUG]	
2020-12-19 03:08:22,307	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:08:23,338	[INFO]	37	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:08:26,617	[INFO]	38	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:08:26,619	[INFO]	39	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:08:29,931	[INFO]	40	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:08:29,932	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:08:30,897	[INFO]	42	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:08:30,899	[INFO]	43	SUCCESS	+2.0	
2020-12-19 03:08:30,899	[DEBUG]	
2020-12-19 03:08:31,921	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:08:35,225	[INFO]	45	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:08:35,227	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:08:36,266	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:08:36,270	[INFO]	47	SUCCESS	+2.0	
2020-12-19 03:08:36,271	[DEBUG]	
2020-12-19 03:08:39,587	[INFO]	48	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:08:39,588	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:08:40,497	[INFO]	49	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:08:40,498	[INFO]	50	SUCCESS	+2.0	
2020-12-19 03:08:40,499	[DEBUG]	
2020-12-19 03:08:41,482	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:08:41,484	[INFO]	52	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:08:41,485	[DEBUG]	
2020-12-19 03:08:41,486	[INFO]	53	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:08:41,486	[DEBUG]	
2020-12-19 03:08:41,487	[INFO]	54	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:08:41,487	[DEBUG]	
2020-12-19 03:08:41,488	[INFO]	55	SUCCESS	+2.0	
2020-12-19 03:08:41,488	[DEBUG]	
2020-12-19 03:08:41,489	[INFO]	56	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:08:42,451	[INFO]	57	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:08:43,482	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:08:43,485	[INFO]	59	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:08:44,490	[INFO]	60	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:08:45,493	[INFO]	61	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:08:48,740	[INFO]	62	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:08:48,741	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:08:49,745	[INFO]	63	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:08:49,747	[INFO]	64	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:08:49,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:08:49,749	[INFO]	65	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:08:49,750	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:08:49,751	[INFO]	66	SUCCESS	+2.0	
2020-12-19 03:08:49,752	[DEBUG]	
2020-12-19 03:08:50,749	[INFO]	67	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:08:51,761	[INFO]	68	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:08:52,766	[INFO]	69	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:08:56,094	[INFO]	70	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:08:56,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minNode = node;
                  minNode = node;
              }
          }

2020-12-19 03:08:57,054	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:08:58,074	[INFO]	72	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:08:59,064	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:08:59,066	[INFO]	74	SUCCESS	+2.0	
2020-12-19 03:08:59,067	[DEBUG]	
2020-12-19 03:09:00,062	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:09:03,297	[INFO]	76	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:09:03,298	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:09:04,286	[INFO]	77	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:09:04,287	[INFO]	78	SUCCESS	+2.0	
2020-12-19 03:09:04,287	[DEBUG]	
2020-12-19 03:09:05,276	[INFO]	79	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:09:06,264	[INFO]	80	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:09:09,562	[INFO]	81	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:09:10,562	[INFO]	82	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:09:11,578	[INFO]	83	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:09:14,766	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:09:14,767	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:09:14,768	[INFO]	85	SUCCESS	+2.0	
2020-12-19 03:09:14,768	[DEBUG]	
2020-12-19 03:09:15,779	[INFO]	86	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:09:15,781	[INFO]	87	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:09:15,781	[INFO]	88	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:09:15,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:09:19,047	[INFO]	89	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:09:19,048	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:09:19,049	[INFO]	90	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:09:19,050	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:09:19,051	[INFO]	91	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:09:19,051	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:09:20,029	[INFO]	92	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:09:21,009	[INFO]	93	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:09:22,019	[INFO]	94	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:09:22,020	[INFO]	95	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:09:22,020	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:09:23,002	[INFO]	96	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:09:23,996	[INFO]	97	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:09:23,998	[INFO]	98	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:09:23,999	[INFO]	99	SUCCESS	+2.0	
2020-12-19 03:09:23,999	[DEBUG]	
2020-12-19 03:09:24,001	[INFO]	100	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:09:24,002	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:09:25,058	[INFO]	101	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:09:25,060	[INFO]	102	SUCCESS	+2.0	
2020-12-19 03:09:25,060	[DEBUG]	
2020-12-19 03:09:28,378	[INFO]	103	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:09:28,379	[INFO]	104	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:09:31,620	[INFO]	105	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:09:31,621	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     int minDistance = Integer.MAX_VALUE;
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:09:32,606	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:09:32,608	[INFO]	107	SUCCESS	+2.0	
2020-12-19 03:09:32,609	[DEBUG]	
2020-12-19 03:09:33,703	[INFO]	108	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:09:34,689	[INFO]	109	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:09:35,721	[INFO]	110	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:09:35,723	[INFO]	111	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:09:35,724	[DEBUG]	
2020-12-19 03:09:35,725	[INFO]	112	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:09:35,726	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:09:38,977	[INFO]	113	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:09:38,978	[INFO]	114	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:09:38,978	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:09:38,979	[INFO]	115	SUCCESS	+2.0	
2020-12-19 03:09:38,979	[DEBUG]	
2020-12-19 03:09:42,167	[INFO]	116	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:09:45,396	[INFO]	117	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:09:45,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:09:48,530	[INFO]	118	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:09:49,451	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:09:49,452	[INFO]	120	SUCCESS	+2.0	
2020-12-19 03:09:49,453	[DEBUG]	
2020-12-19 03:09:50,480	[INFO]	121	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:09:53,797	[INFO]	122	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:09:53,798	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:09:53,799	[INFO]	123	SUCCESS	+2.0	
2020-12-19 03:09:53,800	[DEBUG]	
2020-12-19 03:09:57,073	[INFO]	124	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:09:57,074	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:09:58,060	[INFO]	125	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:09:58,062	[INFO]	126	SUCCESS	+2.0	
2020-12-19 03:09:58,062	[DEBUG]	
2020-12-19 03:10:01,326	[INFO]	127	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:10:02,303	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:10:05,492	[INFO]	129	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:10:05,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:10:06,392	[INFO]	130	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:10:07,332	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:10:07,333	[INFO]	132	SUCCESS	+2.0	
2020-12-19 03:10:07,334	[DEBUG]	
2020-12-19 03:10:07,335	[INFO]	133	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:10:07,335	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:10:08,349	[INFO]	134	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:10:09,366	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:10:10,323	[INFO]	136	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:10:11,266	[INFO]	137	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:10:12,281	[INFO]	138	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:10:13,278	[INFO]	139	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:10:14,265	[INFO]	140	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:10:14,266	[INFO]	141	SUCCESS	+2.0	
2020-12-19 03:10:14,266	[DEBUG]	
2020-12-19 03:10:17,568	[INFO]	142	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:10:20,920	[INFO]	143	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:10:21,890	[INFO]	144	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:10:25,307	[INFO]	145	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:10:26,242	[INFO]	146	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:10:26,243	[INFO]	147	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:10:26,243	[DEBUG]	
2020-12-19 03:10:26,244	[INFO]	148	SUCCESS	+2.0	
2020-12-19 03:10:26,244	[DEBUG]	
2020-12-19 03:10:26,245	[INFO]	149	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:10:26,246	[DEBUG]	
2020-12-19 03:10:26,247	[INFO]	150	SUCCESS	+2.0	
2020-12-19 03:10:26,247	[DEBUG]	
2020-12-19 03:10:27,219	[INFO]	151	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:10:28,272	[INFO]	152	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:10:28,274	[INFO]	153	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:10:29,262	[INFO]	154	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:10:30,287	[INFO]	155	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:10:30,289	[INFO]	156	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:10:30,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:10:30,290	[INFO]	157	SUCCESS	+2.0	
2020-12-19 03:10:30,290	[DEBUG]	
2020-12-19 03:10:30,291	[INFO]	158	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:10:31,319	[INFO]	159	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:10:31,320	[INFO]	160	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:10:31,321	[INFO]	161	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:10:31,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:10:34,584	[INFO]	162	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:10:34,586	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 continue;
! 
!                 
              }
          }
  

2020-12-19 03:10:35,898	[INFO]	163	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:10:36,871	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:10:37,829	[INFO]	165	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:10:38,787	[INFO]	166	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:10:38,788	[INFO]	167	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:10:38,788	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:10:39,744	[INFO]	168	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:10:39,745	[INFO]	169	SUCCESS	+2.0	
2020-12-19 03:10:39,746	[DEBUG]	
2020-12-19 03:10:43,074	[INFO]	170	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:10:46,338	[INFO]	171	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:10:46,339	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:10:46,340	[INFO]	172	SUCCESS	+2.0	
2020-12-19 03:10:46,340	[DEBUG]	
2020-12-19 03:10:47,356	[INFO]	173	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:10:48,392	[INFO]	174	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:10:49,330	[INFO]	175	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:10:49,331	[INFO]	176	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:10:49,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:11:04,409	[INFO]	177	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:11:04,410	[INFO]	178	SUCCESS	+2.0	
2020-12-19 03:11:04,410	[DEBUG]	
2020-12-19 03:11:05,328	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:11:05,330	[INFO]	180	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:11:05,331	[DEBUG]	
2020-12-19 03:11:06,234	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:11:06,239	[INFO]	182	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:11:06,241	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:11:06,244	[INFO]	183	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:11:06,245	[DEBUG]	
2020-12-19 03:11:06,250	[INFO]	184	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:11:06,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:11:06,255	[INFO]	185	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:11:06,256	[DEBUG]	
2020-12-19 03:11:06,259	[INFO]	186	SUCCESS	+2.0	
2020-12-19 03:11:06,260	[DEBUG]	
2020-12-19 03:11:06,266	[INFO]	187	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:11:06,267	[DEBUG]	
2020-12-19 03:11:06,269	[INFO]	188	SUCCESS	+2.0	
2020-12-19 03:11:06,270	[DEBUG]	
2020-12-19 03:11:09,235	[INFO]	189	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:11:09,236	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:11:10,243	[INFO]	190	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:11:11,286	[INFO]	191	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:11:14,519	[INFO]	192	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:11:14,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
- 
-                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
-                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
              }
          }
  

2020-12-19 03:11:17,854	[INFO]	193	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:11:17,855	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,41 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
- 
-                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
-                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 31,42 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:11:18,781	[INFO]	194	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:11:22,084	[INFO]	195	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:11:22,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:11:25,340	[INFO]	196	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:25,341	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,42 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
              }
          }
  
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:11:28,710	[INFO]	197	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:28,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:11:32,055	[INFO]	198	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:32,057	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:11:33,077	[INFO]	199	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:11:33,080	[INFO]	200	SUCCESS	+2.0	
2020-12-19 03:11:33,081	[DEBUG]	
2020-12-19 03:11:34,100	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:11:34,103	[INFO]	202	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:11:35,090	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:11:36,107	[INFO]	204	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:11:37,090	[INFO]	205	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:11:37,091	[INFO]	206	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:11:37,092	[DEBUG]	
2020-12-19 03:11:40,354	[INFO]	207	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:11:40,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:11:40,356	[INFO]	208	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:11:40,356	[DEBUG]	
2020-12-19 03:11:40,357	[INFO]	209	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:11:40,358	[INFO]	210	SUCCESS	+2.0	
2020-12-19 03:11:40,358	[DEBUG]	
2020-12-19 03:11:43,751	[INFO]	211	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:11:43,752	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:11:43,753	[INFO]	212	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:43,753	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:11:44,760	[INFO]	213	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:11:45,754	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:11:46,746	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:11:50,072	[INFO]	216	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:11:53,450	[INFO]	217	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:11:53,451	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return distance;
              }
          }
  

2020-12-19 03:11:53,453	[INFO]	218	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:53,453	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:11:53,454	[INFO]	219	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:11:53,454	[DEBUG]	
2020-12-19 03:11:53,455	[INFO]	220	SUCCESS	+2.0	
2020-12-19 03:11:53,455	[DEBUG]	
2020-12-19 03:11:54,437	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:11:55,487	[INFO]	222	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:11:56,503	[INFO]	223	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:11:57,520	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:11:58,533	[INFO]	225	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:11:59,526	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:12:00,491	[INFO]	227	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:12:01,489	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:12:04,744	[INFO]	229	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:12:05,750	[INFO]	230	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:12:05,752	[INFO]	231	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:12:05,753	[DEBUG]	
2020-12-19 03:12:05,754	[INFO]	232	SUCCESS	+2.0	
2020-12-19 03:12:05,754	[DEBUG]	
2020-12-19 03:12:05,756	[INFO]	233	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:12:09,144	[INFO]	234	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:12:09,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-19 03:12:24,203	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:12:27,193	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:12:27,194	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,32 ****
--- 26,37 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-19 03:12:27,195	[INFO]	237	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:12:27,195	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      continue;
                  }
  

2020-12-19 03:12:30,202	[INFO]	238	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:12:30,203	[INFO]	239	SUCCESS	+2.0	
2020-12-19 03:12:30,203	[DEBUG]	
2020-12-19 03:12:30,206	[INFO]	240	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:12:30,206	[DEBUG]	
2020-12-19 03:12:30,207	[INFO]	241	SUCCESS	+2.0	
2020-12-19 03:12:30,208	[DEBUG]	
2020-12-19 03:12:33,405	[INFO]	242	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:12:33,406	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:12:33,408	[INFO]	243	SUCCESS	+2.0	
2020-12-19 03:12:33,408	[DEBUG]	
2020-12-19 03:12:34,416	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:12:37,694	[INFO]	245	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:12:38,693	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:12:42,028	[INFO]	247	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:12:42,029	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:12:43,003	[INFO]	248	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:12:43,006	[INFO]	249	SUCCESS	+2.0	
2020-12-19 03:12:43,008	[DEBUG]	
2020-12-19 03:12:44,006	[INFO]	250	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:12:44,991	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:12:45,988	[INFO]	252	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:12:49,336	[INFO]	253	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:12:49,337	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:12:49,338	[INFO]	254	SUCCESS	+2.0	
2020-12-19 03:12:49,338	[DEBUG]	
2020-12-19 03:12:50,370	[INFO]	255	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:12:51,366	[INFO]	256	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:12:54,714	[INFO]	257	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:12:55,666	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:12:59,009	[INFO]	259	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:13:00,004	[INFO]	260	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:13:00,008	[INFO]	261	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:13:00,009	[DEBUG]	
2020-12-19 03:13:01,018	[INFO]	262	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:13:01,020	[INFO]	263	SUCCESS	+2.0	
2020-12-19 03:13:01,021	[DEBUG]	
2020-12-19 03:13:02,012	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:13:05,304	[INFO]	265	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:13:05,305	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:13:08,544	[INFO]	266	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:13:08,545	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,33 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 23,33 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:13:11,789	[INFO]	267	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:13:11,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:13:11,790	[INFO]	268	SUCCESS	+2.0	
2020-12-19 03:13:11,791	[DEBUG]	
2020-12-19 03:13:12,787	[INFO]	269	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:13:13,792	[INFO]	270	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:13:14,806	[INFO]	271	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:13:18,030	[INFO]	272	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:13:19,041	[INFO]	273	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:13:22,406	[INFO]	274	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:13:22,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:13:22,408	[INFO]	275	SUCCESS	+2.0	
2020-12-19 03:13:22,409	[DEBUG]	
2020-12-19 03:13:23,359	[INFO]	276	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:13:24,344	[INFO]	277	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:13:27,815	[INFO]	278	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:13:27,816	[INFO]	279	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:13:31,105	[INFO]	280	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:13:32,036	[INFO]	281	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:13:32,037	[INFO]	282	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:13:32,038	[DEBUG]	
2020-12-19 03:13:33,098	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:13:33,100	[INFO]	284	SUCCESS	+2.0	
2020-12-19 03:13:33,100	[DEBUG]	
2020-12-19 03:13:36,440	[INFO]	285	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:13:37,382	[INFO]	286	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:13:38,413	[INFO]	287	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:13:53,482	[INFO]	288	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:13:56,472	[INFO]	289	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:13:56,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:13:57,378	[INFO]	290	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:13:57,380	[INFO]	291	SUCCESS	+2.0	
2020-12-19 03:13:57,381	[DEBUG]	
2020-12-19 03:13:58,294	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:13:59,188	[INFO]	293	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:14:00,122	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:14:03,366	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:14:03,367	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 visitedNodes.add(node);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:14:03,368	[INFO]	296	SUCCESS	+2.0	
2020-12-19 03:14:03,368	[DEBUG]	
2020-12-19 03:14:03,369	[INFO]	297	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:14:03,370	[DEBUG]	
2020-12-19 03:14:03,370	[INFO]	298	SUCCESS	+2.0	
2020-12-19 03:14:03,371	[DEBUG]	
2020-12-19 03:14:04,358	[INFO]	299	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:14:07,605	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:14:07,606	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:14:10,759	[INFO]	301	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:14:10,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:14:14,160	[INFO]	302	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:14:14,161	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:14:14,163	[INFO]	303	SUCCESS	+2.0	
2020-12-19 03:14:14,163	[DEBUG]	
2020-12-19 03:14:17,466	[INFO]	304	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:14:17,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:18,439	[INFO]	305	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:14:19,424	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:14:19,426	[INFO]	307	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:19,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:19,428	[INFO]	308	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:14:19,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:19,429	[INFO]	309	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:19,430	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:19,431	[INFO]	310	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:14:19,432	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:19,433	[INFO]	311	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:19,434	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:20,421	[INFO]	312	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:20,424	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:14:20,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:14:20,426	[INFO]	314	SUCCESS	+2.0	
2020-12-19 03:14:20,427	[DEBUG]	
2020-12-19 03:14:20,428	[INFO]	315	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:14:20,428	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:14:20,429	[INFO]	316	SUCCESS	+2.0	
2020-12-19 03:14:20,430	[DEBUG]	
2020-12-19 03:14:21,462	[INFO]	317	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:14:22,504	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:14:23,484	[INFO]	319	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:14:24,450	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:14:25,426	[INFO]	321	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:14:26,403	[INFO]	322	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:14:27,468	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:14:30,770	[INFO]	324	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:14:31,756	[INFO]	325	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:14:31,757	[INFO]	326	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:14:31,758	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:14:32,758	[INFO]	327	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:14:33,811	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:14:34,838	[INFO]	329	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:14:35,842	[INFO]	330	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:14:35,846	[INFO]	331	SUCCESS	+2.0	
2020-12-19 03:14:35,847	[DEBUG]	
2020-12-19 03:14:36,782	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:14:37,825	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:14:41,144	[INFO]	334	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:14:41,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:14:44,343	[INFO]	335	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:14:44,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:14:44,345	[INFO]	336	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:14:44,346	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:14:45,325	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:14:45,326	[INFO]	338	SUCCESS	+2.0	
2020-12-19 03:14:45,326	[DEBUG]	
2020-12-19 03:14:46,329	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:14:47,358	[INFO]	340	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:14:48,366	[INFO]	341	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:14:49,359	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:14:50,359	[INFO]	343	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:14:51,379	[INFO]	344	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:14:52,373	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:14:55,632	[INFO]	346	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:14:55,632	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:14:55,633	[INFO]	347	SUCCESS	+2.0	
2020-12-19 03:14:55,634	[DEBUG]	
2020-12-19 03:14:58,972	[INFO]	348	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:58,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:14:58,975	[INFO]	349	SUCCESS	+2.0	
2020-12-19 03:14:58,975	[DEBUG]	
2020-12-19 03:14:59,923	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:14:59,924	[INFO]	351	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:14:59,925	[DEBUG]	
2020-12-19 03:14:59,925	[INFO]	352	SUCCESS	+2.0	
2020-12-19 03:14:59,926	[DEBUG]	
2020-12-19 03:15:00,905	[INFO]	353	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:15:01,901	[INFO]	354	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:15:05,175	[INFO]	355	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:15:05,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:05,178	[INFO]	356	SUCCESS	+2.0	
2020-12-19 03:15:05,179	[DEBUG]	
2020-12-19 03:15:08,506	[INFO]	357	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:15:08,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 29,34 ****
--- 29,37 ----
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:15:08,508	[INFO]	358	SUCCESS	+2.0	
2020-12-19 03:15:08,508	[DEBUG]	
2020-12-19 03:15:11,799	[INFO]	359	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:15:11,800	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 minNode = node;
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:11,800	[INFO]	360	SUCCESS	+2.0	
2020-12-19 03:15:11,801	[DEBUG]	
2020-12-19 03:15:12,754	[INFO]	361	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:15:13,767	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:15:14,775	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:15:15,790	[INFO]	364	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:15:15,793	[INFO]	365	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:15:15,794	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:16,812	[INFO]	366	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:15:16,817	[INFO]	367	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:15:16,819	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:20,044	[INFO]	368	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:15:20,045	[INFO]	369	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:15:20,046	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:21,005	[INFO]	370	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:15:22,032	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:15:23,050	[INFO]	372	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:15:23,053	[INFO]	373	SUCCESS	+2.0	
2020-12-19 03:15:23,054	[DEBUG]	
2020-12-19 03:15:24,040	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:15:24,041	[INFO]	375	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:15:24,042	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:15:24,042	[INFO]	376	SUCCESS	+2.0	
2020-12-19 03:15:24,043	[DEBUG]	
2020-12-19 03:15:25,030	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:15:28,273	[INFO]	378	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:15:31,601	[INFO]	379	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:15:31,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:15:31,603	[INFO]	380	SUCCESS	+2.0	
2020-12-19 03:15:31,603	[DEBUG]	
2020-12-19 03:15:32,580	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:15:32,581	[INFO]	382	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:15:33,606	[INFO]	383	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:15:37,475	[INFO]	384	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:15:37,476	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:15:38,691	[INFO]	385	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:15:38,693	[INFO]	386	SUCCESS	+2.0	
2020-12-19 03:15:38,693	[DEBUG]	
2020-12-19 03:15:40,103	[INFO]	387	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:15:40,105	[INFO]	388	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:15:40,106	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:15:40,108	[INFO]	389	SUCCESS	+2.0	
2020-12-19 03:15:40,108	[DEBUG]	
2020-12-19 03:15:41,164	[INFO]	390	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:15:44,444	[INFO]	391	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:15:44,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:15:45,438	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:15:49,456	[INFO]	393	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:15:49,457	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:15:49,459	[INFO]	394	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:15:49,460	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:15:49,461	[INFO]	395	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:15:49,462	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:15:49,463	[INFO]	396	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:15:49,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:15:50,743	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:15:54,229	[INFO]	398	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:15:54,230	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:15:57,412	[INFO]	399	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:15:57,414	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 34,39 ****
--- 36,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 int minDistance = Integer.MAX_VALUE;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:16:00,768	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:16:00,770	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 29,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:16:01,742	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:16:01,745	[INFO]	402	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:16:01,747	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 29,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:16:05,133	[INFO]	403	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:16:05,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 49,55 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:16:06,195	[INFO]	404	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:16:07,206	[INFO]	405	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:16:10,500	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:16:10,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,40 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:16:13,864	[INFO]	407	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:16:13,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 29,42 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:16:17,107	[INFO]	408	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:16:17,109	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         unvisitedNodes.put(startnode, 0);
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 29,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:16:20,425	[INFO]	409	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:16:20,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     int minDistance = Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:16:20,426	[INFO]	410	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:16:20,427	[DEBUG]	
2020-12-19 03:16:20,427	[INFO]	411	SUCCESS	+2.0	
2020-12-19 03:16:20,428	[DEBUG]	
2020-12-19 03:16:21,379	[INFO]	412	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:16:24,614	[INFO]	413	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:16:24,616	[INFO]	414	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:16:25,622	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:16:26,635	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:16:27,638	[INFO]	417	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:16:27,639	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:16:28,622	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:16:28,624	[INFO]	420	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:16:28,625	[DEBUG]	
2020-12-19 03:16:31,908	[INFO]	421	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:16:32,916	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:16:36,234	[INFO]	423	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:16:36,235	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:16:36,236	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:16:36,237	[DEBUG]	
2020-12-19 03:16:39,545	[INFO]	425	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:16:39,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:16:39,548	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:16:40,546	[INFO]	427	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:16:40,548	[INFO]	428	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:16:40,548	[DEBUG]	
2020-12-19 03:16:40,549	[INFO]	429	SUCCESS	+2.0	
2020-12-19 03:16:40,549	[DEBUG]	
2020-12-19 03:16:40,550	[INFO]	430	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:16:40,550	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:16:43,929	[INFO]	431	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:16:44,926	[INFO]	432	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:16:48,238	[INFO]	433	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:16:51,444	[INFO]	434	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:16:51,445	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:52,481	[INFO]	435	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:16:52,483	[INFO]	436	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:16:52,484	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:55,772	[INFO]	437	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:16:55,774	[INFO]	438	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:16:55,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:55,776	[INFO]	439	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:16:55,776	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:55,777	[INFO]	440	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:16:55,778	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:58,998	[INFO]	441	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:16:58,999	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:59,000	[INFO]	442	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:16:59,001	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:59,002	[INFO]	443	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:16:59,002	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,52 ****
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
+             Set<Node> visitedNodes = new HashSet<>();
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;

2020-12-19 03:16:59,003	[INFO]	444	SUCCESS	+2.0	
2020-12-19 03:16:59,003	[DEBUG]	
2020-12-19 03:17:02,294	[INFO]	445	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:17:02,295	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:17:03,284	[INFO]	446	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:17:04,268	[INFO]	447	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:17:05,303	[INFO]	448	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:17:05,305	[INFO]	449	SUCCESS	+2.0	
2020-12-19 03:17:05,306	[DEBUG]	
2020-12-19 03:17:06,332	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:17:07,309	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:17:08,293	[INFO]	452	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:17:09,305	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:17:10,312	[INFO]	454	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:17:11,300	[INFO]	455	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:17:12,311	[INFO]	456	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:17:15,496	[INFO]	457	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:17:15,498	[INFO]	458	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:17:15,499	[DEBUG]	
2020-12-19 03:17:16,490	[INFO]	459	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:17:16,493	[INFO]	460	SUCCESS	+2.0	
2020-12-19 03:17:16,493	[DEBUG]	
2020-12-19 03:17:19,771	[INFO]	461	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:17:19,771	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:17:23,055	[INFO]	462	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:17:26,307	[INFO]	463	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:17:26,308	[INFO]	464	SUCCESS	+2.0	
2020-12-19 03:17:26,308	[DEBUG]	
2020-12-19 03:17:27,322	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:17:30,681	[INFO]	466	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:17:31,660	[INFO]	467	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:17:34,951	[INFO]	468	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:17:38,322	[INFO]	469	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:17:39,331	[INFO]	470	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:17:40,312	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:17:41,349	[INFO]	472	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:17:42,332	[INFO]	473	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:17:57,390	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:17:58,281	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:18:01,306	[INFO]	476	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:18:01,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:18:01,307	[INFO]	477	SUCCESS	+2.0	
2020-12-19 03:18:01,307	[DEBUG]	
2020-12-19 03:18:04,268	[INFO]	478	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:18:04,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:18:05,180	[INFO]	479	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:18:06,142	[INFO]	480	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:18:06,143	[INFO]	481	SUCCESS	+2.0	
2020-12-19 03:18:06,143	[DEBUG]	
2020-12-19 03:18:07,158	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:18:07,162	[INFO]	483	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:18:07,163	[DEBUG]	
2020-12-19 03:18:08,157	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:18:11,495	[INFO]	485	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:18:11,496	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:18:11,497	[INFO]	486	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:18:11,498	[DEBUG]	
2020-12-19 03:18:11,498	[INFO]	487	SUCCESS	+2.0	
2020-12-19 03:18:11,499	[DEBUG]	
2020-12-19 03:18:14,816	[INFO]	488	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:18:14,817	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 36,41 ****
--- 36,44 ----
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  

2020-12-19 03:18:14,818	[INFO]	489	SUCCESS	+2.0	
2020-12-19 03:18:14,818	[DEBUG]	
2020-12-19 03:18:15,793	[INFO]	490	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:18:19,078	[INFO]	491	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:18:19,079	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:18:20,027	[INFO]	492	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:18:20,028	[INFO]	493	SUCCESS	+2.0	
2020-12-19 03:18:20,029	[DEBUG]	
2020-12-19 03:18:21,032	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:18:22,018	[INFO]	495	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:18:23,005	[INFO]	496	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:18:23,006	[INFO]	497	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:18:24,007	[INFO]	498	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:18:27,238	[INFO]	499	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:18:28,252	[INFO]	500	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:18:28,253	[INFO]	==== END ====
2020-12-19 03:18:28,253	[INFO]	Reason: step budget
2020-12-19 03:18:28,254	[INFO]	
2020-12-19 03:18:28,254	[INFO]	========== EPOCH 17 ==========
2020-12-19 03:18:28,255	[INFO]	==== WARMUP ====
2020-12-19 03:18:31,646	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:18:31,646	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:18:35,245	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:18:35,245	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:18:38,478	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:18:38,479	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:18:42,053	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 03:18:42,053	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:18:42,053	[INFO]	==== START ====
2020-12-19 03:18:45,674	[INFO]	1	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:18:45,675	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:18:48,858	[INFO]	2	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:18:48,859	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:18:48,860	[INFO]	3	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:18:48,860	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:18:52,155	[INFO]	4	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:18:52,156	[INFO]	5	SUCCESS	+2.0	
2020-12-19 03:18:52,156	[DEBUG]	
2020-12-19 03:18:53,147	[INFO]	6	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:18:54,151	[INFO]	7	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:18:57,416	[INFO]	8	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:18:57,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:18:58,412	[INFO]	9	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:18:59,421	[INFO]	10	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:19:00,439	[INFO]	11	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:19:00,442	[INFO]	12	SUCCESS	+2.0	
2020-12-19 03:19:00,444	[DEBUG]	
2020-12-19 03:19:00,447	[INFO]	13	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:19:00,448	[DEBUG]	
2020-12-19 03:19:00,450	[INFO]	14	SUCCESS	+2.0	
2020-12-19 03:19:00,452	[DEBUG]	
2020-12-19 03:19:03,720	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:19:03,721	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      continue;
                  }
  

2020-12-19 03:19:04,733	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:19:04,736	[INFO]	17	SUCCESS	+2.0	
2020-12-19 03:19:04,737	[DEBUG]	
2020-12-19 03:19:04,738	[INFO]	18	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:19:04,739	[DEBUG]	
2020-12-19 03:19:05,755	[INFO]	19	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:19:06,748	[INFO]	20	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:19:06,750	[INFO]	21	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:19:06,750	[DEBUG]	
2020-12-19 03:19:06,751	[INFO]	22	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:19:06,751	[DEBUG]	
2020-12-19 03:19:07,741	[INFO]	23	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:19:10,944	[INFO]	24	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:19:10,945	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:19:14,201	[INFO]	25	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:19:14,202	[INFO]	26	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:19:14,203	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:19:17,402	[INFO]	27	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:19:17,403	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:19:17,405	[INFO]	28	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:19:17,405	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:19:18,366	[INFO]	29	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:19:18,369	[INFO]	30	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:19:18,371	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:19:19,314	[INFO]	31	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:19:20,257	[INFO]	32	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:19:23,443	[INFO]	33	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:19:26,610	[INFO]	34	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:19:26,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:19:29,854	[INFO]	35	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:19:29,855	[INFO]	36	SUCCESS	+2.0	
2020-12-19 03:19:29,855	[DEBUG]	
2020-12-19 03:19:30,813	[INFO]	37	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:19:31,823	[INFO]	38	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:19:32,835	[INFO]	39	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:19:33,895	[INFO]	40	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:19:34,888	[INFO]	41	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:19:35,902	[INFO]	42	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:19:36,908	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:19:37,934	[INFO]	44	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:19:38,954	[INFO]	45	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:19:42,303	[INFO]	46	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:19:42,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 Node minNode = null;
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:19:43,280	[INFO]	47	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:19:43,281	[INFO]	48	SUCCESS	+2.0	
2020-12-19 03:19:43,281	[DEBUG]	
2020-12-19 03:19:44,303	[INFO]	49	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:19:45,332	[INFO]	50	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:19:46,338	[INFO]	51	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:19:47,314	[INFO]	52	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:19:48,300	[INFO]	53	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:19:49,295	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:19:52,600	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:19:52,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,37 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 30,37 ----
                      continue;
                  }
  
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:19:53,604	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:19:53,605	[INFO]	57	SUCCESS	+2.0	
2020-12-19 03:19:53,605	[DEBUG]	
2020-12-19 03:19:56,895	[INFO]	58	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:19:56,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:19:56,896	[INFO]	59	SUCCESS	+2.0	
2020-12-19 03:19:56,897	[DEBUG]	
2020-12-19 03:19:57,855	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:19:58,872	[INFO]	61	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:20:02,179	[INFO]	62	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:20:02,180	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:20:02,181	[INFO]	63	SUCCESS	+2.0	
2020-12-19 03:20:02,181	[DEBUG]	
2020-12-19 03:20:02,182	[INFO]	64	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:20:02,182	[DEBUG]	
2020-12-19 03:20:03,160	[INFO]	65	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:20:03,162	[INFO]	66	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:20:03,162	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:20:03,163	[INFO]	67	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:20:03,163	[DEBUG]	
2020-12-19 03:20:03,164	[INFO]	68	SUCCESS	+2.0	
2020-12-19 03:20:03,164	[DEBUG]	
2020-12-19 03:20:04,172	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:20:05,170	[INFO]	70	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:20:08,507	[INFO]	71	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:20:08,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node node = getNodeWithMinDistance(unvisitedNodes);
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 03:20:08,509	[INFO]	72	SUCCESS	+2.0	
2020-12-19 03:20:08,509	[DEBUG]	
2020-12-19 03:20:09,508	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:20:12,888	[INFO]	74	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:20:13,882	[INFO]	75	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:20:13,886	[INFO]	76	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:20:13,887	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:20:17,116	[INFO]	77	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:20:17,117	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:20:18,084	[INFO]	78	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:20:21,359	[INFO]	79	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:20:21,360	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     visitedNodes.add(node);
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:20:24,706	[INFO]	80	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:20:24,707	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:20:27,871	[INFO]	81	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:20:27,873	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:20:28,871	[INFO]	82	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:20:28,873	[INFO]	83	SUCCESS	+2.0	
2020-12-19 03:20:28,874	[DEBUG]	
2020-12-19 03:20:28,875	[INFO]	84	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:20:28,876	[DEBUG]	
2020-12-19 03:20:28,877	[INFO]	85	SUCCESS	+2.0	
2020-12-19 03:20:28,877	[DEBUG]	
2020-12-19 03:20:28,879	[INFO]	86	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:20:28,880	[DEBUG]	
2020-12-19 03:20:32,117	[INFO]	87	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:20:32,118	[INFO]	88	SUCCESS	+2.0	
2020-12-19 03:20:32,119	[DEBUG]	
2020-12-19 03:20:32,120	[INFO]	89	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:20:32,121	[DEBUG]	
2020-12-19 03:20:32,122	[INFO]	90	SUCCESS	+2.0	
2020-12-19 03:20:32,122	[DEBUG]	
2020-12-19 03:20:33,131	[INFO]	91	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:20:36,565	[INFO]	92	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:20:36,566	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-19 03:20:39,924	[INFO]	93	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:20:39,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,32 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-19 03:20:39,926	[INFO]	94	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:20:39,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(startnode, 0);
                      continue;
                  }
  

2020-12-19 03:20:39,927	[INFO]	95	SUCCESS	+2.0	
2020-12-19 03:20:39,928	[DEBUG]	
2020-12-19 03:20:43,234	[INFO]	96	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:20:43,238	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:20:43,239	[INFO]	97	SUCCESS	+2.0	
2020-12-19 03:20:43,240	[DEBUG]	
2020-12-19 03:20:46,571	[INFO]	98	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:20:46,573	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,38 ----
                      continue;
                  }
  
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:20:47,564	[INFO]	99	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:20:48,542	[INFO]	100	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:20:48,545	[INFO]	101	SUCCESS	+2.0	
2020-12-19 03:20:48,546	[DEBUG]	
2020-12-19 03:20:51,786	[INFO]	102	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:20:51,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:20:55,091	[INFO]	103	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:20:55,092	[INFO]	104	SUCCESS	+2.0	
2020-12-19 03:20:55,092	[DEBUG]	
2020-12-19 03:20:56,055	[INFO]	105	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:20:56,057	[INFO]	106	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:20:59,370	[INFO]	107	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:20:59,372	[INFO]	108	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:20:59,372	[DEBUG]	
2020-12-19 03:20:59,373	[INFO]	109	SUCCESS	+2.0	
2020-12-19 03:20:59,373	[DEBUG]	
2020-12-19 03:21:00,358	[INFO]	110	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:21:00,359	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:21:01,365	[INFO]	112	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:21:02,366	[INFO]	113	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:21:03,369	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:21:06,710	[INFO]	115	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:21:06,711	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             unvisitedNodes.put(startnode, 0);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 03:21:06,712	[INFO]	116	SUCCESS	+2.0	
2020-12-19 03:21:06,712	[DEBUG]	
2020-12-19 03:21:07,667	[INFO]	117	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:21:07,669	[INFO]	118	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:21:08,653	[INFO]	119	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:21:12,097	[INFO]	120	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:21:12,098	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:21:12,098	[INFO]	121	SUCCESS	+2.0	
2020-12-19 03:21:12,099	[DEBUG]	
2020-12-19 03:21:13,039	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:21:14,065	[INFO]	123	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:21:15,062	[INFO]	124	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:21:16,081	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:21:19,380	[INFO]	126	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:21:19,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:21:20,366	[INFO]	127	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:21:35,444	[INFO]	128	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:21:35,445	[INFO]	129	SUCCESS	+2.0	
2020-12-19 03:21:35,446	[DEBUG]	
2020-12-19 03:21:36,329	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:21:37,230	[INFO]	131	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:21:40,232	[INFO]	132	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:21:40,233	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:21:40,234	[INFO]	133	SUCCESS	+2.0	
2020-12-19 03:21:40,234	[DEBUG]	
2020-12-19 03:21:43,651	[INFO]	134	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:21:43,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:21:44,646	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:21:44,647	[INFO]	136	SUCCESS	+2.0	
2020-12-19 03:21:44,648	[DEBUG]	
2020-12-19 03:21:44,648	[INFO]	137	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:21:44,649	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:21:47,989	[INFO]	138	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:21:47,990	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:21:47,991	[INFO]	139	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:21:47,992	[DEBUG]	
2020-12-19 03:21:47,993	[INFO]	140	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:21:47,993	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:21:51,244	[INFO]	141	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:21:52,230	[INFO]	142	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:21:55,507	[INFO]	143	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:21:58,835	[INFO]	144	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:21:58,838	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:21:59,819	[INFO]	145	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:22:03,192	[INFO]	146	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:22:06,501	[INFO]	147	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:22:06,503	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:22:06,504	[INFO]	148	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:06,505	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
!                 if (unvisitedNodes.get(nextnode) != null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:22:06,506	[INFO]	149	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:06,506	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:22:06,507	[INFO]	150	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:06,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:22:06,509	[INFO]	151	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:06,509	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:22:07,490	[INFO]	152	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:22:07,491	[INFO]	153	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:22:07,492	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 int minDistance = Integer.MAX_VALUE;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:22:10,675	[INFO]	154	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:22:10,676	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:22:13,914	[INFO]	155	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:22:17,173	[INFO]	156	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:22:17,175	[INFO]	157	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:17,176	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:22:20,472	[INFO]	158	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:22:20,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:22:23,697	[INFO]	159	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:22:24,681	[INFO]	160	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:22:25,691	[INFO]	161	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:22:25,692	[INFO]	162	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:22:25,693	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:22:25,693	[INFO]	163	SUCCESS	+2.0	
2020-12-19 03:22:25,694	[DEBUG]	
2020-12-19 03:22:29,093	[INFO]	164	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:22:30,052	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:22:31,036	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:22:34,410	[INFO]	167	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:22:34,411	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             visitedNodes.add(node);
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:22:34,412	[INFO]	168	SUCCESS	+2.0	
2020-12-19 03:22:34,412	[DEBUG]	
2020-12-19 03:22:35,399	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:22:38,819	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:22:38,820	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:22:38,821	[INFO]	171	SUCCESS	+2.0	
2020-12-19 03:22:38,821	[DEBUG]	
2020-12-19 03:22:39,770	[INFO]	172	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:22:40,774	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:22:44,096	[INFO]	174	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:22:45,080	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:22:46,066	[INFO]	176	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:22:49,347	[INFO]	177	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:22:49,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:22:52,737	[INFO]	178	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:22:53,691	[INFO]	179	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:22:53,693	[INFO]	180	SUCCESS	+2.0	
2020-12-19 03:22:53,694	[DEBUG]	
2020-12-19 03:22:54,700	[INFO]	181	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:22:58,103	[INFO]	182	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:22:58,104	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 11,16 ****
--- 11,17 ----
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
+         Node minNode = null;
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);

2020-12-19 03:23:01,385	[INFO]	183	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:23:01,386	[INFO]	184	SUCCESS	+2.0	
2020-12-19 03:23:01,386	[DEBUG]	
2020-12-19 03:23:04,688	[INFO]	185	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:23:04,689	[INFO]	186	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:23:04,690	[DEBUG]	
2020-12-19 03:23:05,659	[INFO]	187	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:23:05,660	[INFO]	188	SUCCESS	+2.0	
2020-12-19 03:23:05,660	[DEBUG]	
2020-12-19 03:23:06,719	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:23:07,715	[INFO]	190	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:23:08,717	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:23:09,795	[INFO]	192	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:23:09,799	[INFO]	193	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:23:09,800	[DEBUG]	
2020-12-19 03:23:09,803	[INFO]	194	SUCCESS	+2.0	
2020-12-19 03:23:09,804	[DEBUG]	
2020-12-19 03:23:10,828	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:23:11,813	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:23:12,821	[INFO]	197	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:23:16,142	[INFO]	198	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:23:16,143	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:23:16,144	[INFO]	199	SUCCESS	+2.0	
2020-12-19 03:23:16,144	[DEBUG]	
2020-12-19 03:23:19,493	[INFO]	200	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:23:19,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:23:22,759	[INFO]	201	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:23:22,761	[INFO]	202	SUCCESS	+2.0	
2020-12-19 03:23:22,761	[DEBUG]	
2020-12-19 03:23:23,754	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:23:27,104	[INFO]	204	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:23:27,105	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:30,447	[INFO]	205	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:23:30,448	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:31,447	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:23:31,451	[INFO]	207	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:23:31,452	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:32,444	[INFO]	208	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:23:32,445	[INFO]	209	SUCCESS	+2.0	
2020-12-19 03:23:32,446	[DEBUG]	
2020-12-19 03:23:33,530	[INFO]	210	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:23:34,546	[INFO]	211	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:23:35,552	[INFO]	212	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:23:35,553	[INFO]	213	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:23:35,554	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:23:36,551	[INFO]	214	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:23:37,547	[INFO]	215	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:23:37,548	[INFO]	216	SUCCESS	+2.0	
2020-12-19 03:23:37,548	[DEBUG]	
2020-12-19 03:23:37,549	[INFO]	217	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:23:38,580	[INFO]	218	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:23:38,586	[INFO]	219	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:23:39,572	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:23:40,561	[INFO]	221	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:23:41,555	[INFO]	222	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:23:44,846	[INFO]	223	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:23:45,754	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:23:45,758	[INFO]	225	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:23:45,760	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:23:45,762	[INFO]	226	SUCCESS	+2.0	
2020-12-19 03:23:45,763	[DEBUG]	
2020-12-19 03:23:46,748	[INFO]	227	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:23:47,752	[INFO]	228	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:23:51,132	[INFO]	229	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:23:54,380	[INFO]	230	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:23:54,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:57,632	[INFO]	231	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:23:57,633	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 visitedNodes.add(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:57,634	[INFO]	232	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:23:57,634	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:23:57,635	[INFO]	233	SUCCESS	+2.0	
2020-12-19 03:23:57,635	[DEBUG]	
2020-12-19 03:23:57,636	[INFO]	234	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:23:58,602	[INFO]	235	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:23:58,604	[INFO]	236	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:23:58,604	[DEBUG]	
2020-12-19 03:23:58,605	[INFO]	237	SUCCESS	+2.0	
2020-12-19 03:23:58,606	[DEBUG]	
2020-12-19 03:23:58,606	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:23:59,639	[INFO]	239	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:23:59,641	[INFO]	240	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:23:59,642	[DEBUG]	
2020-12-19 03:23:59,643	[INFO]	241	SUCCESS	+2.0	
2020-12-19 03:23:59,643	[DEBUG]	
2020-12-19 03:24:00,654	[INFO]	242	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:24:01,710	[INFO]	243	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:24:02,702	[INFO]	244	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:24:02,703	[INFO]	245	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:24:02,703	[DEBUG]	
2020-12-19 03:24:02,704	[INFO]	246	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:24:02,705	[INFO]	247	SUCCESS	+2.0	
2020-12-19 03:24:02,705	[DEBUG]	
2020-12-19 03:24:03,719	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:24:03,720	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:24:04,698	[INFO]	250	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:24:08,021	[INFO]	251	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:24:08,022	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:24:08,023	[INFO]	252	SUCCESS	+2.0	
2020-12-19 03:24:08,023	[DEBUG]	
2020-12-19 03:24:08,024	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:24:11,228	[INFO]	254	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:24:11,229	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:24:11,229	[INFO]	255	SUCCESS	+2.0	
2020-12-19 03:24:11,230	[DEBUG]	
2020-12-19 03:24:12,242	[INFO]	256	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:24:15,565	[INFO]	257	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:24:18,914	[INFO]	258	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:24:19,857	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:24:23,132	[INFO]	260	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:24:23,133	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:24:23,134	[INFO]	261	SUCCESS	+2.0	
2020-12-19 03:24:23,134	[DEBUG]	
2020-12-19 03:24:24,119	[INFO]	262	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:24:24,122	[INFO]	263	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:24:24,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:24:27,445	[INFO]	264	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:24:28,409	[INFO]	265	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:24:28,411	[INFO]	266	SUCCESS	+2.0	
2020-12-19 03:24:28,412	[DEBUG]	
2020-12-19 03:24:31,699	[INFO]	267	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:24:31,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:24:31,701	[INFO]	268	SUCCESS	+2.0	
2020-12-19 03:24:31,701	[DEBUG]	
2020-12-19 03:24:31,702	[INFO]	269	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:24:31,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:24:31,703	[INFO]	270	SUCCESS	+2.0	
2020-12-19 03:24:31,704	[DEBUG]	
2020-12-19 03:24:32,722	[INFO]	271	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:24:32,723	[INFO]	272	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:24:32,724	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:24:32,725	[INFO]	273	SUCCESS	+2.0	
2020-12-19 03:24:32,725	[DEBUG]	
2020-12-19 03:24:33,715	[INFO]	274	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:24:37,069	[INFO]	275	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:24:38,078	[INFO]	276	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:24:39,081	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:24:42,237	[INFO]	278	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:24:42,238	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:24:42,238	[INFO]	279	SUCCESS	+2.0	
2020-12-19 03:24:42,239	[DEBUG]	
2020-12-19 03:24:43,244	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:24:44,243	[INFO]	281	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:24:44,244	[INFO]	282	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:24:44,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:24:45,267	[INFO]	283	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:24:45,269	[INFO]	284	SUCCESS	+2.0	
2020-12-19 03:24:45,269	[DEBUG]	
2020-12-19 03:24:46,274	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:24:46,281	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:24:47,294	[INFO]	287	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:24:47,296	[INFO]	288	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:24:50,630	[INFO]	289	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:24:50,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:24:50,632	[INFO]	290	SUCCESS	+2.0	
2020-12-19 03:24:50,632	[DEBUG]	
2020-12-19 03:24:51,618	[INFO]	291	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:24:52,654	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:24:55,917	[INFO]	293	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:24:56,919	[INFO]	294	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:24:57,908	[INFO]	295	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:25:01,256	[INFO]	296	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:25:01,257	[INFO]	297	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:25:01,257	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:25:01,258	[INFO]	298	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:25:01,259	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:25:01,259	[INFO]	299	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:25:01,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:25:04,624	[INFO]	300	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:25:04,624	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:25:07,832	[INFO]	301	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:25:07,833	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:25:08,818	[INFO]	302	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:25:12,200	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:25:12,202	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,37 ----
                      continue;
                  }
  
+                 Node minNode = null;
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:25:15,468	[INFO]	304	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:25:15,470	[INFO]	305	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:25:15,470	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:25:16,479	[INFO]	306	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:25:16,482	[INFO]	307	SUCCESS	+2.0	
2020-12-19 03:25:16,483	[DEBUG]	
2020-12-19 03:25:31,554	[INFO]	308	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:25:32,446	[INFO]	309	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:25:33,414	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:25:34,336	[INFO]	311	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:25:38,081	[INFO]	312	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:25:41,764	[INFO]	313	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:25:41,766	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,46 ----
              }
          }
  
+         Node minNode = null;
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 03:25:41,768	[INFO]	314	SUCCESS	+2.0	
2020-12-19 03:25:41,768	[DEBUG]	
2020-12-19 03:25:41,770	[INFO]	315	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:25:42,763	[INFO]	316	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:25:43,783	[INFO]	317	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:25:44,812	[INFO]	318	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:25:45,806	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:25:46,828	[INFO]	320	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:25:47,841	[INFO]	321	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:25:48,872	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:25:49,861	[INFO]	323	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:25:50,868	[INFO]	324	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:25:54,234	[INFO]	325	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:25:55,188	[INFO]	326	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:25:55,189	[INFO]	327	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:25:55,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:25:55,190	[INFO]	328	SUCCESS	+2.0	
2020-12-19 03:25:55,191	[DEBUG]	
2020-12-19 03:25:58,537	[INFO]	329	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:25:58,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,27 ****
--- 21,29 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
              }
              visitedNodes.add(node);
  

2020-12-19 03:25:58,540	[INFO]	330	SUCCESS	+2.0	
2020-12-19 03:25:58,540	[DEBUG]	
2020-12-19 03:25:58,542	[INFO]	331	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:25:58,542	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:25:58,543	[INFO]	332	SUCCESS	+2.0	
2020-12-19 03:25:58,544	[DEBUG]	
2020-12-19 03:26:01,924	[INFO]	333	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:26:02,883	[INFO]	334	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:26:03,866	[INFO]	335	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:26:04,839	[INFO]	336	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:26:04,840	[INFO]	337	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:26:04,840	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:04,841	[INFO]	338	SUCCESS	+2.0	
2020-12-19 03:26:04,841	[DEBUG]	
2020-12-19 03:26:08,140	[INFO]	339	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:26:08,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 03:26:08,143	[INFO]	340	SUCCESS	+2.0	
2020-12-19 03:26:08,143	[DEBUG]	
2020-12-19 03:26:08,145	[INFO]	341	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:26:09,123	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:26:12,376	[INFO]	343	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:26:12,377	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:26:12,378	[INFO]	344	SUCCESS	+2.0	
2020-12-19 03:26:12,378	[DEBUG]	
2020-12-19 03:26:12,380	[INFO]	345	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:26:12,380	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:15,708	[INFO]	346	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:26:15,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:15,713	[INFO]	347	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:26:15,714	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:15,716	[INFO]	348	SUCCESS	+2.0	
2020-12-19 03:26:15,717	[DEBUG]	
2020-12-19 03:26:15,722	[INFO]	349	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:26:15,723	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:16,718	[INFO]	350	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:26:17,721	[INFO]	351	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:26:18,717	[INFO]	352	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:26:18,720	[INFO]	353	SUCCESS	+2.0	
2020-12-19 03:26:18,721	[DEBUG]	
2020-12-19 03:26:19,765	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:26:34,832	[INFO]	355	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:26:34,834	[INFO]	356	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:26:34,835	[INFO]	357	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:26:34,835	[DEBUG]	
2020-12-19 03:26:35,778	[INFO]	358	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:26:36,703	[INFO]	359	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:26:39,635	[INFO]	360	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:26:39,636	[INFO]	361	SUCCESS	+2.0	
2020-12-19 03:26:39,637	[DEBUG]	
2020-12-19 03:26:40,538	[INFO]	362	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:26:43,819	[INFO]	363	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:26:43,819	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:26:43,820	[INFO]	364	SUCCESS	+2.0	
2020-12-19 03:26:43,821	[DEBUG]	
2020-12-19 03:26:43,821	[INFO]	365	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:26:43,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:26:47,092	[INFO]	366	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:26:47,093	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:47,094	[INFO]	367	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:26:47,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:47,095	[INFO]	368	SUCCESS	+2.0	
2020-12-19 03:26:47,096	[DEBUG]	
2020-12-19 03:26:47,097	[INFO]	369	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:26:47,097	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:47,098	[INFO]	370	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:26:47,098	[DEBUG]	
2020-12-19 03:26:47,099	[INFO]	371	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:26:47,100	[INFO]	372	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:26:47,100	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:26:47,101	[INFO]	373	SUCCESS	+2.0	
2020-12-19 03:26:47,101	[DEBUG]	
2020-12-19 03:26:48,138	[INFO]	374	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:26:49,163	[INFO]	375	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:26:50,170	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:26:51,174	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:26:54,520	[INFO]	378	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:26:54,521	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:26:54,522	[INFO]	379	SUCCESS	+2.0	
2020-12-19 03:26:54,522	[DEBUG]	
2020-12-19 03:26:55,476	[INFO]	380	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:26:56,471	[INFO]	381	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:26:57,452	[INFO]	382	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:26:58,437	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:26:59,456	[INFO]	384	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:27:02,878	[INFO]	385	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:27:03,826	[INFO]	386	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:27:04,790	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:27:04,792	[INFO]	388	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:27:05,862	[INFO]	389	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:27:05,863	[INFO]	390	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:27:05,864	[DEBUG]	
2020-12-19 03:27:05,864	[INFO]	391	SUCCESS	+2.0	
2020-12-19 03:27:05,865	[DEBUG]	
2020-12-19 03:27:06,882	[INFO]	392	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:27:06,884	[INFO]	393	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:27:06,884	[INFO]	394	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:27:06,885	[DEBUG]	
2020-12-19 03:27:06,886	[INFO]	395	SUCCESS	+2.0	
2020-12-19 03:27:06,886	[DEBUG]	
2020-12-19 03:27:07,931	[INFO]	396	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:27:08,910	[INFO]	397	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:27:08,911	[INFO]	398	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:27:09,914	[INFO]	399	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:27:13,371	[INFO]	400	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:27:13,372	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 22,27 ****
--- 22,39 ----
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
+             }
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
              visitedNodes.add(node);
  

2020-12-19 03:27:14,340	[INFO]	401	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:27:14,341	[INFO]	402	SUCCESS	+2.0	
2020-12-19 03:27:14,342	[DEBUG]	
2020-12-19 03:27:14,343	[INFO]	403	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:27:14,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:27:17,697	[INFO]	404	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:27:17,698	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-19 03:27:17,699	[INFO]	405	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:27:17,699	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,56 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
!                 minNode = node;
!             }
          }
          return minNode;
      }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             minNode = node;
          }
          return minNode;
      }

2020-12-19 03:27:17,700	[INFO]	406	SUCCESS	+2.0	
2020-12-19 03:27:17,700	[DEBUG]	
2020-12-19 03:27:20,957	[INFO]	407	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:27:20,958	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:27:21,930	[INFO]	408	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:27:25,402	[INFO]	409	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:27:28,661	[INFO]	410	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:27:28,662	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:27:28,663	[INFO]	411	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:27:28,664	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:27:29,656	[INFO]	412	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:27:29,657	[INFO]	413	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:27:29,658	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:27:29,660	[INFO]	414	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:27:29,660	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:27:32,950	[INFO]	415	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:27:32,951	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:27:33,918	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:27:33,920	[INFO]	417	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:27:33,920	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:27:33,921	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:27:34,909	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:27:34,911	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:27:34,911	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:27:38,251	[INFO]	421	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:27:38,252	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:27:39,248	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:27:39,252	[INFO]	424	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:27:39,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,30 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             visitedNodes.add(node);
+ 
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:27:39,255	[INFO]	425	SUCCESS	+2.0	
2020-12-19 03:27:39,256	[DEBUG]	
2020-12-19 03:27:42,529	[INFO]	426	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:27:42,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:27:45,837	[INFO]	427	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:27:46,801	[INFO]	428	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:27:50,099	[INFO]	429	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:27:51,102	[INFO]	430	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:27:52,089	[INFO]	431	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:27:52,091	[INFO]	432	SUCCESS	+2.0	
2020-12-19 03:27:52,091	[DEBUG]	
2020-12-19 03:27:53,089	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:27:56,425	[INFO]	434	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:27:56,426	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:27:56,427	[INFO]	435	SUCCESS	+2.0	
2020-12-19 03:27:56,428	[DEBUG]	
2020-12-19 03:27:57,470	[INFO]	436	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:27:58,461	[INFO]	437	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:27:59,464	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:27:59,466	[INFO]	439	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:27:59,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:28:00,473	[INFO]	440	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:28:00,475	[INFO]	441	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:28:00,476	[INFO]	442	SUCCESS	+2.0	
2020-12-19 03:28:00,476	[DEBUG]	
2020-12-19 03:28:01,460	[INFO]	443	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:28:02,478	[INFO]	444	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:28:02,479	[INFO]	445	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:28:02,480	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:28:02,480	[INFO]	446	SUCCESS	+2.0	
2020-12-19 03:28:02,481	[DEBUG]	
2020-12-19 03:28:05,756	[INFO]	447	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:28:05,757	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:28:06,756	[INFO]	448	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:28:07,766	[INFO]	449	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:28:07,769	[INFO]	450	SUCCESS	+2.0	
2020-12-19 03:28:07,770	[DEBUG]	
2020-12-19 03:28:08,789	[INFO]	451	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:28:12,133	[INFO]	452	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:28:12,134	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:28:13,062	[INFO]	453	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:28:13,063	[INFO]	454	SUCCESS	+2.0	
2020-12-19 03:28:13,063	[DEBUG]	
2020-12-19 03:28:14,056	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:28:17,490	[INFO]	456	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:28:18,400	[INFO]	457	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:28:19,358	[INFO]	458	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:28:20,321	[INFO]	459	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:28:21,327	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:28:22,319	[INFO]	461	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:28:25,692	[INFO]	462	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:28:25,694	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             Node minNode = null;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:28:26,704	[INFO]	463	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:28:26,706	[INFO]	464	SUCCESS	+2.0	
2020-12-19 03:28:26,707	[DEBUG]	
2020-12-19 03:28:27,674	[INFO]	465	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:28:30,957	[INFO]	466	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:28:34,328	[INFO]	467	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:28:35,312	[INFO]	468	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:28:36,407	[INFO]	469	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:28:37,446	[INFO]	470	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:28:40,784	[INFO]	471	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:28:44,172	[INFO]	472	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:28:44,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:28:44,174	[INFO]	473	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:28:44,175	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:28:45,228	[INFO]	474	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:28:45,233	[INFO]	475	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:28:45,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,34 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:28:45,237	[INFO]	476	SUCCESS	+2.0	
2020-12-19 03:28:45,238	[DEBUG]	
2020-12-19 03:28:45,241	[INFO]	477	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:28:46,262	[INFO]	478	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:28:47,292	[INFO]	479	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:28:48,310	[INFO]	480	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:28:49,345	[INFO]	481	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:28:50,353	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:28:53,722	[INFO]	483	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:28:54,664	[INFO]	484	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:28:54,665	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:28:58,044	[INFO]	486	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:29:01,211	[INFO]	487	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:29:02,232	[INFO]	488	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:29:05,570	[INFO]	489	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:29:05,571	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 03:29:05,572	[INFO]	490	SUCCESS	+2.0	
2020-12-19 03:29:05,572	[DEBUG]	
2020-12-19 03:29:05,573	[INFO]	491	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:29:05,574	[DEBUG]	
2020-12-19 03:29:06,575	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:29:06,577	[INFO]	493	SUCCESS	+2.0	
2020-12-19 03:29:06,578	[DEBUG]	
2020-12-19 03:29:07,583	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:29:07,589	[INFO]	495	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:29:08,607	[INFO]	496	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:29:11,807	[INFO]	497	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:29:11,808	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:29:12,833	[INFO]	498	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:29:12,835	[INFO]	499	SUCCESS	+2.0	
2020-12-19 03:29:12,835	[DEBUG]	
2020-12-19 03:29:13,848	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:29:13,848	[INFO]	==== END ====
2020-12-19 03:29:13,849	[INFO]	Reason: step budget
2020-12-19 03:29:13,849	[INFO]	
2020-12-19 03:29:13,849	[INFO]	========== EPOCH 18 ==========
2020-12-19 03:29:13,850	[INFO]	==== WARMUP ====
2020-12-19 03:29:17,216	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:29:17,216	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:29:20,597	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:29:20,597	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:29:23,839	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:29:23,839	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:29:27,052	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 03:29:27,052	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:29:27,052	[INFO]	==== START ====
2020-12-19 03:29:30,293	[INFO]	1	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:29:33,624	[INFO]	2	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:29:34,621	[INFO]	3	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:29:37,945	[INFO]	4	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:29:37,947	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:29:37,948	[INFO]	5	SUCCESS	+2.0	
2020-12-19 03:29:37,948	[DEBUG]	
2020-12-19 03:29:41,157	[INFO]	6	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:29:42,170	[INFO]	7	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:29:43,172	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:29:46,516	[INFO]	9	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:29:47,518	[INFO]	10	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:29:48,506	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:29:49,521	[INFO]	12	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:29:49,522	[INFO]	13	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:29:49,523	[DEBUG]	
2020-12-19 03:29:52,845	[INFO]	14	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:29:52,846	[INFO]	15	SUCCESS	+2.0	
2020-12-19 03:29:52,846	[DEBUG]	
2020-12-19 03:29:53,852	[INFO]	16	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:29:54,827	[INFO]	17	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:29:54,829	[INFO]	18	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:29:54,830	[DEBUG]	
2020-12-19 03:29:55,807	[INFO]	19	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:29:55,809	[INFO]	20	SUCCESS	+2.0	
2020-12-19 03:29:55,809	[DEBUG]	
2020-12-19 03:29:59,145	[INFO]	21	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:29:59,146	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:30:02,318	[INFO]	22	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:30:03,294	[INFO]	23	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:30:04,240	[INFO]	24	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:30:05,268	[INFO]	25	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:30:05,269	[INFO]	26	SUCCESS	+2.0	
2020-12-19 03:30:05,269	[DEBUG]	
2020-12-19 03:30:05,270	[INFO]	27	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:30:08,579	[INFO]	28	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:30:08,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:30:08,581	[INFO]	29	SUCCESS	+2.0	
2020-12-19 03:30:08,581	[DEBUG]	
2020-12-19 03:30:09,570	[INFO]	30	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:30:12,915	[INFO]	31	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:30:12,916	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:16,226	[INFO]	32	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:30:19,608	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:30:19,610	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,27 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             Node minNode = null;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
***************
*** 31,36 ****
--- 33,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:19,612	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:30:19,613	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:22,884	[INFO]	35	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:30:22,885	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 49,54 ****
--- 51,57 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 03:30:22,886	[INFO]	36	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:30:22,886	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:22,887	[INFO]	37	SUCCESS	+2.0	
2020-12-19 03:30:22,887	[DEBUG]	
2020-12-19 03:30:23,900	[INFO]	38	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:30:24,885	[INFO]	39	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:30:25,914	[INFO]	40	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:30:26,877	[INFO]	41	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:30:27,856	[INFO]	42	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:30:28,878	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:30:28,882	[INFO]	44	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:30:28,883	[DEBUG]	
2020-12-19 03:30:32,209	[INFO]	45	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:30:32,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:30:33,241	[INFO]	46	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:30:33,245	[INFO]	47	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:30:33,246	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:30:36,712	[INFO]	48	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:30:36,713	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:40,073	[INFO]	49	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:30:40,073	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:40,074	[INFO]	50	SUCCESS	+2.0	
2020-12-19 03:30:40,074	[DEBUG]	
2020-12-19 03:30:40,075	[INFO]	51	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:30:41,038	[INFO]	52	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:30:42,023	[INFO]	53	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:30:43,029	[INFO]	54	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:30:46,457	[INFO]	55	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:30:46,458	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:30:46,458	[INFO]	56	SUCCESS	+2.0	
2020-12-19 03:30:46,459	[DEBUG]	
2020-12-19 03:30:49,574	[INFO]	57	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:30:50,606	[INFO]	58	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:30:51,615	[INFO]	59	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:30:51,617	[INFO]	60	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:30:54,926	[INFO]	61	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:30:54,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:30:55,904	[INFO]	62	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:30:56,927	[INFO]	63	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:31:00,211	[INFO]	64	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:31:00,212	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:31:00,213	[INFO]	65	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:31:00,214	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:31:00,214	[INFO]	66	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:31:00,215	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:31:01,213	[INFO]	67	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:31:04,519	[INFO]	68	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:31:04,520	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:31:05,498	[INFO]	69	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:31:08,774	[INFO]	70	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:31:08,775	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:31:08,776	[INFO]	71	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:31:08,776	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:31:09,763	[INFO]	72	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:31:10,689	[INFO]	73	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:31:11,684	[INFO]	74	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:31:11,688	[INFO]	75	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:31:11,691	[INFO]	76	SUCCESS	+2.0	
2020-12-19 03:31:11,692	[DEBUG]	
2020-12-19 03:31:12,737	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:31:13,727	[INFO]	78	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:31:14,712	[INFO]	79	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:31:15,703	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:31:16,698	[INFO]	81	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:31:17,691	[INFO]	82	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:31:21,005	[INFO]	83	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:31:21,006	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:31:21,007	[INFO]	84	SUCCESS	+2.0	
2020-12-19 03:31:21,007	[DEBUG]	
2020-12-19 03:31:22,047	[INFO]	85	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:31:25,348	[INFO]	86	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:31:25,348	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:31:28,621	[INFO]	87	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:31:28,622	[INFO]	88	SUCCESS	+2.0	
2020-12-19 03:31:28,623	[DEBUG]	
2020-12-19 03:31:29,564	[INFO]	89	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:31:29,570	[INFO]	90	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:31:29,572	[DEBUG]	
2020-12-19 03:31:32,884	[INFO]	91	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:31:33,923	[INFO]	92	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:31:33,924	[INFO]	93	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:31:34,955	[INFO]	94	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:31:38,305	[INFO]	95	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:31:38,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:31:38,307	[INFO]	96	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:31:38,307	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:31:38,308	[INFO]	97	SUCCESS	+2.0	
2020-12-19 03:31:38,308	[DEBUG]	
2020-12-19 03:31:39,322	[INFO]	98	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:31:39,326	[INFO]	99	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:31:39,328	[DEBUG]	
2020-12-19 03:31:39,331	[INFO]	100	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:31:39,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:31:39,336	[INFO]	101	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:31:39,337	[DEBUG]	
2020-12-19 03:31:39,340	[INFO]	102	SUCCESS	+2.0	
2020-12-19 03:31:39,342	[DEBUG]	
2020-12-19 03:31:42,825	[INFO]	103	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:31:42,826	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:31:42,827	[INFO]	104	SUCCESS	+2.0	
2020-12-19 03:31:42,827	[DEBUG]	
2020-12-19 03:31:42,828	[INFO]	105	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:31:42,829	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:31:43,882	[INFO]	106	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:31:43,885	[INFO]	107	SUCCESS	+2.0	
2020-12-19 03:31:43,886	[DEBUG]	
2020-12-19 03:31:43,888	[INFO]	108	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:31:43,889	[DEBUG]	
2020-12-19 03:31:43,890	[INFO]	109	SUCCESS	+2.0	
2020-12-19 03:31:43,891	[DEBUG]	
2020-12-19 03:31:47,204	[INFO]	110	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:31:47,205	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         Node minNode = null;
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:31:47,206	[INFO]	111	SUCCESS	+2.0	
2020-12-19 03:31:47,206	[DEBUG]	
2020-12-19 03:31:50,505	[INFO]	112	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:31:50,507	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:31:50,508	[INFO]	113	SUCCESS	+2.0	
2020-12-19 03:31:50,508	[DEBUG]	
2020-12-19 03:31:51,455	[INFO]	114	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:31:54,702	[INFO]	115	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:31:57,992	[INFO]	116	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:31:58,955	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:31:59,972	[INFO]	118	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:32:00,989	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:32:01,991	[INFO]	120	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:32:03,025	[INFO]	121	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:32:04,015	[INFO]	122	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:32:04,981	[INFO]	123	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:32:08,276	[INFO]	124	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:32:08,277	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 visitedNodes.add(node);
              }
          }
  

2020-12-19 03:32:09,182	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:32:09,183	[INFO]	126	SUCCESS	+2.0	
2020-12-19 03:32:09,183	[DEBUG]	
2020-12-19 03:32:10,184	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:32:25,258	[INFO]	128	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:32:28,180	[INFO]	129	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:32:31,223	[INFO]	130	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:32:34,556	[INFO]	131	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:32:35,510	[INFO]	132	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:32:36,550	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:32:39,785	[INFO]	134	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:32:39,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:32:39,787	[INFO]	135	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:32:39,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:32:43,082	[INFO]	136	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:32:43,083	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.remove(node);
              }
          }
  

2020-12-19 03:32:46,300	[INFO]	137	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:32:46,303	[INFO]	138	SUCCESS	+2.0	
2020-12-19 03:32:46,303	[DEBUG]	
2020-12-19 03:32:47,351	[INFO]	139	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:32:48,352	[INFO]	140	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:32:49,330	[INFO]	141	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:32:50,351	[INFO]	142	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:32:50,354	[INFO]	143	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:32:51,357	[INFO]	144	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:32:51,358	[INFO]	145	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:32:52,351	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:32:53,366	[INFO]	147	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:32:54,353	[INFO]	148	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:32:55,357	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:32:58,753	[INFO]	150	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:32:59,731	[INFO]	151	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:32:59,733	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:33:03,056	[INFO]	153	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:33:03,056	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:33:06,384	[INFO]	154	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:33:07,350	[INFO]	155	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:33:07,353	[INFO]	156	SUCCESS	+2.0	
2020-12-19 03:33:07,354	[DEBUG]	
2020-12-19 03:33:08,250	[INFO]	157	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:33:09,240	[INFO]	158	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:33:12,507	[INFO]	159	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:33:12,508	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:33:15,785	[INFO]	160	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:33:15,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:33:15,788	[INFO]	161	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:33:15,789	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 32,37 ****
--- 32,38 ----
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:33:15,790	[INFO]	162	SUCCESS	+2.0	
2020-12-19 03:33:15,791	[DEBUG]	
2020-12-19 03:33:15,792	[INFO]	163	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:33:16,803	[INFO]	164	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:33:17,807	[INFO]	165	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:33:21,141	[INFO]	166	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:33:21,142	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:33:22,106	[INFO]	167	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:33:22,107	[INFO]	168	SUCCESS	+2.0	
2020-12-19 03:33:22,108	[DEBUG]	
2020-12-19 03:33:23,120	[INFO]	169	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:33:26,349	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:33:26,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:33:27,331	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:33:27,332	[INFO]	172	SUCCESS	+2.0	
2020-12-19 03:33:27,332	[DEBUG]	
2020-12-19 03:33:28,286	[INFO]	173	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:33:28,287	[INFO]	174	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:33:28,288	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:33:28,289	[INFO]	175	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:33:28,289	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,28 ****
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
+             int minDistance = Integer.MAX_VALUE;
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {

2020-12-19 03:33:29,312	[INFO]	176	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:33:44,374	[INFO]	177	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:33:45,251	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:33:45,252	[INFO]	179	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:33:45,252	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:33:45,253	[INFO]	180	SUCCESS	+2.0	
2020-12-19 03:33:45,253	[DEBUG]	
2020-12-19 03:33:45,254	[INFO]	181	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:33:45,254	[INFO]	182	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:33:48,298	[INFO]	183	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:33:48,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:33:49,217	[INFO]	184	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:33:49,220	[INFO]	185	SUCCESS	+2.0	
2020-12-19 03:33:49,220	[DEBUG]	
2020-12-19 03:33:50,141	[INFO]	186	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:33:53,381	[INFO]	187	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:33:54,321	[INFO]	188	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:33:57,632	[INFO]	189	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:33:58,626	[INFO]	190	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:33:59,613	[INFO]	191	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:33:59,614	[INFO]	192	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:33:59,615	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:33:59,615	[INFO]	193	SUCCESS	+2.0	
2020-12-19 03:33:59,616	[DEBUG]	
2020-12-19 03:34:00,643	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:34:01,657	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:34:01,664	[INFO]	196	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:34:01,666	[DEBUG]	
2020-12-19 03:34:02,671	[INFO]	197	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:34:03,682	[INFO]	198	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:34:07,173	[INFO]	199	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:34:07,174	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:34:07,175	[INFO]	200	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:34:07,175	[DEBUG]	
2020-12-19 03:34:08,209	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:34:08,212	[INFO]	202	SUCCESS	+2.0	
2020-12-19 03:34:08,212	[DEBUG]	
2020-12-19 03:34:09,292	[INFO]	203	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:34:12,702	[INFO]	204	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:34:12,703	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:12,704	[INFO]	205	SUCCESS	+2.0	
2020-12-19 03:34:12,704	[DEBUG]	
2020-12-19 03:34:12,705	[INFO]	206	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:34:13,744	[INFO]	207	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:34:17,107	[INFO]	208	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:34:20,429	[INFO]	209	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:34:20,432	[INFO]	210	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:34:20,432	[DEBUG]	
2020-12-19 03:34:20,433	[INFO]	211	SUCCESS	+2.0	
2020-12-19 03:34:20,434	[DEBUG]	
2020-12-19 03:34:23,652	[INFO]	212	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:34:23,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,27 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 int minDistance = Integer.MAX_VALUE;
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 03:34:24,674	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:34:24,677	[INFO]	214	SUCCESS	+2.0	
2020-12-19 03:34:24,679	[DEBUG]	
2020-12-19 03:34:24,683	[INFO]	215	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:34:25,720	[INFO]	216	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:34:26,715	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:34:29,970	[INFO]	218	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:34:30,945	[INFO]	219	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:34:34,368	[INFO]	220	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:34:34,369	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:34:37,620	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:34:37,622	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,38 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 31,40 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
+ 
+                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:40,978	[INFO]	222	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:34:41,997	[INFO]	223	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:34:45,327	[INFO]	224	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:34:45,328	[INFO]	225	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:34:45,329	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:34:45,329	[INFO]	226	SUCCESS	+2.0	
2020-12-19 03:34:45,330	[DEBUG]	
2020-12-19 03:34:45,330	[INFO]	227	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:34:45,331	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:45,332	[INFO]	228	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:34:45,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:46,313	[INFO]	229	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:34:47,317	[INFO]	230	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:34:48,317	[INFO]	231	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:34:48,324	[INFO]	232	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:34:48,325	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:48,330	[INFO]	233	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:34:48,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:48,336	[INFO]	234	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:34:48,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:48,341	[INFO]	235	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:34:48,344	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:49,346	[INFO]	236	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:34:50,342	[INFO]	237	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:34:51,330	[INFO]	238	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:34:54,656	[INFO]	239	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:34:54,657	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:55,661	[INFO]	240	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:34:55,664	[INFO]	241	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:34:55,666	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:56,666	[INFO]	242	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:34:57,656	[INFO]	243	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:34:57,660	[INFO]	244	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:34:57,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:34:58,662	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:34:58,665	[INFO]	246	SUCCESS	+2.0	
2020-12-19 03:34:58,666	[DEBUG]	
2020-12-19 03:34:59,675	[INFO]	247	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:35:00,669	[INFO]	248	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:35:03,960	[INFO]	249	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:35:03,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:35:03,962	[INFO]	250	SUCCESS	+2.0	
2020-12-19 03:35:03,962	[DEBUG]	
2020-12-19 03:35:04,921	[INFO]	251	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:35:05,934	[INFO]	252	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:35:06,986	[INFO]	253	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:35:07,987	[INFO]	254	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:35:07,989	[INFO]	255	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:35:07,989	[DEBUG]	
2020-12-19 03:35:07,990	[INFO]	256	SUCCESS	+2.0	
2020-12-19 03:35:07,990	[DEBUG]	
2020-12-19 03:35:11,341	[INFO]	257	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:35:14,593	[INFO]	258	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:35:14,595	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:35:15,596	[INFO]	259	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:35:18,886	[INFO]	260	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:35:22,163	[INFO]	261	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:35:22,164	[INFO]	262	SUCCESS	+2.0	
2020-12-19 03:35:22,165	[DEBUG]	
2020-12-19 03:35:23,180	[INFO]	263	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:35:24,155	[INFO]	264	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:35:24,156	[INFO]	265	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:35:27,421	[INFO]	266	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:35:27,423	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:35:30,708	[INFO]	268	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:35:30,709	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:35:34,107	[INFO]	269	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:35:34,108	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:35:38,064	[INFO]	270	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:35:38,065	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:35:41,745	[INFO]	271	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:35:41,746	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:35:45,084	[INFO]	272	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:35:48,499	[INFO]	273	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:35:48,500	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,36 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 23,36 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:35:51,726	[INFO]	274	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:35:51,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:35:51,728	[INFO]	275	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:35:51,729	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:35:51,729	[INFO]	276	SUCCESS	+2.0	
2020-12-19 03:35:51,730	[DEBUG]	
2020-12-19 03:35:52,762	[INFO]	277	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:35:53,759	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:35:55,240	[INFO]	279	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:35:56,604	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:36:00,885	[INFO]	281	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:36:01,996	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:36:03,384	[INFO]	283	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:36:04,475	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:36:05,462	[INFO]	285	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:36:06,480	[INFO]	286	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:36:06,482	[INFO]	287	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:36:06,482	[DEBUG]	
2020-12-19 03:36:06,483	[INFO]	288	SUCCESS	+2.0	
2020-12-19 03:36:06,483	[DEBUG]	
2020-12-19 03:36:07,517	[INFO]	289	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:36:08,525	[INFO]	290	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:36:11,777	[INFO]	291	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:36:26,834	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:36:27,734	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:36:28,625	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:36:31,678	[INFO]	295	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:36:31,679	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 50,55 ****
--- 50,56 ----
              if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
+                 minNode = node;
              }
          }
          return minNode;

2020-12-19 03:36:31,680	[INFO]	296	SUCCESS	+2.0	
2020-12-19 03:36:31,680	[DEBUG]	
2020-12-19 03:36:34,808	[INFO]	297	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:36:34,809	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:36:34,810	[INFO]	298	SUCCESS	+2.0	
2020-12-19 03:36:34,810	[DEBUG]	
2020-12-19 03:36:38,084	[INFO]	299	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:36:38,085	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 return Integer.MAX_VALUE;
              }
          }
  

2020-12-19 03:36:39,029	[INFO]	300	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:36:39,030	[INFO]	301	SUCCESS	+2.0	
2020-12-19 03:36:39,030	[DEBUG]	
2020-12-19 03:36:40,042	[INFO]	302	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:36:43,326	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:36:43,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:36:43,327	[INFO]	304	SUCCESS	+2.0	
2020-12-19 03:36:43,328	[DEBUG]	
2020-12-19 03:36:44,314	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:36:45,312	[INFO]	306	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:36:48,703	[INFO]	307	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:36:51,861	[INFO]	308	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:36:51,862	[INFO]	309	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:36:51,863	[INFO]	310	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:36:51,863	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:36:52,852	[INFO]	311	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:36:52,855	[INFO]	312	SUCCESS	+2.0	
2020-12-19 03:36:52,855	[DEBUG]	
2020-12-19 03:36:52,857	[INFO]	313	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:36:56,189	[INFO]	314	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:36:56,191	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     return Integer.MAX_VALUE;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:36:56,192	[INFO]	315	SUCCESS	+2.0	
2020-12-19 03:36:56,192	[DEBUG]	
2020-12-19 03:36:57,141	[INFO]	316	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:37:00,437	[INFO]	317	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:37:01,408	[INFO]	318	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:37:02,440	[INFO]	319	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:37:02,444	[INFO]	320	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:37:02,444	[DEBUG]	
2020-12-19 03:37:02,446	[INFO]	321	SUCCESS	+2.0	
2020-12-19 03:37:02,447	[DEBUG]	
2020-12-19 03:37:03,442	[INFO]	322	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:37:04,449	[INFO]	323	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:37:07,734	[INFO]	324	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:37:07,735	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:37:07,736	[INFO]	325	SUCCESS	+2.0	
2020-12-19 03:37:07,736	[DEBUG]	
2020-12-19 03:37:08,696	[INFO]	326	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:37:09,659	[INFO]	327	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:37:09,661	[INFO]	328	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:37:10,642	[INFO]	329	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:37:13,933	[INFO]	330	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:37:29,003	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:37:29,005	[INFO]	332	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:37:29,878	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:37:30,775	[INFO]	334	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:37:33,662	[INFO]	335	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:37:34,598	[INFO]	336	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:37:35,569	[INFO]	337	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:37:36,579	[INFO]	338	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:37:37,627	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:37:40,891	[INFO]	340	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:37:40,892	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:37:40,893	[INFO]	341	SUCCESS	+2.0	
2020-12-19 03:37:40,893	[DEBUG]	
2020-12-19 03:37:41,907	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:37:42,921	[INFO]	343	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:37:46,238	[INFO]	344	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:37:47,246	[INFO]	345	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:37:47,247	[INFO]	346	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:37:48,240	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:37:49,252	[INFO]	348	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:37:50,247	[INFO]	349	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:37:51,216	[INFO]	350	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:37:51,218	[INFO]	351	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:37:51,218	[DEBUG]	
2020-12-19 03:37:51,219	[INFO]	352	SUCCESS	+2.0	
2020-12-19 03:37:51,219	[DEBUG]	
2020-12-19 03:37:54,592	[INFO]	353	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:37:54,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:37:54,594	[INFO]	354	SUCCESS	+2.0	
2020-12-19 03:37:54,595	[DEBUG]	
2020-12-19 03:37:54,596	[INFO]	355	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:37:54,597	[DEBUG]	
2020-12-19 03:37:55,603	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:37:55,606	[INFO]	357	SUCCESS	+2.0	
2020-12-19 03:37:55,606	[DEBUG]	
2020-12-19 03:37:58,945	[INFO]	358	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:37:58,948	[INFO]	359	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:37:59,949	[INFO]	360	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:38:00,914	[INFO]	361	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:38:04,275	[INFO]	362	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:38:04,276	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         Node minNode = null;
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:38:04,277	[INFO]	363	SUCCESS	+2.0	
2020-12-19 03:38:04,278	[DEBUG]	
2020-12-19 03:38:07,545	[INFO]	364	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:38:07,546	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:38:10,920	[INFO]	365	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:38:10,921	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,38 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 27,36 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:38:14,215	[INFO]	366	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:38:14,216	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:38:15,186	[INFO]	367	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:38:16,203	[INFO]	368	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:38:16,204	[INFO]	369	SUCCESS	+2.0	
2020-12-19 03:38:16,204	[DEBUG]	
2020-12-19 03:38:19,511	[INFO]	370	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:38:19,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:38:22,736	[INFO]	371	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:38:22,737	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:38:22,738	[INFO]	372	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:38:22,738	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:38:26,031	[INFO]	373	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:38:29,298	[INFO]	374	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:38:29,299	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:38:32,466	[INFO]	375	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:38:32,467	[INFO]	376	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:38:32,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:38:32,468	[INFO]	377	SUCCESS	+2.0	
2020-12-19 03:38:32,468	[DEBUG]	
2020-12-19 03:38:32,469	[INFO]	378	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:38:32,470	[DEBUG]	
2020-12-19 03:38:33,530	[INFO]	379	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:38:33,534	[INFO]	380	SUCCESS	+2.0	
2020-12-19 03:38:33,535	[DEBUG]	
2020-12-19 03:38:33,538	[INFO]	381	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:38:34,537	[INFO]	382	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:38:35,544	[INFO]	383	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:38:38,929	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:38:38,930	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:38:38,931	[INFO]	385	SUCCESS	+2.0	
2020-12-19 03:38:38,932	[DEBUG]	
2020-12-19 03:38:39,891	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:38:43,191	[INFO]	387	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:38:46,524	[INFO]	388	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:38:47,530	[INFO]	389	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:38:50,744	[INFO]	390	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:38:50,745	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 03:38:53,959	[INFO]	391	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:38:53,960	[INFO]	392	SUCCESS	+2.0	
2020-12-19 03:38:53,961	[DEBUG]	
2020-12-19 03:38:54,922	[INFO]	393	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:38:55,995	[INFO]	394	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:38:57,073	[INFO]	395	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:39:00,356	[INFO]	396	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:39:00,358	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:39:01,348	[INFO]	397	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:39:04,640	[INFO]	398	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:39:04,641	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,19 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         unvisitedNodes.put(startnode, 0);
  
          unvisitedNodes.put(startnode, 0);
  
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 32,38 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:39:04,643	[INFO]	399	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:39:04,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:39:08,000	[INFO]	400	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:39:08,001	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:39:09,025	[INFO]	401	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:39:12,303	[INFO]	402	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:39:12,304	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:39:13,328	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:39:16,580	[INFO]	404	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:39:16,581	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,34 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 20,35 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             int minDistance = Integer.MAX_VALUE;
+ 
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:39:17,588	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:39:20,877	[INFO]	406	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:39:20,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,26 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 03:39:21,897	[INFO]	407	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:39:21,900	[INFO]	408	SUCCESS	+2.0	
2020-12-19 03:39:21,901	[DEBUG]	
2020-12-19 03:39:25,180	[INFO]	409	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:39:26,172	[INFO]	410	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:39:29,351	[INFO]	411	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:39:44,410	[INFO]	412	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:39:47,259	[INFO]	413	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:39:48,172	[INFO]	414	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:39:49,095	[INFO]	415	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:39:49,996	[INFO]	416	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:39:50,926	[INFO]	417	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:39:51,908	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:39:55,259	[INFO]	419	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:39:55,261	[INFO]	420	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:39:55,261	[DEBUG]	
2020-12-19 03:39:58,502	[INFO]	421	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:39:59,513	[INFO]	422	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:39:59,517	[INFO]	423	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:39:59,519	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:39:59,520	[DEBUG]	
2020-12-19 03:39:59,522	[INFO]	425	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:39:59,523	[DEBUG]	
2020-12-19 03:39:59,524	[INFO]	426	SUCCESS	+2.0	
2020-12-19 03:39:59,525	[DEBUG]	
2020-12-19 03:40:00,527	[INFO]	427	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:40:01,570	[INFO]	428	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:40:02,567	[INFO]	429	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:40:05,836	[INFO]	430	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:40:05,837	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:09,093	[INFO]	431	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:40:09,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:12,394	[INFO]	432	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:40:12,395	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:40:12,395	[INFO]	433	SUCCESS	+2.0	
2020-12-19 03:40:12,396	[DEBUG]	
2020-12-19 03:40:12,397	[INFO]	434	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:40:12,397	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:15,688	[INFO]	435	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:40:15,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,53 ****
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,54 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:19,008	[INFO]	436	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:40:19,009	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Set<Node> visitedNodes = new HashSet<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 03:40:19,010	[INFO]	437	SUCCESS	+2.0	
2020-12-19 03:40:19,010	[DEBUG]	
2020-12-19 03:40:19,955	[INFO]	438	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:40:20,964	[INFO]	439	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:40:22,041	[INFO]	440	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:40:25,308	[INFO]	441	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:40:25,309	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:40:25,310	[INFO]	442	SUCCESS	+2.0	
2020-12-19 03:40:25,311	[DEBUG]	
2020-12-19 03:40:28,616	[INFO]	443	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:40:28,617	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:40:28,618	[INFO]	444	SUCCESS	+2.0	
2020-12-19 03:40:28,618	[DEBUG]	
2020-12-19 03:40:31,972	[INFO]	445	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:40:31,973	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:40:32,936	[INFO]	446	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:40:32,938	[INFO]	447	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:40:32,938	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:40:32,939	[INFO]	448	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:40:32,940	[DEBUG]	
2020-12-19 03:40:32,940	[INFO]	449	SUCCESS	+2.0	
2020-12-19 03:40:32,941	[DEBUG]	
2020-12-19 03:40:36,349	[INFO]	450	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:40:36,350	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:37,382	[INFO]	451	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:40:37,384	[INFO]	452	SUCCESS	+2.0	
2020-12-19 03:40:37,384	[DEBUG]	
2020-12-19 03:40:38,388	[INFO]	453	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:40:39,423	[INFO]	454	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:40:40,398	[INFO]	455	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:40:43,660	[INFO]	456	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:40:43,661	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 Node minNode = null;
              }
          }
  

2020-12-19 03:40:44,632	[INFO]	457	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:40:44,633	[INFO]	458	SUCCESS	+2.0	
2020-12-19 03:40:44,633	[DEBUG]	
2020-12-19 03:40:47,926	[INFO]	459	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:40:48,915	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:40:49,913	[INFO]	461	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:40:49,915	[INFO]	462	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:40:50,922	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:40:54,317	[INFO]	464	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:40:55,277	[INFO]	465	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:40:56,303	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:40:56,306	[INFO]	467	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:40:56,306	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:40:56,308	[INFO]	468	SUCCESS	+2.0	
2020-12-19 03:40:56,308	[DEBUG]	
2020-12-19 03:40:57,315	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:41:00,628	[INFO]	470	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:41:00,629	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 int minDistance = Integer.MAX_VALUE;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:41:01,614	[INFO]	471	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:41:01,616	[INFO]	472	SUCCESS	+2.0	
2020-12-19 03:41:01,616	[DEBUG]	
2020-12-19 03:41:04,889	[INFO]	473	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:41:05,880	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:41:06,905	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:41:07,888	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:41:08,902	[INFO]	477	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:41:12,242	[INFO]	478	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:41:12,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 39,44 ****
--- 39,68 ----
              }
          }
  
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
+ 
          return Integer.MAX_VALUE;
      }
  

2020-12-19 03:41:12,244	[INFO]	479	SUCCESS	+2.0	
2020-12-19 03:41:12,244	[DEBUG]	
2020-12-19 03:41:13,264	[INFO]	480	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:41:16,532	[INFO]	481	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:41:17,538	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:41:18,552	[INFO]	483	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:41:19,548	[INFO]	484	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:41:20,542	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:41:21,585	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:41:22,605	[INFO]	487	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:41:23,594	[INFO]	488	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:41:23,595	[INFO]	489	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:41:23,595	[DEBUG]	
2020-12-19 03:41:23,596	[INFO]	490	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:41:24,580	[INFO]	491	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:41:25,591	[INFO]	492	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:41:25,592	[INFO]	493	SUCCESS	+2.0	
2020-12-19 03:41:25,593	[DEBUG]	
2020-12-19 03:41:26,622	[INFO]	494	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:41:30,147	[INFO]	495	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:41:31,166	[INFO]	496	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:41:32,161	[INFO]	497	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:41:33,203	[INFO]	498	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:41:34,252	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:41:35,283	[INFO]	500	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:41:35,283	[INFO]	==== END ====
2020-12-19 03:41:35,284	[INFO]	Reason: step budget
2020-12-19 03:41:35,285	[INFO]	
2020-12-19 03:41:35,285	[INFO]	========== EPOCH 19 ==========
2020-12-19 03:41:35,286	[INFO]	==== WARMUP ====
2020-12-19 03:41:38,592	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:41:38,592	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:41:42,045	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:41:42,045	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:41:45,424	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:41:45,424	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:41:48,735	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 03:41:48,735	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:41:48,735	[INFO]	==== START ====
2020-12-19 03:41:49,699	[INFO]	1	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:41:50,668	[INFO]	2	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:41:51,693	[INFO]	3	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:41:52,680	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:41:53,665	[INFO]	5	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:41:54,670	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:41:55,663	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:41:56,666	[INFO]	8	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:41:56,669	[INFO]	9	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:42:00,011	[INFO]	10	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:42:00,012	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:42:01,005	[INFO]	11	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:42:01,988	[INFO]	12	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:42:05,332	[INFO]	13	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:42:05,333	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 48,53 ****
--- 46,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:42:05,334	[INFO]	14	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:42:05,334	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,53 ****
--- 48,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
+                 if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:42:08,560	[INFO]	15	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:42:09,531	[INFO]	16	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:42:09,532	[INFO]	17	SUCCESS	+2.0	
2020-12-19 03:42:09,533	[DEBUG]	
2020-12-19 03:42:10,505	[INFO]	18	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:42:11,502	[INFO]	19	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:42:12,486	[INFO]	20	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:42:13,489	[INFO]	21	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:42:16,683	[INFO]	22	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:42:16,684	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:42:16,685	[INFO]	23	SUCCESS	+2.0	
2020-12-19 03:42:16,685	[DEBUG]	
2020-12-19 03:42:16,686	[INFO]	24	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:42:16,687	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:42:17,651	[INFO]	25	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:42:18,674	[INFO]	26	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:42:18,675	[INFO]	27	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:42:19,666	[INFO]	28	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:42:19,667	[INFO]	29	SUCCESS	+2.0	
2020-12-19 03:42:19,668	[DEBUG]	
2020-12-19 03:42:20,692	[INFO]	30	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:42:24,195	[INFO]	31	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:42:24,195	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:42:25,155	[INFO]	32	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:42:28,482	[INFO]	33	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:42:28,484	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 51,57 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:42:28,487	[INFO]	34	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:42:28,488	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:42:28,489	[INFO]	35	SUCCESS	+2.0	
2020-12-19 03:42:28,490	[DEBUG]	
2020-12-19 03:42:29,477	[INFO]	36	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:42:32,746	[INFO]	37	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:42:36,094	[INFO]	38	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:42:39,380	[INFO]	39	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:42:39,381	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 03:42:39,383	[INFO]	40	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:42:39,384	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 03:42:39,385	[INFO]	41	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:42:39,385	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 03:42:42,690	[INFO]	42	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:42:42,691	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:42:43,725	[INFO]	43	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:42:43,727	[INFO]	44	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:42:43,727	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 03:42:43,728	[INFO]	45	SUCCESS	+2.0	
2020-12-19 03:42:43,728	[DEBUG]	
2020-12-19 03:42:43,730	[INFO]	46	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:42:43,730	[DEBUG]	
2020-12-19 03:42:44,723	[INFO]	47	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:42:44,726	[INFO]	48	SUCCESS	+2.0	
2020-12-19 03:42:44,727	[DEBUG]	
2020-12-19 03:42:48,035	[INFO]	49	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:42:49,004	[INFO]	50	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:42:49,006	[INFO]	51	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:42:50,024	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:42:53,325	[INFO]	53	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:42:53,326	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:42:54,318	[INFO]	54	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:42:54,319	[INFO]	55	SUCCESS	+2.0	
2020-12-19 03:42:54,319	[DEBUG]	
2020-12-19 03:42:55,271	[INFO]	56	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:42:56,273	[INFO]	57	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:42:57,321	[INFO]	58	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:42:58,346	[INFO]	59	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:42:59,308	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:43:02,630	[INFO]	61	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:43:02,631	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:43:02,632	[INFO]	62	SUCCESS	+2.0	
2020-12-19 03:43:02,632	[DEBUG]	
2020-12-19 03:43:03,609	[INFO]	63	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:43:04,623	[INFO]	64	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:43:05,648	[INFO]	65	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:43:05,649	[INFO]	66	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:43:09,052	[INFO]	67	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:43:09,053	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 12,17 ****
--- 12,41 ----
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
+ 
+         while (!unvisitedNodes.isEmpty()) {
+             Node node = getNodeWithMinDistance(unvisitedNodes);
+             int distance = unvisitedNodes.get(node);
+             unvisitedNodes.remove(node);
+ 
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+             visitedNodes.add(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+         }
  
          unvisitedNodes.put(startnode, 0);
  

2020-12-19 03:43:09,054	[INFO]	68	SUCCESS	+2.0	
2020-12-19 03:43:09,054	[DEBUG]	
2020-12-19 03:43:12,244	[INFO]	69	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:43:12,245	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:43:12,246	[INFO]	70	SUCCESS	+2.0	
2020-12-19 03:43:12,247	[DEBUG]	
2020-12-19 03:43:15,652	[INFO]	71	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:43:15,653	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:43:15,653	[INFO]	72	SUCCESS	+2.0	
2020-12-19 03:43:15,654	[DEBUG]	
2020-12-19 03:43:16,632	[INFO]	73	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:43:17,627	[INFO]	74	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:43:20,965	[INFO]	75	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:43:20,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:43:20,967	[INFO]	76	SUCCESS	+2.0	
2020-12-19 03:43:20,967	[DEBUG]	
2020-12-19 03:43:21,901	[INFO]	77	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:43:25,093	[INFO]	78	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:43:25,095	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:43:25,096	[INFO]	79	SUCCESS	+2.0	
2020-12-19 03:43:25,096	[DEBUG]	
2020-12-19 03:43:28,417	[INFO]	80	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:43:28,418	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:43:29,354	[INFO]	81	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:43:32,627	[INFO]	82	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:43:32,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:43:33,616	[INFO]	83	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:43:33,617	[INFO]	84	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:43:33,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:43:33,618	[INFO]	85	SUCCESS	+2.0	
2020-12-19 03:43:33,619	[DEBUG]	
2020-12-19 03:43:36,889	[INFO]	86	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:43:37,874	[INFO]	87	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:43:41,301	[INFO]	88	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:43:41,302	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:43:41,303	[INFO]	89	SUCCESS	+2.0	
2020-12-19 03:43:41,304	[DEBUG]	
2020-12-19 03:43:41,304	[INFO]	90	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:43:42,214	[INFO]	91	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:43:43,227	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:43:44,270	[INFO]	93	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:43:45,250	[INFO]	94	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:43:45,251	[INFO]	95	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:43:45,252	[INFO]	96	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:43:45,253	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:43:45,253	[INFO]	97	SUCCESS	+2.0	
2020-12-19 03:43:45,254	[DEBUG]	
2020-12-19 03:43:45,255	[INFO]	98	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:43:45,255	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:43:45,256	[INFO]	99	SUCCESS	+2.0	
2020-12-19 03:43:45,256	[DEBUG]	
2020-12-19 03:43:46,283	[INFO]	100	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:43:47,303	[INFO]	101	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:43:50,547	[INFO]	102	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:43:51,510	[INFO]	103	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:43:51,511	[INFO]	104	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:43:51,512	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:43:51,513	[INFO]	105	SUCCESS	+2.0	
2020-12-19 03:43:51,513	[DEBUG]	
2020-12-19 03:43:52,511	[INFO]	106	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:43:53,490	[INFO]	107	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:43:56,765	[INFO]	108	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:43:57,750	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:43:58,729	[INFO]	110	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:43:59,742	[INFO]	111	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:43:59,746	[INFO]	112	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:43:59,748	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:44:00,779	[INFO]	113	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:44:01,742	[INFO]	114	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:44:05,004	[INFO]	115	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:44:05,005	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:44:08,250	[INFO]	116	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:44:08,251	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 Node minNode = null;
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:44:09,225	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:44:09,227	[INFO]	118	SUCCESS	+2.0	
2020-12-19 03:44:09,228	[DEBUG]	
2020-12-19 03:44:10,187	[INFO]	119	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:44:11,181	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:44:14,435	[INFO]	121	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:44:17,666	[INFO]	122	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:44:17,668	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:44:18,657	[INFO]	124	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:44:19,675	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:44:19,678	[INFO]	126	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:44:19,678	[DEBUG]	
2020-12-19 03:44:19,679	[INFO]	127	SUCCESS	+2.0	
2020-12-19 03:44:19,680	[DEBUG]	
2020-12-19 03:44:20,698	[INFO]	128	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:44:21,683	[INFO]	129	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:44:22,671	[INFO]	130	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:44:23,670	[INFO]	131	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:44:24,648	[INFO]	132	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:44:25,665	[INFO]	133	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:44:25,667	[INFO]	134	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:44:25,667	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:44:26,659	[INFO]	135	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:44:26,660	[INFO]	136	SUCCESS	+2.0	
2020-12-19 03:44:26,660	[DEBUG]	
2020-12-19 03:44:29,979	[INFO]	137	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:44:29,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,41 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 unvisitedNodes.remove(node);
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:44:29,981	[INFO]	138	SUCCESS	+2.0	
2020-12-19 03:44:29,981	[DEBUG]	
2020-12-19 03:44:30,903	[INFO]	139	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:44:31,893	[INFO]	140	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:44:32,969	[INFO]	141	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:44:33,961	[INFO]	142	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:44:37,254	[INFO]	143	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:44:37,255	[INFO]	144	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:44:37,256	[DEBUG]	
2020-12-19 03:44:38,279	[INFO]	145	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:44:38,280	[INFO]	146	SUCCESS	+2.0	
2020-12-19 03:44:38,281	[DEBUG]	
2020-12-19 03:44:38,282	[INFO]	147	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:44:41,527	[INFO]	148	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:44:41,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:44:44,879	[INFO]	149	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:44:44,881	[INFO]	150	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:44:44,881	[INFO]	151	SUCCESS	+2.0	
2020-12-19 03:44:44,882	[DEBUG]	
2020-12-19 03:44:44,883	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:44:44,884	[INFO]	153	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:44:45,872	[INFO]	154	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:44:45,874	[INFO]	155	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:44:45,874	[DEBUG]	
2020-12-19 03:44:49,166	[INFO]	156	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:44:49,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:44:52,478	[INFO]	157	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:44:52,479	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,40 ----
                      continue;
                  }
  
!                 
! 
!                 if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:44:55,781	[INFO]	158	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:44:55,782	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:44:55,783	[INFO]	159	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:44:55,783	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:44:56,733	[INFO]	160	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:44:56,734	[INFO]	161	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:44:57,714	[INFO]	162	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:44:58,720	[INFO]	163	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:44:59,744	[INFO]	164	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:44:59,745	[INFO]	165	SUCCESS	+2.0	
2020-12-19 03:44:59,745	[DEBUG]	
2020-12-19 03:44:59,747	[INFO]	166	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:44:59,748	[DEBUG]	
2020-12-19 03:45:00,758	[INFO]	167	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:45:00,760	[INFO]	168	SUCCESS	+2.0	
2020-12-19 03:45:00,760	[DEBUG]	
2020-12-19 03:45:01,768	[INFO]	169	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:45:02,768	[INFO]	170	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:45:03,787	[INFO]	171	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:45:18,847	[INFO]	172	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:45:19,717	[INFO]	173	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:45:20,587	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:45:21,486	[INFO]	175	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:45:24,579	[INFO]	176	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:45:24,580	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:45:24,581	[INFO]	177	SUCCESS	+2.0	
2020-12-19 03:45:24,581	[DEBUG]	
2020-12-19 03:45:25,471	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:45:26,435	[INFO]	179	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:45:27,441	[INFO]	180	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:45:28,438	[INFO]	181	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:45:28,439	[INFO]	182	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:45:28,440	[DEBUG]	
2020-12-19 03:45:28,440	[INFO]	183	SUCCESS	+2.0	
2020-12-19 03:45:28,441	[DEBUG]	
2020-12-19 03:45:29,479	[INFO]	184	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:45:30,508	[INFO]	185	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:45:31,543	[INFO]	186	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:45:34,953	[INFO]	187	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:45:39,188	[INFO]	188	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:45:40,182	[INFO]	189	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:45:43,538	[INFO]	190	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:45:46,771	[INFO]	191	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:45:46,774	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:45:46,778	[INFO]	192	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:45:46,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:45:46,784	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:45:46,786	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:45:47,778	[INFO]	194	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:45:48,788	[INFO]	195	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:45:48,792	[INFO]	196	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:45:48,795	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             int minDistance = Integer.MAX_VALUE;
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:45:49,816	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:45:50,826	[INFO]	198	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:45:50,827	[INFO]	199	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:45:50,828	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:45:50,829	[INFO]	200	SUCCESS	+2.0	
2020-12-19 03:45:50,830	[DEBUG]	
2020-12-19 03:45:51,835	[INFO]	201	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:45:55,083	[INFO]	202	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:45:56,068	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:45:57,074	[INFO]	204	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:46:00,313	[INFO]	205	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:46:00,313	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:46:01,306	[INFO]	206	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:46:01,307	[INFO]	207	SUCCESS	+2.0	
2020-12-19 03:46:01,308	[DEBUG]	
2020-12-19 03:46:04,611	[INFO]	208	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:46:04,612	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:46:05,523	[INFO]	209	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:46:05,527	[INFO]	210	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:46:05,528	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:46:06,471	[INFO]	211	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:46:06,472	[INFO]	212	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:46:06,473	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             continue;
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:46:06,474	[INFO]	213	SUCCESS	+2.0	
2020-12-19 03:46:06,474	[DEBUG]	
2020-12-19 03:46:07,465	[INFO]	214	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:46:08,524	[INFO]	215	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:46:09,506	[INFO]	216	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:46:10,522	[INFO]	217	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:46:11,533	[INFO]	218	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:46:12,530	[INFO]	219	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:46:13,533	[INFO]	220	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:46:16,816	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:46:16,817	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:46:16,818	[INFO]	222	SUCCESS	+2.0	
2020-12-19 03:46:16,818	[DEBUG]	
2020-12-19 03:46:17,804	[INFO]	223	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:46:18,804	[INFO]	224	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:46:19,833	[INFO]	225	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:46:23,132	[INFO]	226	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:46:23,132	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:46:24,033	[INFO]	227	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:46:24,036	[INFO]	228	SUCCESS	+2.0	
2020-12-19 03:46:24,037	[DEBUG]	
2020-12-19 03:46:24,040	[INFO]	229	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:46:24,042	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:46:24,044	[INFO]	230	SUCCESS	+2.0	
2020-12-19 03:46:24,046	[DEBUG]	
2020-12-19 03:46:27,480	[INFO]	231	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:46:27,481	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:46:27,482	[INFO]	232	SUCCESS	+2.0	
2020-12-19 03:46:27,482	[DEBUG]	
2020-12-19 03:46:30,761	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:46:30,763	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return Integer.MAX_VALUE;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:46:30,765	[INFO]	234	SUCCESS	+2.0	
2020-12-19 03:46:30,765	[DEBUG]	
2020-12-19 03:46:34,036	[INFO]	235	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:46:34,037	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:46:34,038	[INFO]	236	SUCCESS	+2.0	
2020-12-19 03:46:34,038	[DEBUG]	
2020-12-19 03:46:35,044	[INFO]	237	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:46:36,044	[INFO]	238	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:46:39,382	[INFO]	239	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:46:40,387	[INFO]	240	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:46:43,735	[INFO]	241	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:46:43,736	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 unvisitedNodes.put(startnode, 0);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:46:44,732	[INFO]	242	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 03:46:44,734	[INFO]	243	SUCCESS	+2.0	
2020-12-19 03:46:44,734	[DEBUG]	
2020-12-19 03:46:45,747	[INFO]	244	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:46:45,749	[INFO]	245	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:47:00,806	[INFO]	246	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:47:01,691	[INFO]	247	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:47:02,588	[INFO]	248	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:47:03,466	[INFO]	249	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:47:04,334	[INFO]	250	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:47:05,244	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:47:08,377	[INFO]	252	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:47:08,378	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 Node minNode = null;
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:47:08,380	[INFO]	253	SUCCESS	+2.0	
2020-12-19 03:47:08,380	[DEBUG]	
2020-12-19 03:47:09,365	[INFO]	254	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:47:10,382	[INFO]	255	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:47:10,384	[INFO]	256	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:47:11,391	[INFO]	257	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:47:12,383	[INFO]	258	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:47:13,387	[INFO]	259	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:47:13,388	[INFO]	260	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:47:14,391	[INFO]	261	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:47:17,658	[INFO]	262	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:47:17,659	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:47:18,627	[INFO]	263	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:47:18,628	[INFO]	264	SUCCESS	+2.0	
2020-12-19 03:47:18,629	[DEBUG]	
2020-12-19 03:47:19,625	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:47:19,626	[INFO]	266	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:47:19,627	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:47:19,627	[INFO]	267	SUCCESS	+2.0	
2020-12-19 03:47:19,628	[DEBUG]	
2020-12-19 03:47:20,615	[INFO]	268	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:47:21,622	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:47:22,642	[INFO]	270	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:47:22,643	[INFO]	271	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:47:22,644	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:47:22,645	[INFO]	272	SUCCESS	+2.0	
2020-12-19 03:47:22,645	[DEBUG]	
2020-12-19 03:47:25,944	[INFO]	273	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:47:25,945	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:47:25,946	[INFO]	274	SUCCESS	+2.0	
2020-12-19 03:47:25,947	[DEBUG]	
2020-12-19 03:47:26,902	[INFO]	275	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:47:30,240	[INFO]	276	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:47:30,242	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:47:30,245	[INFO]	277	SUCCESS	+2.0	
2020-12-19 03:47:30,246	[DEBUG]	
2020-12-19 03:47:31,229	[INFO]	278	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:47:32,241	[INFO]	279	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:47:33,300	[INFO]	280	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:47:34,287	[INFO]	281	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:47:35,279	[INFO]	282	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:47:35,280	[INFO]	283	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:47:36,294	[INFO]	284	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:47:37,305	[INFO]	285	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:47:40,620	[INFO]	286	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:47:43,940	[INFO]	287	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:47:43,940	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:47:44,929	[INFO]	288	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:47:45,922	[INFO]	289	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:47:45,923	[INFO]	290	SUCCESS	+2.0	
2020-12-19 03:47:45,924	[DEBUG]	
2020-12-19 03:47:46,917	[INFO]	291	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:47:47,922	[INFO]	292	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:47:48,932	[INFO]	293	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:47:49,933	[INFO]	294	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:47:49,935	[INFO]	295	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:47:53,281	[INFO]	296	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:47:53,282	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:47:54,295	[INFO]	297	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:47:57,577	[INFO]	298	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:47:57,578	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
-                 }
- 
-                 if (unvisitedNodes.get(nextnode) == null) {
-                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:47:58,586	[INFO]	299	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:47:58,592	[INFO]	300	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:47:58,593	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
-                 }
- 
-                 if (unvisitedNodes.get(nextnode) == null) {
-                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:47:58,596	[INFO]	301	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:47:58,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
-                 }
- 
-                 if (unvisitedNodes.get(nextnode) == null) {
-                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,36 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:47:58,600	[INFO]	302	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:47:58,601	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:47:59,627	[INFO]	303	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:47:59,628	[INFO]	304	SUCCESS	+2.0	
2020-12-19 03:47:59,629	[DEBUG]	
2020-12-19 03:48:00,649	[INFO]	305	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:48:04,006	[INFO]	306	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:48:07,219	[INFO]	307	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:48:08,199	[INFO]	308	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:48:11,546	[INFO]	309	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:48:11,547	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:48:11,548	[INFO]	310	SUCCESS	+2.0	
2020-12-19 03:48:11,548	[DEBUG]	
2020-12-19 03:48:12,474	[INFO]	311	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:48:15,770	[INFO]	312	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:48:15,773	[INFO]	313	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:48:16,781	[INFO]	314	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:48:16,784	[INFO]	315	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:48:16,785	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:48:20,165	[INFO]	316	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:48:20,167	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:48:23,466	[INFO]	317	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:48:23,467	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:48:24,467	[INFO]	318	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:48:24,469	[INFO]	319	SUCCESS	+2.0	
2020-12-19 03:48:24,469	[DEBUG]	
2020-12-19 03:48:25,441	[INFO]	320	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:48:28,696	[INFO]	321	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:48:29,669	[INFO]	322	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:48:33,024	[INFO]	323	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:48:33,026	[INFO]	324	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:48:36,400	[INFO]	325	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:48:36,401	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);

2020-12-19 03:48:39,809	[INFO]	326	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:48:39,810	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 21,26 ****
--- 21,38 ----
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
+                 for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
                  return distance;
              }
              visitedNodes.add(node);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 59,65 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:48:42,997	[INFO]	327	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 03:48:42,998	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:48:44,026	[INFO]	328	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:48:44,027	[INFO]	329	SUCCESS	+2.0	
2020-12-19 03:48:44,028	[DEBUG]	
2020-12-19 03:48:45,049	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:48:48,396	[INFO]	331	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:48:49,418	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:48:50,409	[INFO]	333	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:48:53,732	[INFO]	334	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:48:53,733	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:48:56,901	[INFO]	335	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:48:56,902	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:49:00,093	[INFO]	336	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:49:03,291	[INFO]	337	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:49:03,293	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:49:03,294	[INFO]	338	SUCCESS	+2.0	
2020-12-19 03:49:03,295	[DEBUG]	
2020-12-19 03:49:06,564	[INFO]	339	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:49:09,905	[INFO]	340	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:09,906	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:09,907	[INFO]	341	SUCCESS	+2.0	
2020-12-19 03:49:09,907	[DEBUG]	
2020-12-19 03:49:10,877	[INFO]	342	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:49:10,882	[INFO]	343	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:49:10,883	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:49:10,885	[INFO]	344	SUCCESS	+2.0	
2020-12-19 03:49:10,887	[DEBUG]	
2020-12-19 03:49:11,912	[INFO]	345	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:49:12,927	[INFO]	346	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:49:13,937	[INFO]	347	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:49:14,928	[INFO]	348	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:49:18,283	[INFO]	349	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:49:18,285	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 16,21 ****
--- 16,22 ----
          unvisitedNodes.put(startnode, 0);
  
          while (!unvisitedNodes.isEmpty()) {
+             Node minNode = null;
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);

2020-12-19 03:49:19,266	[INFO]	350	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:49:19,267	[INFO]	351	SUCCESS	+2.0	
2020-12-19 03:49:19,268	[DEBUG]	
2020-12-19 03:49:19,269	[INFO]	352	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:49:20,275	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:49:21,280	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:49:22,265	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:49:22,267	[INFO]	356	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:49:22,268	[DEBUG]	
2020-12-19 03:49:22,268	[INFO]	357	SUCCESS	+2.0	
2020-12-19 03:49:22,269	[DEBUG]	
2020-12-19 03:49:22,270	[INFO]	358	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:49:22,271	[INFO]	359	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:22,271	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:22,272	[INFO]	360	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:22,273	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:23,279	[INFO]	361	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:49:24,316	[INFO]	362	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:49:25,295	[INFO]	363	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:49:25,296	[INFO]	364	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:25,297	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:26,273	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:49:26,275	[INFO]	366	SUCCESS	+2.0	
2020-12-19 03:49:26,275	[DEBUG]	
2020-12-19 03:49:27,270	[INFO]	367	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:49:27,272	[INFO]	368	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:27,273	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:27,273	[INFO]	369	SUCCESS	+2.0	
2020-12-19 03:49:27,274	[DEBUG]	
2020-12-19 03:49:28,296	[INFO]	370	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:49:31,596	[INFO]	371	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:49:31,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:31,598	[INFO]	372	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:49:31,599	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:32,579	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:49:32,581	[INFO]	374	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:49:32,582	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:32,583	[INFO]	375	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:49:32,583	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:33,627	[INFO]	376	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:49:34,608	[INFO]	377	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:49:37,892	[INFO]	378	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:49:37,893	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:37,895	[INFO]	379	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:49:37,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:37,897	[INFO]	380	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:49:37,898	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:49:41,207	[INFO]	381	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:49:41,209	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 51,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:49:41,211	[INFO]	382	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:49:41,213	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 15,20 ****
--- 15,22 ----
  
          unvisitedNodes.put(startnode, 0);
  
+         Node minNode = null;
+ 
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
***************
*** 26,31 ****
--- 28,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.remove(node);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 51,57 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:49:44,537	[INFO]	383	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:49:44,538	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:49:47,761	[INFO]	384	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:49:47,762	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 03:49:47,763	[INFO]	385	SUCCESS	+2.0	
2020-12-19 03:49:47,763	[DEBUG]	
2020-12-19 03:49:48,774	[INFO]	386	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:49:48,776	[INFO]	387	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:49:48,776	[INFO]	388	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:49:48,777	[DEBUG]	
2020-12-19 03:49:48,777	[INFO]	389	SUCCESS	+2.0	
2020-12-19 03:49:48,778	[DEBUG]	
2020-12-19 03:49:49,765	[INFO]	390	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:49:50,774	[INFO]	391	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:49:51,775	[INFO]	392	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:49:51,777	[INFO]	393	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:51,777	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:51,778	[INFO]	394	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:49:51,779	[DEBUG]	
2020-12-19 03:49:51,779	[INFO]	395	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:49:51,780	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:49:55,121	[INFO]	396	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:49:55,122	[INFO]	397	SUCCESS	+2.0	
2020-12-19 03:49:55,122	[DEBUG]	
2020-12-19 03:49:56,059	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:49:56,061	[INFO]	399	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:49:57,066	[INFO]	400	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:50:00,349	[INFO]	401	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:50:00,350	[INFO]	402	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:50:01,358	[INFO]	403	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:50:04,670	[INFO]	404	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:50:05,645	[INFO]	405	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:50:05,647	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:50:05,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:50:08,993	[INFO]	407	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:50:08,994	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:50:09,953	[INFO]	408	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:50:10,923	[INFO]	409	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:50:10,925	[INFO]	410	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:50:10,926	[INFO]	411	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:50:10,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:50:14,282	[INFO]	412	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:50:14,283	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:50:17,595	[INFO]	413	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:50:17,597	[INFO]	414	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:50:17,597	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:50:18,575	[INFO]	415	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:50:21,927	[INFO]	416	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:50:21,928	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 31,37 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:50:36,997	[INFO]	417	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:50:37,905	[INFO]	418	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:50:40,869	[INFO]	419	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:50:40,870	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             visitedNodes.add(node);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 03:50:44,225	[INFO]	420	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:50:44,227	[INFO]	421	SUCCESS	+2.0	
2020-12-19 03:50:44,227	[DEBUG]	
2020-12-19 03:50:47,482	[INFO]	422	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:50:50,783	[INFO]	423	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:50:50,783	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:50:50,784	[INFO]	424	SUCCESS	+2.0	
2020-12-19 03:50:50,785	[DEBUG]	
2020-12-19 03:50:50,786	[INFO]	425	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:50:50,786	[DEBUG]	
2020-12-19 03:50:51,750	[INFO]	426	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:50:51,752	[INFO]	427	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:50:51,752	[DEBUG]	
2020-12-19 03:50:51,753	[INFO]	428	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:50:51,753	[DEBUG]	
2020-12-19 03:50:51,754	[INFO]	429	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:50:51,754	[DEBUG]	
2020-12-19 03:50:52,812	[INFO]	430	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:50:52,815	[INFO]	431	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:50:52,816	[DEBUG]	
2020-12-19 03:50:56,080	[INFO]	432	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:50:56,081	[INFO]	433	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:50:59,448	[INFO]	434	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:51:02,646	[INFO]	435	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:51:02,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:51:05,924	[INFO]	436	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:51:05,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,36 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 26,38 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:51:05,926	[INFO]	437	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:51:05,927	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:51:09,207	[INFO]	438	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:51:09,209	[INFO]	439	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:51:09,210	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:51:10,188	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:51:10,189	[INFO]	441	SUCCESS	+2.0	
2020-12-19 03:51:10,190	[DEBUG]	
2020-12-19 03:51:10,191	[INFO]	442	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:51:13,526	[INFO]	443	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:51:13,527	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:51:13,528	[INFO]	444	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:51:13,529	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:51:16,865	[INFO]	445	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:51:16,866	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,30 ****
--- 25,32 ----
              }
              visitedNodes.add(node);
  
+             unvisitedNodes.remove(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 50,56 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:51:16,868	[INFO]	446	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:51:16,868	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 24,29 ****
--- 24,31 ----
                  return distance;
              }
              visitedNodes.add(node);
+ 
+             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:51:20,143	[INFO]	447	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:51:20,144	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:51:21,128	[INFO]	448	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:51:21,129	[INFO]	449	SUCCESS	+2.0	
2020-12-19 03:51:21,129	[DEBUG]	
2020-12-19 03:51:22,119	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:51:25,406	[INFO]	451	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:51:25,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:28,746	[INFO]	452	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:51:32,090	[INFO]	453	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:51:32,092	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,34 ****
              }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 25,34 ----
              }
              visitedNodes.add(node);
  
+             visitedNodes.add(node);
+ 
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:32,094	[INFO]	454	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:51:32,094	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:35,448	[INFO]	455	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:51:35,450	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:51:35,451	[INFO]	456	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:51:35,451	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:51:36,433	[INFO]	457	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:51:36,435	[INFO]	458	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:51:36,436	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,37 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 26,35 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     return distance;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:51:36,437	[INFO]	459	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:51:36,438	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:39,847	[INFO]	460	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:51:39,848	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:51:43,272	[INFO]	461	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:51:46,615	[INFO]	462	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:51:46,616	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,54 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 45,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:51:49,925	[INFO]	463	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:51:49,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 45,51 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:51:53,189	[INFO]	464	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:51:53,190	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:51:53,192	[INFO]	465	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:51:53,192	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 46,52 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:51:56,488	[INFO]	466	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 03:51:56,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:56,492	[INFO]	467	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:51:56,493	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:51:59,815	[INFO]	468	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:51:59,816	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:51:59,818	[INFO]	469	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:51:59,819	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:51:59,821	[INFO]	470	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:51:59,822	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:51:59,824	[INFO]	471	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:51:59,825	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:52:03,121	[INFO]	472	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:52:03,123	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,39 ----
                      continue;
                  }
  
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:52:03,124	[INFO]	473	SUCCESS	+2.0	
2020-12-19 03:52:03,124	[DEBUG]	
2020-12-19 03:52:18,188	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:52:21,042	[INFO]	475	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:52:21,929	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:52:25,022	[INFO]	477	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:52:25,023	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:52:25,948	[INFO]	478	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:52:25,949	[INFO]	479	SUCCESS	+2.0	
2020-12-19 03:52:25,950	[DEBUG]	
2020-12-19 03:52:26,955	[INFO]	480	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:52:30,342	[INFO]	481	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:52:30,343	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:52:31,316	[INFO]	482	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:52:32,314	[INFO]	483	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:52:32,315	[INFO]	484	SUCCESS	+2.0	
2020-12-19 03:52:32,315	[DEBUG]	
2020-12-19 03:52:33,334	[INFO]	485	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:52:34,351	[INFO]	486	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:52:34,354	[INFO]	487	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:52:34,355	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:52:34,357	[INFO]	488	SUCCESS	+2.0	
2020-12-19 03:52:34,357	[DEBUG]	
2020-12-19 03:52:35,391	[INFO]	489	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:52:38,714	[INFO]	490	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:52:38,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 45,50 ****
--- 45,51 ----
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {

2020-12-19 03:52:38,715	[INFO]	491	SUCCESS	+2.0	
2020-12-19 03:52:38,716	[DEBUG]	
2020-12-19 03:52:41,925	[INFO]	492	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:52:41,925	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:52:42,921	[INFO]	493	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:52:42,922	[INFO]	494	SUCCESS	+2.0	
2020-12-19 03:52:42,923	[DEBUG]	
2020-12-19 03:52:46,321	[INFO]	495	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:52:46,322	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 03:52:46,323	[INFO]	496	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:52:46,323	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 03:52:47,312	[INFO]	497	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:52:50,622	[INFO]	498	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:52:51,619	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:52:54,995	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:52:54,997	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 44,49 ****
--- 44,50 ----
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
          Node minNode = null;
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);

2020-12-19 03:52:54,998	[INFO]	==== END ====
2020-12-19 03:52:54,998	[INFO]	Reason: step budget
2020-12-19 03:52:54,999	[INFO]	
2020-12-19 03:52:54,999	[INFO]	========== EPOCH 20 ==========
2020-12-19 03:52:54,999	[INFO]	==== WARMUP ====
2020-12-19 03:52:58,383	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:52:58,383	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:53:01,631	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:53:01,632	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:53:04,996	[INFO]	WARM	SUCCESS	 2.0	
2020-12-19 03:53:04,996	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:53:08,259	[INFO]	INITIAL	SUCCESS	 2.0	
2020-12-19 03:53:08,259	[DEBUG]	<RunResult 'status': 'SUCCESS', 'fitness': 2.0>
2020-12-19 03:53:08,260	[INFO]	==== START ====
2020-12-19 03:53:11,548	[INFO]	1	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:53:26,608	[INFO]	2	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:53:29,541	[INFO]	3	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:53:30,421	[INFO]	4	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:53:31,310	[INFO]	5	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:53:32,228	[INFO]	6	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:53:33,204	[INFO]	7	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:53:34,218	[INFO]	8	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:53:37,453	[INFO]	9	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:53:37,455	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:53:37,457	[INFO]	10	SUCCESS	+2.0	
2020-12-19 03:53:37,458	[DEBUG]	
2020-12-19 03:53:38,541	[INFO]	11	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:53:38,545	[INFO]	12	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:53:38,546	[DEBUG]	
2020-12-19 03:53:38,549	[INFO]	13	SUCCESS	+2.0	
2020-12-19 03:53:38,550	[DEBUG]	
2020-12-19 03:53:41,873	[INFO]	14	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:53:41,874	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 03:53:41,877	[INFO]	15	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:53:41,878	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 03:53:41,879	[INFO]	16	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:53:41,880	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 14,19 ****
--- 14,21 ----
          Set<Node> visitedNodes = new HashSet<>();
  
          unvisitedNodes.put(startnode, 0);
+ 
+         Node minNode = null;
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);

2020-12-19 03:53:41,881	[INFO]	17	SUCCESS	+2.0	
2020-12-19 03:53:41,882	[DEBUG]	
2020-12-19 03:53:41,884	[INFO]	18	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:53:42,931	[INFO]	19	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:53:46,371	[INFO]	20	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:54:01,439	[INFO]	21	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:54:02,330	[INFO]	22	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:54:03,226	[INFO]	23	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:54:06,280	[INFO]	24	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:54:09,597	[INFO]	25	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:54:09,598	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:54:09,600	[INFO]	26	SUCCESS	+2.0	
2020-12-19 03:54:09,600	[DEBUG]	
2020-12-19 03:54:10,596	[INFO]	27	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:54:11,636	[INFO]	28	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:54:14,831	[INFO]	29	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:54:15,828	[INFO]	30	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:54:15,831	[INFO]	31	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:54:15,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:54:15,833	[INFO]	32	SUCCESS	+2.0	
2020-12-19 03:54:15,834	[DEBUG]	
2020-12-19 03:54:16,840	[INFO]	33	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 03:54:17,877	[INFO]	34	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:54:21,139	[INFO]	35	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:54:21,140	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:54:22,129	[INFO]	36	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:54:23,143	[INFO]	37	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:54:23,145	[INFO]	38	SUCCESS	+2.0	
2020-12-19 03:54:23,145	[DEBUG]	
2020-12-19 03:54:26,463	[INFO]	39	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:54:26,464	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:54:29,692	[INFO]	40	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:54:33,058	[INFO]	41	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:54:33,059	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:54:36,352	[INFO]	42	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='})
2020-12-19 03:54:36,353	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:54:39,647	[INFO]	43	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:54:39,648	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance <= minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 03:54:42,899	[INFO]	44	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:54:42,900	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:54:42,901	[INFO]	45	SUCCESS	+2.0	
2020-12-19 03:54:42,901	[DEBUG]	
2020-12-19 03:54:46,313	[INFO]	46	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:54:46,314	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:54:46,315	[INFO]	47	SUCCESS	+2.0	
2020-12-19 03:54:46,315	[DEBUG]	
2020-12-19 03:54:49,687	[INFO]	48	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:54:49,689	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:54:52,915	[INFO]	49	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:54:56,193	[INFO]	50	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:54:57,170	[INFO]	51	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:54:58,192	[INFO]	52	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:54:59,244	[INFO]	53	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:55:00,268	[INFO]	54	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:55:03,629	[INFO]	55	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:55:03,630	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,28 ****
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
!             if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
--- 20,26 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
!             
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 29,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:55:04,583	[INFO]	56	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:55:07,868	[INFO]	57	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:55:11,219	[INFO]	58	SUCCESS	 4.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2)})
2020-12-19 03:55:14,483	[INFO]	59	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:55:15,483	[INFO]	60	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:55:18,864	[INFO]	61	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:55:18,865	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:55:18,866	[INFO]	62	SUCCESS	+2.0	
2020-12-19 03:55:18,867	[DEBUG]	
2020-12-19 03:55:22,039	[INFO]	63	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:55:23,013	[INFO]	64	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:55:23,017	[INFO]	65	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:55:23,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:55:26,268	[INFO]	66	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:55:26,269	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,41 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 26,40 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:55:26,270	[INFO]	67	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:55:26,271	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:55:26,272	[INFO]	68	SUCCESS	+2.0	
2020-12-19 03:55:26,272	[DEBUG]	
2020-12-19 03:55:27,270	[INFO]	69	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:55:28,298	[INFO]	70	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:55:29,280	[INFO]	71	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:55:29,282	[INFO]	72	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:55:32,645	[INFO]	73	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:55:32,646	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,39 ****
--- 34,43 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
+ 
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }

2020-12-19 03:55:32,647	[INFO]	74	SUCCESS	+2.0	
2020-12-19 03:55:32,648	[DEBUG]	
2020-12-19 03:55:36,361	[INFO]	75	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:55:36,364	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-19 03:55:37,630	[INFO]	76	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:55:37,631	[INFO]	77	SUCCESS	+2.0	
2020-12-19 03:55:37,631	[DEBUG]	
2020-12-19 03:55:41,903	[INFO]	78	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:55:41,904	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:55:41,905	[INFO]	79	SUCCESS	+2.0	
2020-12-19 03:55:41,905	[DEBUG]	
2020-12-19 03:55:43,212	[INFO]	80	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:55:47,069	[INFO]	81	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 03:55:47,070	[INFO]	82	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:55:47,071	[DEBUG]	
2020-12-19 03:55:47,071	[INFO]	83	SUCCESS	+2.0	
2020-12-19 03:55:47,072	[DEBUG]	
2020-12-19 03:55:50,318	[INFO]	84	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:55:51,366	[INFO]	85	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:55:52,394	[INFO]	86	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:55:53,377	[INFO]	87	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:55:53,378	[INFO]	88	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:55:53,378	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 03:55:54,355	[INFO]	89	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 03:55:54,357	[INFO]	90	SUCCESS	+2.0	
2020-12-19 03:55:54,358	[DEBUG]	
2020-12-19 03:55:54,360	[INFO]	91	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:55:54,361	[DEBUG]	
2020-12-19 03:55:55,368	[INFO]	92	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:55:55,370	[INFO]	93	SUCCESS	+2.0	
2020-12-19 03:55:55,371	[DEBUG]	
2020-12-19 03:55:58,658	[INFO]	94	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 03:55:59,647	[INFO]	95	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:56:00,644	[INFO]	96	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:56:00,646	[INFO]	97	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:56:01,669	[INFO]	98	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:56:02,681	[INFO]	99	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:56:02,684	[INFO]	100	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:56:03,686	[INFO]	101	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 03:56:03,687	[INFO]	102	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:56:04,712	[INFO]	103	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:56:08,102	[INFO]	104	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:56:08,103	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:56:09,074	[INFO]	105	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:56:09,076	[INFO]	106	SUCCESS	+2.0	
2020-12-19 03:56:09,077	[DEBUG]	
2020-12-19 03:56:12,446	[INFO]	107	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:56:12,447	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,35 ****
--- 30,38 ----
                      continue;
                  }
  
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+ 
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }

2020-12-19 03:56:15,693	[INFO]	108	SUCCESS	 3.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:56:16,698	[INFO]	109	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:56:16,699	[INFO]	110	SUCCESS	+2.0	
2020-12-19 03:56:16,699	[DEBUG]	
2020-12-19 03:56:17,715	[INFO]	111	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 03:56:20,945	[INFO]	112	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:56:20,946	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:56:20,947	[INFO]	113	SUCCESS	+2.0	
2020-12-19 03:56:20,948	[DEBUG]	
2020-12-19 03:56:24,258	[INFO]	114	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:56:24,260	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {

2020-12-19 03:56:24,262	[INFO]	115	SUCCESS	+2.0	
2020-12-19 03:56:24,263	[DEBUG]	
2020-12-19 03:56:25,244	[INFO]	116	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:56:26,264	[INFO]	117	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:56:26,265	[INFO]	118	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:56:26,266	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:56:26,266	[INFO]	119	SUCCESS	+2.0	
2020-12-19 03:56:26,267	[DEBUG]	
2020-12-19 03:56:27,261	[INFO]	120	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:56:30,537	[INFO]	121	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 03:56:31,474	[INFO]	122	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:56:32,458	[INFO]	123	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:56:33,499	[INFO]	124	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 03:56:34,498	[INFO]	125	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:56:37,790	[INFO]	126	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:56:38,786	[INFO]	127	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:56:42,064	[INFO]	128	SUCCESS	 3.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:56:45,304	[INFO]	129	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:56:48,564	[INFO]	130	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:56:48,564	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:56:49,554	[INFO]	131	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:56:49,556	[INFO]	132	SUCCESS	+2.0	
2020-12-19 03:56:49,557	[DEBUG]	
2020-12-19 03:56:52,893	[INFO]	133	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:56:52,894	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:56:53,859	[INFO]	134	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:56:54,858	[INFO]	135	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 03:56:55,889	[INFO]	136	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:56:59,148	[INFO]	137	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:56:59,149	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:56:59,150	[INFO]	138	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:56:59,150	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:57:00,109	[INFO]	139	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 03:57:00,110	[INFO]	140	SUCCESS	+2.0	
2020-12-19 03:57:00,110	[DEBUG]	
2020-12-19 03:57:01,161	[INFO]	141	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:57:01,162	[INFO]	142	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:57:01,163	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:57:01,163	[INFO]	143	SUCCESS	+2.0	
2020-12-19 03:57:01,164	[DEBUG]	
2020-12-19 03:57:04,469	[INFO]	144	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 03:57:04,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     visitedNodes.add(node);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:57:04,474	[INFO]	145	SUCCESS	+2.0	
2020-12-19 03:57:04,474	[DEBUG]	
2020-12-19 03:57:05,454	[INFO]	146	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:57:06,466	[INFO]	147	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:57:07,466	[INFO]	148	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:57:08,449	[INFO]	149	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:57:11,712	[INFO]	150	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 03:57:12,682	[INFO]	151	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:57:13,676	[INFO]	152	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:57:13,681	[INFO]	153	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:57:16,974	[INFO]	154	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:57:16,975	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-19 03:57:16,976	[INFO]	155	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:57:16,977	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 51,56 ****
--- 51,60 ----
                  minDistance = distance;
                  minNode = node;
              }
+             if (distance < minDistance) {
+                 minDistance = distance;
+                 minNode = node;
+             }
          }
          return minNode;
      }

2020-12-19 03:57:16,978	[INFO]	156	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:57:16,978	[DEBUG]	
2020-12-19 03:57:16,978	[INFO]	157	SUCCESS	+2.0	
2020-12-19 03:57:16,979	[DEBUG]	
2020-12-19 03:57:16,980	[INFO]	158	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:57:16,980	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 03:57:16,981	[INFO]	159	SUCCESS	+2.0	
2020-12-19 03:57:16,981	[DEBUG]	
2020-12-19 03:57:17,995	[INFO]	160	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 03:57:18,988	[INFO]	161	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:57:22,406	[INFO]	162	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:57:22,407	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:57:22,408	[INFO]	163	SUCCESS	+2.0	
2020-12-19 03:57:22,409	[DEBUG]	
2020-12-19 03:57:25,613	[INFO]	164	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:57:25,614	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,39 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     if (node.getValue() == goalnode.getValue()) {
!                 return distance;
!             }
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:57:25,615	[INFO]	165	SUCCESS	+2.0	
2020-12-19 03:57:25,615	[DEBUG]	
2020-12-19 03:57:26,630	[INFO]	166	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:57:29,904	[INFO]	167	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:57:33,185	[INFO]	168	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 03:57:33,186	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();

2020-12-19 03:57:33,187	[INFO]	169	SUCCESS	+2.0	
2020-12-19 03:57:33,187	[DEBUG]	
2020-12-19 03:57:36,471	[INFO]	170	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 03:57:36,472	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:57:36,473	[INFO]	171	SUCCESS	+2.0	
2020-12-19 03:57:36,473	[DEBUG]	
2020-12-19 03:57:39,833	[INFO]	172	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:57:43,070	[INFO]	173	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:57:44,073	[INFO]	174	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:57:44,075	[INFO]	175	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:57:47,381	[INFO]	176	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:57:47,382	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:57:47,383	[INFO]	177	SUCCESS	+2.0	
2020-12-19 03:57:47,384	[DEBUG]	
2020-12-19 03:57:48,388	[INFO]	178	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:57:51,691	[INFO]	179	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:57:51,692	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 03:57:51,693	[INFO]	180	SUCCESS	+2.0	
2020-12-19 03:57:51,694	[DEBUG]	
2020-12-19 03:57:51,695	[INFO]	181	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'})
2020-12-19 03:57:51,695	[DEBUG]	
2020-12-19 03:57:51,696	[INFO]	182	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:57:54,884	[INFO]	183	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '<'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:57:54,885	[INFO]	184	SUCCESS	+2.0	
2020-12-19 03:57:54,885	[DEBUG]	
2020-12-19 03:57:55,904	[INFO]	185	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 03:57:59,172	[INFO]	186	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:57:59,173	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:58:00,152	[INFO]	187	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:58:03,458	[INFO]	188	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 03:58:03,459	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
***************
*** 49,54 ****
--- 49,55 ----
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;
+                 minDistance = distance;
                  minNode = node;
              }
          }

2020-12-19 03:58:04,440	[INFO]	189	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 03:58:04,442	[INFO]	190	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:58:04,442	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:58:04,443	[INFO]	191	SUCCESS	+2.0	
2020-12-19 03:58:04,443	[DEBUG]	
2020-12-19 03:58:05,447	[INFO]	192	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 03:58:08,857	[INFO]	193	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 03:58:08,858	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 Node minNode = null;
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 03:58:08,860	[INFO]	194	SUCCESS	+2.0	
2020-12-19 03:58:08,860	[DEBUG]	
2020-12-19 03:58:09,886	[INFO]	195	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:58:10,873	[INFO]	196	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:58:11,886	[INFO]	197	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 03:58:12,910	[INFO]	198	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:58:13,905	[INFO]	199	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:58:14,901	[INFO]	200	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:58:15,894	[INFO]	201	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 03:58:16,897	[INFO]	202	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 03:58:17,950	[INFO]	203	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 03:58:21,194	[INFO]	204	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 03:58:24,391	[INFO]	205	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:58:27,668	[INFO]	206	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 03:58:28,833	[INFO]	207	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:58:28,836	[INFO]	208	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:58:30,183	[INFO]	209	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:58:30,185	[INFO]	210	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:58:30,187	[INFO]	211	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:58:34,525	[INFO]	212	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'})
2020-12-19 03:58:34,526	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 19,24 ****
--- 19,37 ----
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
  
              if (node.getValue() == goalnode.getValue()) {
                  return distance;

2020-12-19 03:58:35,659	[INFO]	213	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:58:35,662	[INFO]	214	SUCCESS	+2.0	
2020-12-19 03:58:35,662	[DEBUG]	
2020-12-19 03:58:39,015	[INFO]	215	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:58:39,016	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:58:39,017	[INFO]	216	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:58:39,017	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 03:58:39,018	[INFO]	217	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:58:39,018	[DEBUG]	
2020-12-19 03:58:39,019	[INFO]	218	SUCCESS	+2.0	
2020-12-19 03:58:39,019	[DEBUG]	
2020-12-19 03:58:42,318	[INFO]	219	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:58:43,372	[INFO]	220	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:58:46,624	[INFO]	221	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:58:46,625	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 03:58:46,626	[INFO]	222	SUCCESS	+2.0	
2020-12-19 03:58:46,627	[DEBUG]	
2020-12-19 03:58:47,595	[INFO]	223	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:58:47,596	[INFO]	224	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 03:58:51,144	[INFO]	225	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:58:51,145	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:58:52,176	[INFO]	226	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 03:58:52,178	[INFO]	227	SUCCESS	+2.0	
2020-12-19 03:58:52,179	[DEBUG]	
2020-12-19 03:58:53,240	[INFO]	228	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:58:54,285	[INFO]	229	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 03:58:55,330	[INFO]	230	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'direction': 'before'})
2020-12-19 03:58:55,332	[INFO]	231	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:58:55,332	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:58:55,333	[INFO]	232	SUCCESS	+2.0	
2020-12-19 03:58:55,333	[DEBUG]	
2020-12-19 03:58:58,714	[INFO]	233	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:58:58,715	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 visitedNodes.add(node);
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:58:58,716	[INFO]	234	SUCCESS	+2.0	
2020-12-19 03:58:58,716	[DEBUG]	
2020-12-19 03:58:59,676	[INFO]	235	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 03:59:02,985	[INFO]	236	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:59:02,986	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 43,48 ****
--- 43,49 ----
      }
  
      public Node getNodeWithMinDistance(Map<Node,Integer> list) {
+         Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {

2020-12-19 03:59:02,987	[INFO]	237	SUCCESS	+2.0	
2020-12-19 03:59:02,987	[DEBUG]	
2020-12-19 03:59:03,979	[INFO]	238	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 03:59:03,982	[INFO]	239	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:59:04,927	[INFO]	240	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:59:04,928	[INFO]	241	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 03:59:04,929	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 03:59:05,938	[INFO]	242	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 03:59:05,939	[INFO]	243	SUCCESS	+2.0	
2020-12-19 03:59:05,939	[DEBUG]	
2020-12-19 03:59:06,979	[INFO]	244	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 03:59:07,974	[INFO]	245	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:59:08,984	[INFO]	246	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 03:59:09,990	[INFO]	247	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:59:09,991	[INFO]	248	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 03:59:10,992	[INFO]	249	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 03:59:12,033	[INFO]	250	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:59:13,032	[INFO]	251	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 03:59:13,034	[INFO]	252	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 03:59:13,034	[DEBUG]	
2020-12-19 03:59:13,035	[INFO]	253	SUCCESS	+2.0	
2020-12-19 03:59:13,035	[DEBUG]	
2020-12-19 03:59:14,051	[INFO]	254	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 03:59:17,372	[INFO]	255	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 03:59:17,373	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 10,15 ****
--- 10,16 ----
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
          int n = length_by_edge.size();
          // the shortest distance from source to each node
+         int minDistance = Integer.MAX_VALUE;
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
  

2020-12-19 03:59:17,373	[INFO]	256	SUCCESS	+2.0	
2020-12-19 03:59:17,374	[DEBUG]	
2020-12-19 03:59:18,353	[INFO]	257	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 03:59:19,352	[INFO]	258	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 03:59:22,665	[INFO]	259	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:59:23,639	[INFO]	260	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:59:26,960	[INFO]	261	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:59:26,961	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:59:26,962	[INFO]	262	SUCCESS	+2.0	
2020-12-19 03:59:26,962	[DEBUG]	
2020-12-19 03:59:26,963	[INFO]	263	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:59:27,920	[INFO]	264	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:59:28,894	[INFO]	265	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 03:59:28,895	[INFO]	266	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 03:59:28,896	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 03:59:29,883	[INFO]	267	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 03:59:29,884	[INFO]	268	SUCCESS	+2.0	
2020-12-19 03:59:29,885	[DEBUG]	
2020-12-19 03:59:30,905	[INFO]	269	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 03:59:31,929	[INFO]	270	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 03:59:31,932	[INFO]	271	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 03:59:31,934	[INFO]	272	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 03:59:31,936	[INFO]	273	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 03:59:31,937	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 03:59:33,029	[INFO]	274	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 03:59:33,031	[INFO]	275	SUCCESS	+2.0	
2020-12-19 03:59:33,032	[DEBUG]	
2020-12-19 03:59:36,337	[INFO]	276	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 03:59:36,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:36,340	[INFO]	277	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:59:36,340	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:36,341	[INFO]	278	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 03:59:36,342	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:39,701	[INFO]	279	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3)})
2020-12-19 03:59:42,937	[INFO]	280	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 03:59:46,242	[INFO]	281	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:59:46,243	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:46,244	[INFO]	282	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:59:46,244	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:49,525	[INFO]	283	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 03:59:50,522	[INFO]	284	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 03:59:50,524	[INFO]	285	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:59:50,525	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:51,541	[INFO]	286	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 03:59:51,546	[INFO]	287	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:59:51,548	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:52,531	[INFO]	288	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 03:59:52,532	[INFO]	289	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 03:59:52,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 03:59:53,513	[INFO]	290	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 03:59:54,530	[INFO]	291	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>='})
2020-12-19 04:00:09,604	[INFO]	292	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 04:00:09,606	[INFO]	293	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:00:09,606	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:00:12,499	[INFO]	294	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 04:00:12,500	[INFO]	295	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 04:00:12,501	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:00:13,400	[INFO]	296	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 04:00:13,402	[INFO]	297	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:00:13,402	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:00:13,405	[INFO]	298	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 04:00:14,422	[INFO]	299	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:00:14,424	[INFO]	300	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:00:14,425	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,38 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:00:17,786	[INFO]	301	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:00:17,787	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:00:17,788	[INFO]	302	SUCCESS	+2.0	
2020-12-19 04:00:17,788	[DEBUG]	
2020-12-19 04:00:20,951	[INFO]	303	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 04:00:20,952	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 04:00:20,953	[INFO]	304	SUCCESS	+2.0	
2020-12-19 04:00:20,953	[DEBUG]	
2020-12-19 04:00:24,310	[INFO]	305	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:00:24,311	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 04:00:24,312	[INFO]	306	SUCCESS	+2.0	
2020-12-19 04:00:24,312	[DEBUG]	
2020-12-19 04:00:25,265	[INFO]	307	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 04:00:25,267	[INFO]	308	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:00:25,267	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 04:00:25,268	[INFO]	309	SUCCESS	+2.0	
2020-12-19 04:00:25,268	[DEBUG]	
2020-12-19 04:00:26,263	[INFO]	310	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'direction': 'before'})
2020-12-19 04:00:27,273	[INFO]	311	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:00:27,274	[INFO]	312	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 04:00:27,275	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 34,41 ****
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
              }
          }
  
--- 34,40 ----
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
!                 
              }
          }
  

2020-12-19 04:00:27,275	[INFO]	313	SUCCESS	+2.0	
2020-12-19 04:00:27,276	[DEBUG]	
2020-12-19 04:00:27,277	[INFO]	314	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 04:00:27,277	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 04:00:28,292	[INFO]	315	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 04:00:31,615	[INFO]	316	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 04:00:31,616	[INFO]	317	SUCCESS	+2.0	
2020-12-19 04:00:31,616	[DEBUG]	
2020-12-19 04:00:34,882	[INFO]	318	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 04:00:38,532	[INFO]	319	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 04:00:38,533	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                      continue;
                  }
  

2020-12-19 04:00:39,471	[INFO]	320	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 04:00:40,465	[INFO]	321	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 04:00:43,905	[INFO]	322	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 04:00:43,907	[INFO]	323	SUCCESS	+2.0	
2020-12-19 04:00:43,907	[DEBUG]	
2020-12-19 04:00:44,894	[INFO]	324	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 04:00:45,915	[INFO]	325	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 04:00:46,969	[INFO]	326	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 04:00:50,310	[INFO]	327	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 04:00:51,284	[INFO]	328	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 04:00:51,287	[INFO]	329	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24)})
2020-12-19 04:00:52,308	[INFO]	330	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 04:00:52,312	[INFO]	331	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 04:00:53,319	[INFO]	332	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 04:00:54,328	[INFO]	333	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 04:00:55,348	[INFO]	334	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 04:00:55,353	[INFO]	335	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 04:00:55,354	[DEBUG]	
2020-12-19 04:00:55,357	[INFO]	336	SUCCESS	+2.0	
2020-12-19 04:00:55,358	[DEBUG]	
2020-12-19 04:00:56,402	[INFO]	337	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 04:00:59,699	[INFO]	338	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)})
2020-12-19 04:00:59,700	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     Node minNode = null;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 04:01:00,733	[INFO]	339	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'direction': 'before'})
2020-12-19 04:01:00,734	[INFO]	340	SUCCESS	+2.0	
2020-12-19 04:01:00,735	[DEBUG]	
2020-12-19 04:01:01,758	[INFO]	341	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 04:01:02,741	[INFO]	342	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 04:01:02,743	[INFO]	343	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 04:01:06,018	[INFO]	344	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 04:01:06,019	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,13 ****
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
+         int minDistance = Integer.MAX_VALUE;
          int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();

2020-12-19 04:01:06,020	[INFO]	345	SUCCESS	+2.0	
2020-12-19 04:01:06,020	[DEBUG]	
2020-12-19 04:01:07,051	[INFO]	346	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 04:01:08,018	[INFO]	347	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 04:01:11,389	[INFO]	348	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 04:01:11,390	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 23,29 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
--- 23,29 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             unvisitedNodes.remove(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {

2020-12-19 04:01:12,299	[INFO]	349	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 04:01:12,302	[INFO]	350	SUCCESS	+2.0	
2020-12-19 04:01:12,302	[DEBUG]	
2020-12-19 04:01:13,330	[INFO]	351	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:01:14,366	[INFO]	352	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 04:01:15,367	[INFO]	353	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6)})
2020-12-19 04:01:16,399	[INFO]	354	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '>'})
2020-12-19 04:01:17,421	[INFO]	355	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 04:01:18,428	[INFO]	356	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 04:01:19,459	[INFO]	357	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 04:01:20,473	[INFO]	358	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 04:01:23,771	[INFO]	359	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:01:23,772	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:01:23,773	[INFO]	360	SUCCESS	+2.0	
2020-12-19 04:01:23,774	[DEBUG]	
2020-12-19 04:01:23,775	[INFO]	361	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:01:23,776	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:01:24,725	[INFO]	362	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 04:01:28,021	[INFO]	363	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 04:01:28,022	[INFO]	364	SUCCESS	+2.0	
2020-12-19 04:01:28,022	[DEBUG]	
2020-12-19 04:01:28,981	[INFO]	365	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:01:30,028	[INFO]	366	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 04:01:33,382	[INFO]	367	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '!='})
2020-12-19 04:01:34,377	[INFO]	368	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 04:01:37,740	[INFO]	369	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 04:01:37,741	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,31 ****
--- 26,34 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }

2020-12-19 04:01:38,737	[INFO]	370	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:01:39,797	[INFO]	371	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'direction': 'before'})
2020-12-19 04:01:39,799	[INFO]	372	SUCCESS	+2.0	
2020-12-19 04:01:39,799	[DEBUG]	
2020-12-19 04:01:40,890	[INFO]	373	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 04:01:41,920	[INFO]	374	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18)})
2020-12-19 04:01:41,924	[INFO]	375	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:01:41,926	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:01:41,928	[INFO]	376	SUCCESS	+2.0	
2020-12-19 04:01:41,930	[DEBUG]	
2020-12-19 04:01:42,972	[INFO]	377	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28)})
2020-12-19 04:01:43,989	[INFO]	378	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'direction': 'before'})
2020-12-19 04:01:44,992	[INFO]	379	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 04:01:44,994	[INFO]	380	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:01:44,995	[DEBUG]	
2020-12-19 04:01:45,992	[INFO]	381	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 04:01:49,275	[INFO]	382	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'})
2020-12-19 04:01:49,276	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 20,25 ****
--- 20,28 ----
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  
+             if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }

2020-12-19 04:01:50,263	[INFO]	383	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 04:01:51,257	[INFO]	384	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 04:01:51,258	[INFO]	385	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:01:51,259	[DEBUG]	
2020-12-19 04:01:54,530	[INFO]	386	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 04:01:54,531	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 04:01:55,522	[INFO]	387	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 04:01:58,831	[INFO]	388	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)})
2020-12-19 04:01:58,832	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 27,32 ****
--- 27,35 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 04:02:02,126	[INFO]	389	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 04:02:02,128	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,32 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
--- 23,46 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
+                     if (visitedNodes.contains(nextnode)) {
+                     continue;
+                 }
                      continue;
                  }
  

2020-12-19 04:02:05,414	[INFO]	390	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:02:05,416	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,43 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:02:08,703	[INFO]	391	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 04:02:08,705	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,30 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
--- 23,28 ----
***************
*** 33,38 ****
--- 31,47 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:02:08,706	[INFO]	392	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)})
2020-12-19 04:02:08,707	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,30 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
--- 23,28 ----
***************
*** 33,38 ****
--- 31,47 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:02:08,709	[INFO]	393	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:02:08,710	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,30 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
--- 23,28 ----
***************
*** 33,38 ****
--- 31,47 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:02:08,711	[INFO]	394	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:02:08,712	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,30 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
--- 23,28 ----
***************
*** 33,38 ****
--- 31,47 ----
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
+ 
+                 if (node.getValue() == goalnode.getValue()) {
+                 return distance;
+             }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:02:08,713	[INFO]	395	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:02:08,714	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,43 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:02:12,012	[INFO]	396	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 04:02:12,013	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 23,34 ****
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
-             visitedNodes.add(node);
- 
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 23,43 ----
              if (node.getValue() == goalnode.getValue()) {
                  return distance;
              }
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
                      continue;
                  }
+ 
+                 if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
+                 }
+ 
+                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
+                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
+             }
+ 
+             for (Node nextnode : node.getSuccessors()) {
+                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 57,63 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:15,337	[INFO]	397	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 04:02:15,338	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:16,310	[INFO]	398	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 04:02:19,672	[INFO]	399	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 04:02:19,673	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 8,14 ****
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         int n = length_by_edge.size();
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
--- 8,14 ----
  
  public class SHORTEST_PATH_LENGTH {
      public int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {
!         
          // the shortest distance from source to each node
          Map<Node, Integer> unvisitedNodes = new HashMap<>();
          Set<Node> visitedNodes = new HashSet<>();
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:20,721	[INFO]	400	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>='})
2020-12-19 04:02:24,181	[INFO]	401	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 04:02:24,182	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:27,622	[INFO]	402	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'})
2020-12-19 04:02:27,623	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 49,55 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:30,881	[INFO]	403	SUCCESS	 3.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 04:02:31,868	[INFO]	404	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)})
2020-12-19 04:02:35,195	[INFO]	405	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'direction': 'before'}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:02:35,196	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             Node minNode = null;
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 27,33 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 47,53 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:38,482	[INFO]	406	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:02:38,483	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 46,52 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 Map<Node, Integer> unvisitedNodes = new HashMap<>();
                  minNode = node;
              }
          }

2020-12-19 04:02:39,481	[INFO]	407	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15), 'direction': 'before'})
2020-12-19 04:02:39,484	[INFO]	408	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:02:39,485	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:02:39,486	[INFO]	409	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)})
2020-12-19 04:02:39,487	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:02:39,489	[INFO]	410	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:02:39,490	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 26,34 ****
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
--- 26,32 ----
              visitedNodes.add(node);
  
              for (Node nextnode : node.getSuccessors()) {
!                 
  
                  if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);

2020-12-19 04:02:42,797	[INFO]	411	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13)}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>='})
2020-12-19 04:02:42,798	[INFO]	412	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '=='})
2020-12-19 04:02:42,799	[DEBUG]	
2020-12-19 04:02:42,799	[INFO]	413	SUCCESS	+2.0	
2020-12-19 04:02:42,800	[DEBUG]	
2020-12-19 04:02:43,772	[INFO]	414	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 04:02:47,091	[INFO]	415	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 04:02:47,092	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 04:02:48,078	[INFO]	416	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 04:02:48,082	[INFO]	417	SUCCESS	+2.0	
2020-12-19 04:02:48,083	[DEBUG]	
2020-12-19 04:02:49,060	[INFO]	418	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11)})
2020-12-19 04:02:50,059	[INFO]	419	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'direction': 'before'})
2020-12-19 04:02:53,355	[INFO]	420	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 04:02:53,356	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 46,51 ****
--- 46,52 ----
          Node minNode = null;
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
+             Map<Node, Integer> unvisitedNodes = new HashMap<>();
              int distance = list.get(node);
              if (distance < minDistance) {
                  minDistance = distance;

2020-12-19 04:02:53,357	[INFO]	421	SUCCESS	+2.0	
2020-12-19 04:02:53,357	[DEBUG]	
2020-12-19 04:02:54,338	[INFO]	422	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'direction': 'before'})
2020-12-19 04:02:55,326	[INFO]	423	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 18), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 04:02:58,650	[INFO]	424	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='})
2020-12-19 04:02:58,651	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,36 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
--- 30,36 ----
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) != null) {
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 04:02:59,633	[INFO]	425	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 04:02:59,636	[INFO]	426	SUCCESS	+2.0	
2020-12-19 04:02:59,636	[DEBUG]	
2020-12-19 04:03:00,648	[INFO]	427	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'direction': 'before'})
2020-12-19 04:03:01,654	[INFO]	428	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 04:03:04,886	[INFO]	429	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 04:03:08,186	[INFO]	430	SUCCESS	 3.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 4)})
2020-12-19 04:03:11,493	[INFO]	431	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 04:03:11,494	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 04:03:11,494	[INFO]	432	SUCCESS	+2.0	
2020-12-19 04:03:11,495	[DEBUG]	
2020-12-19 04:03:12,514	[INFO]	433	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'direction': 'before'})
2020-12-19 04:03:15,963	[INFO]	434	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 04:03:19,430	[INFO]	435	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 04:03:19,431	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 04:03:20,467	[INFO]	436	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'direction': 'before'})
2020-12-19 04:03:20,468	[INFO]	437	SUCCESS	+2.0	
2020-12-19 04:03:20,469	[DEBUG]	
2020-12-19 04:03:21,491	[INFO]	438	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 04:03:22,556	[INFO]	439	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 04:03:23,601	[INFO]	440	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 04:03:23,603	[INFO]	441	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '=='})
2020-12-19 04:03:24,626	[INFO]	442	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 04:03:24,627	[INFO]	443	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26)})
2020-12-19 04:03:24,628	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 48,54 ****
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 minDistance = distance;
                  minNode = node;
              }
          }
--- 48,54 ----
          for (Node node : list.keySet()) {
              int distance = list.get(node);
              if (distance < minDistance) {
!                 
                  minNode = node;
              }
          }

2020-12-19 04:03:24,628	[INFO]	444	SUCCESS	+2.0	
2020-12-19 04:03:24,629	[DEBUG]	
2020-12-19 04:03:28,007	[INFO]	445	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 04:03:28,008	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 04:03:28,984	[INFO]	446	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10)})
2020-12-19 04:03:28,987	[INFO]	447	SUCCESS	+2.0	
2020-12-19 04:03:28,989	[DEBUG]	
2020-12-19 04:03:29,998	[INFO]	448	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17)})
2020-12-19 04:03:31,021	[INFO]	449	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 04:03:32,043	[INFO]	450	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 04:03:32,045	[INFO]	451	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '=='})
2020-12-19 04:03:32,046	[DEBUG]	
2020-12-19 04:03:32,047	[INFO]	452	SUCCESS	+2.0	
2020-12-19 04:03:32,047	[DEBUG]	
2020-12-19 04:03:35,390	[INFO]	453	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 04:03:36,356	[INFO]	454	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 04:03:37,368	[INFO]	455	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'direction': 'before'})
2020-12-19 04:03:40,617	[INFO]	456	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 12)})
2020-12-19 04:03:40,618	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 25,42 ****
              }
              visitedNodes.add(node);
  
!             for (Node nextnode : node.getSuccessors()) {
!                 if (visitedNodes.contains(nextnode)) {
!                     continue;
!                 }
! 
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
! 
!                 unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
!                         unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
!             }
          }
  
          return Integer.MAX_VALUE;
--- 25,31 ----
              }
              visitedNodes.add(node);
  
!             
          }
  
          return Integer.MAX_VALUE;

2020-12-19 04:03:40,619	[INFO]	457	SUCCESS	+2.0	
2020-12-19 04:03:40,619	[DEBUG]	
2020-12-19 04:03:41,627	[INFO]	458	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<'})
2020-12-19 04:03:42,643	[INFO]	459	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19)})
2020-12-19 04:03:43,658	[INFO]	460	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 19), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 04:03:44,672	[INFO]	461	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 24), 'direction': 'before'})
2020-12-19 04:03:45,676	[INFO]	462	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'direction': 'before'})
2020-12-19 04:03:46,696	[INFO]	463	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 04:03:46,697	[INFO]	464	SUCCESS	 4.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 04:03:47,705	[INFO]	465	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 8), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 1), 'direction': 'before'})
2020-12-19 04:03:48,713	[INFO]	466	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:03:52,032	[INFO]	467	SUCCESS	+2.0	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 04:03:52,033	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,37 ****
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
!                     continue;
                  }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),

2020-12-19 04:03:53,023	[INFO]	468	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 04:03:54,021	[INFO]	469	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 11), 'direction': 'before'})
2020-12-19 04:03:54,022	[INFO]	470	SUCCESS	+2.0	
2020-12-19 04:03:54,023	[DEBUG]	
2020-12-19 04:03:55,025	[INFO]	471	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 0), 'direction': 'before'})
2020-12-19 04:03:55,027	[INFO]	472	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:03:56,016	[INFO]	473	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 28), 'direction': 'before'})
2020-12-19 04:03:57,016	[INFO]	474	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 5)})
2020-12-19 04:03:58,006	[INFO]	475	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14), 'direction': 'before'})
2020-12-19 04:03:58,979	[INFO]	476	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 26), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 04:04:00,002	[INFO]	477	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 2), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'direction': 'before'})
2020-12-19 04:04:01,039	[INFO]	478	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 04:04:04,352	[INFO]	479	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)})
2020-12-19 04:04:04,353	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 27,33 ****
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     continue;
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
--- 27,33 ----
  
              for (Node nextnode : node.getSuccessors()) {
                  if (visitedNodes.contains(nextnode)) {
!                     
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {

2020-12-19 04:04:05,321	[INFO]	480	PARSE_ERROR	 None	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 14)}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21)})
2020-12-19 04:04:05,325	[INFO]	481	SUCCESS	+2.0	
2020-12-19 04:04:05,326	[DEBUG]	
2020-12-19 04:04:06,337	[INFO]	482	PARSE_ERROR	 None	StmtReplacement({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 13), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 23)})
2020-12-19 04:04:07,325	[INFO]	483	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<='})
2020-12-19 04:04:08,336	[INFO]	484	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '<='})
2020-12-19 04:04:08,339	[INFO]	485	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 9), 'value': '<'})
2020-12-19 04:04:08,342	[INFO]	486	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 16), 'value': '>'})
2020-12-19 04:04:11,679	[INFO]	487	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 04:04:11,680	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 04:04:14,964	[INFO]	488	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 04:04:14,966	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 18,23 ****
--- 18,24 ----
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
              int distance = unvisitedNodes.get(node);
+             unvisitedNodes.put(startnode, 0);
              unvisitedNodes.remove(node);
  
              if (node.getValue() == goalnode.getValue()) {
***************
*** 31,36 ****
--- 32,38 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 04:04:18,231	[INFO]	489	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '>'})
2020-12-19 04:04:18,233	[INFO]	490	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'})
2020-12-19 04:04:18,234	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  

2020-12-19 04:04:21,601	[INFO]	491	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 04:04:21,602	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 31,36 ****
--- 31,37 ----
                  }
  
                  if (unvisitedNodes.get(nextnode) == null) {
+                     unvisitedNodes.put(startnode, 0);
                      unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
                  }
  
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 48,54 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 04:04:24,826	[INFO]	492	SUCCESS	 4.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 17), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 3), 'direction': 'before'}) | ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 27)})
2020-12-19 04:04:28,140	[INFO]	493	SUCCESS	+2.0	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='})
2020-12-19 04:04:28,141	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 47,53 ****
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance < minDistance) {
                  minDistance = distance;
                  minNode = node;
              }
--- 47,53 ----
          int minDistance = Integer.MAX_VALUE;
          for (Node node : list.keySet()) {
              int distance = list.get(node);
!             if (distance != minDistance) {
                  minDistance = distance;
                  minNode = node;
              }

2020-12-19 04:04:43,220	[INFO]	494	PARSE_ERROR	 None	ComparisonOperatorSetting({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 25), 'value': '!='}) | StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 7)})
2020-12-19 04:04:43,221	[INFO]	495	SUCCESS	+2.0	
2020-12-19 04:04:43,221	[DEBUG]	
2020-12-19 04:04:46,194	[INFO]	496	SUCCESS	+2.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 15)})
2020-12-19 04:04:46,195	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 30,38 ****
                      continue;
                  }
  
!                 if (unvisitedNodes.get(nextnode) == null) {
!                     unvisitedNodes.put(nextnode, Integer.MAX_VALUE);
!                 }
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));
--- 30,36 ----
                      continue;
                  }
  
!                 
  
                  unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),
                          unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));

2020-12-19 04:04:46,196	[INFO]	497	SUCCESS	+2.0	
2020-12-19 04:04:46,196	[DEBUG]	
2020-12-19 04:04:49,342	[INFO]	498	SUCCESS	 4.0	StmtDeletion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 22)})
2020-12-19 04:04:50,398	[INFO]	499	PARSE_ERROR	 None	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 20), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 10), 'direction': 'before'})
2020-12-19 04:04:53,758	[INFO]	500	SUCCESS	+2.0	MyStmtInsertion({'target': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 6), 'ingredient': ('java_programs/SHORTEST_PATH_LENGTH.java.xml', 21), 'direction': 'before'})
2020-12-19 04:04:53,761	[DEBUG]	*** before: java_programs/SHORTEST_PATH_LENGTH.java.xml
--- after: java_programs/SHORTEST_PATH_LENGTH.java.xml
***************
*** 17,22 ****
--- 17,23 ----
  
          while (!unvisitedNodes.isEmpty()) {
              Node node = getNodeWithMinDistance(unvisitedNodes);
+             int minDistance = Integer.MAX_VALUE;
              int distance = unvisitedNodes.get(node);
              unvisitedNodes.remove(node);
  

2020-12-19 04:04:53,761	[INFO]	==== END ====
2020-12-19 04:04:53,761	[INFO]	Reason: step budget
2020-12-19 04:04:53,762	[INFO]	
2020-12-19 04:04:53,763	[INFO]	========== REPORT ==========
2020-12-19 04:04:53,763	[INFO]	==== Epoch 1 ====
2020-12-19 04:04:53,763	[INFO]	Termination: step budget
2020-12-19 04:04:53,763	[INFO]	Number of interations: 500
2020-12-19 04:04:53,764	[INFO]	==== Epoch 2 ====
2020-12-19 04:04:53,764	[INFO]	Termination: step budget
2020-12-19 04:04:53,764	[INFO]	Number of interations: 500
2020-12-19 04:04:53,764	[INFO]	==== Epoch 3 ====
2020-12-19 04:04:53,764	[INFO]	Termination: step budget
2020-12-19 04:04:53,764	[INFO]	Number of interations: 500
2020-12-19 04:04:53,764	[INFO]	==== Epoch 4 ====
2020-12-19 04:04:53,765	[INFO]	Termination: step budget
2020-12-19 04:04:53,765	[INFO]	Number of interations: 500
2020-12-19 04:04:53,765	[INFO]	==== Epoch 5 ====
2020-12-19 04:04:53,765	[INFO]	Termination: step budget
2020-12-19 04:04:53,765	[INFO]	Number of interations: 500
2020-12-19 04:04:53,765	[INFO]	==== Epoch 6 ====
2020-12-19 04:04:53,765	[INFO]	Termination: step budget
2020-12-19 04:04:53,766	[INFO]	Number of interations: 500
2020-12-19 04:04:53,766	[INFO]	==== Epoch 7 ====
2020-12-19 04:04:53,766	[INFO]	Termination: step budget
2020-12-19 04:04:53,766	[INFO]	Number of interations: 500
2020-12-19 04:04:53,766	[INFO]	==== Epoch 8 ====
2020-12-19 04:04:53,766	[INFO]	Termination: step budget
2020-12-19 04:04:53,767	[INFO]	Number of interations: 500
2020-12-19 04:04:53,767	[INFO]	==== Epoch 9 ====
2020-12-19 04:04:53,767	[INFO]	Termination: step budget
2020-12-19 04:04:53,767	[INFO]	Number of interations: 500
2020-12-19 04:04:53,767	[INFO]	==== Epoch 10 ====
2020-12-19 04:04:53,767	[INFO]	Termination: step budget
2020-12-19 04:04:53,768	[INFO]	Number of interations: 500
2020-12-19 04:04:53,768	[INFO]	==== Epoch 11 ====
2020-12-19 04:04:53,768	[INFO]	Termination: step budget
2020-12-19 04:04:53,768	[INFO]	Number of interations: 500
2020-12-19 04:04:53,768	[INFO]	==== Epoch 12 ====
2020-12-19 04:04:53,768	[INFO]	Termination: step budget
2020-12-19 04:04:53,768	[INFO]	Number of interations: 500
2020-12-19 04:04:53,768	[INFO]	==== Epoch 13 ====
2020-12-19 04:04:53,769	[INFO]	Termination: step budget
2020-12-19 04:04:53,769	[INFO]	Number of interations: 500
2020-12-19 04:04:53,769	[INFO]	==== Epoch 14 ====
2020-12-19 04:04:53,769	[INFO]	Termination: step budget
2020-12-19 04:04:53,769	[INFO]	Number of interations: 500
2020-12-19 04:04:53,769	[INFO]	==== Epoch 15 ====
2020-12-19 04:04:53,769	[INFO]	Termination: step budget
2020-12-19 04:04:53,770	[INFO]	Number of interations: 500
2020-12-19 04:04:53,770	[INFO]	==== Epoch 16 ====
2020-12-19 04:04:53,770	[INFO]	Termination: step budget
2020-12-19 04:04:53,770	[INFO]	Number of interations: 500
2020-12-19 04:04:53,770	[INFO]	==== Epoch 17 ====
2020-12-19 04:04:53,770	[INFO]	Termination: step budget
2020-12-19 04:04:53,770	[INFO]	Number of interations: 500
2020-12-19 04:04:53,770	[INFO]	==== Epoch 18 ====
2020-12-19 04:04:53,771	[INFO]	Termination: step budget
2020-12-19 04:04:53,771	[INFO]	Number of interations: 500
2020-12-19 04:04:53,771	[INFO]	==== Epoch 19 ====
2020-12-19 04:04:53,771	[INFO]	Termination: step budget
2020-12-19 04:04:53,771	[INFO]	Number of interations: 500
2020-12-19 04:04:53,771	[INFO]	==== Epoch 20 ====
2020-12-19 04:04:53,771	[INFO]	Termination: step budget
2020-12-19 04:04:53,772	[INFO]	Number of interations: 500
2020-12-19 04:04:53,786	[INFO]	Experiment duration: 14210.669573307037
