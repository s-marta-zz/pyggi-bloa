<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="Java" filename="NEXT_PERMUTATION.java"><package>package <name>java_programs</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<comment type="line">//import com.google.guava.Lists;</comment>

<comment type="block">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */</comment>

<comment type="block" format="javadoc">/**
 *
 * @author derricklin
 */</comment>
<class><specifier>public</specifier> class <name>NEXT_PERMUTATION</name> <block>{
    <function><type><specifier>public</specifier> <specifier>static</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>next_permutation</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name><name>perm</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><call><name><name>perm</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>!=</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>next_perm</name> <init>= <expr><name>perm</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>temp_j</name> <init>= <expr><call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>temp_i</name> <init>= <expr><call><name><name>perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>next_perm</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>temp_j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>next_perm</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>temp_i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>reversed</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><call><name><name>next_perm</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>!=</operator><name>i</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>reversed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>next_perm</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <for>for <control>(<init><decl><type><name>Integer</name></type> <name>replace</name> <range>: <expr><name>reversed</name></expr></range></decl></init>)</control> <block>{<block_content>
                            <expr_stmt><expr><call><name><name>next_perm</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <return>return <expr><name>next_perm</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    </block_content>}</block></function>
}</block></class>
</unit>
